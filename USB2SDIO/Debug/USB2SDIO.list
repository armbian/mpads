
USB2SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009848  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad8  08009ad8  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08009ad8  08009ad8  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ad8  08009ad8  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  20000120  08009c00  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20000c5c  08009c00  00020c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e3c  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036dc  00000000  00000000  00039f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  0003d668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001db1a  00000000  00000000  0003f700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000142f9  00000000  00000000  0005d21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bb4d  00000000  00000000  00071513  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000452c  00000000  00000000  0010d0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000120 	.word	0x20000120
 8000200:	00000000 	.word	0x00000000
 8000204:	08009a14 	.word	0x08009a14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000124 	.word	0x20000124
 8000220:	08009a14 	.word	0x08009a14

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa72 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f809 	bl	8000242 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8b8 	bl	80003a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000234:	f008 ff42 	bl	80090bc <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000238:	f000 f88e 	bl	8000358 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800023c:	f000 f85e 	bl	80002fc <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x1c>

08000242 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b096      	sub	sp, #88	; 0x58
 8000246:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800024c:	2228      	movs	r2, #40	; 0x28
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f009 fbd7 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000256:	f107 031c 	add.w	r3, r7, #28
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
 8000274:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	2301      	movs	r3, #1
 8000278:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000298:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fa32 	bl	8002708 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002aa:	f000 f905 	bl	80004b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	f107 031c 	add.w	r3, r7, #28
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fc9c 	bl	8002c08 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002d6:	f000 f8ef 	bl	80004b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002da:	2310      	movs	r3, #16
 80002dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fe19 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002f0:	f000 f8e2 	bl	80004b8 <Error_Handler>
  }
}
 80002f4:	bf00      	nop
 80002f6:	3758      	adds	r7, #88	; 0x58
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 100;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_I2C1_Init+0x50>)
 8000314:	2264      	movs	r2, #100	; 0x64
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	; (800034c <MX_I2C1_Init+0x50>)
 800033a:	f000 fcfd 	bl	8000d38 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f8b8 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200003b0 	.word	0x200003b0
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SDIO_SD_Init+0x44>)
 800035e:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <MX_SDIO_SD_Init+0x48>)
 8000360:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_SDIO_SD_Init+0x44>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_SDIO_SD_Init+0x44>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_SDIO_SD_Init+0x44>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_SDIO_SD_Init+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_SDIO_SD_Init+0x44>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SDIO_SD_Init+0x44>)
 8000382:	2203      	movs	r2, #3
 8000384:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_SDIO_SD_Init+0x44>)
 8000388:	f002 fe7e 	bl	8003088 <HAL_SD_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000392:	f000 f891 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000404 	.word	0x20000404
 80003a0:	40018000 	.word	0x40018000

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a3a      	ldr	r2, [pc, #232]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0320 	and.w	r3, r3, #32
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d0:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a34      	ldr	r2, [pc, #208]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0308 	and.w	r3, r3, #8
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b2f      	ldr	r3, [pc, #188]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a2e      	ldr	r2, [pc, #184]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <MX_GPIO_Init+0x104>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <MX_GPIO_Init+0x104>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <MX_GPIO_Init+0x104>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MX_GPIO_Init+0x104>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PORT0_GPIO_Port, PORT0_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4823      	ldr	r0, [pc, #140]	; (80004ac <MX_GPIO_Init+0x108>)
 8000420:	f000 fc72 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PORT1_Pin|PORT2_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800042a:	4820      	ldr	r0, [pc, #128]	; (80004ac <MX_GPIO_Init+0x108>)
 800042c:	f000 fc6c 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT3_Pin|PORT4_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	21c0      	movs	r1, #192	; 0xc0
 8000434:	481e      	ldr	r0, [pc, #120]	; (80004b0 <MX_GPIO_Init+0x10c>)
 8000436:	f000 fc67 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PORT5_Pin|PORT6_Pin|PORT7_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000440:	481c      	ldr	r0, [pc, #112]	; (80004b4 <MX_GPIO_Init+0x110>)
 8000442:	f000 fc61 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT0_Pin PORT1_Pin PORT2_Pin */
  GPIO_InitStruct.Pin = PORT0_Pin|PORT1_Pin|PORT2_Pin;
 8000446:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4813      	ldr	r0, [pc, #76]	; (80004ac <MX_GPIO_Init+0x108>)
 8000460:	f000 fae8 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PORT3_Pin PORT4_Pin */
  GPIO_InitStruct.Pin = PORT3_Pin|PORT4_Pin;
 8000464:	23c0      	movs	r3, #192	; 0xc0
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	480d      	ldr	r0, [pc, #52]	; (80004b0 <MX_GPIO_Init+0x10c>)
 800047c:	f000 fada 	bl	8000a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PORT5_Pin PORT6_Pin PORT7_Pin */
  GPIO_InitStruct.Pin = PORT5_Pin|PORT6_Pin|PORT7_Pin;
 8000480:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_GPIO_Init+0x110>)
 800049a:	f000 facb 	bl	8000a34 <HAL_GPIO_Init>

}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	40011000 	.word	0x40011000
 80004b4:	40010800 	.word	0x40010800

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004be:	e7fe      	b.n	80004be <Error_Handler+0x6>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <HAL_MspInit+0x5c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_MspInit+0x5c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x60>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_MspInit+0x60>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <HAL_I2C_MspInit+0x70>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d123      	bne.n	800058c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800055c:	23c0      	movs	r3, #192	; 0xc0
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000560:	2312      	movs	r3, #18
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <HAL_I2C_MspInit+0x78>)
 8000570:	f000 fa60 	bl	8000a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40005400 	.word	0x40005400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00

080005a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <HAL_SD_MspInit+0xa4>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d13c      	bne.n	800063a <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0310 	and.w	r3, r3, #16
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_SD_MspInit+0xa8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000608:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_SD_MspInit+0xac>)
 800061e:	f000 fa09 	bl	8000a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000622:	2304      	movs	r3, #4
 8000624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	4619      	mov	r1, r3
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <HAL_SD_MspInit+0xb0>)
 8000636:	f000 f9fd 	bl	8000a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40018000 	.word	0x40018000
 8000648:	40021000 	.word	0x40021000
 800064c:	40011000 	.word	0x40011000
 8000650:	40011400 	.word	0x40011400

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 f87f 	bl	800079c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006aa:	f000 fdae 	bl	800120a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000970 	.word	0x20000970

080006b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <Reset_Handler>:
 80006c4:	2100      	movs	r1, #0
 80006c6:	e003      	b.n	80006d0 <LoopCopyDataInit>

080006c8 <CopyDataInit>:
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x14>)
 80006ca:	585b      	ldr	r3, [r3, r1]
 80006cc:	5043      	str	r3, [r0, r1]
 80006ce:	3104      	adds	r1, #4

080006d0 <LoopCopyDataInit>:
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <LoopFillZerobss+0x18>)
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <LoopFillZerobss+0x1c>)
 80006d4:	1842      	adds	r2, r0, r1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3f6      	bcc.n	80006c8 <CopyDataInit>
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x20>)
 80006dc:	e002      	b.n	80006e4 <LoopFillZerobss>

080006de <FillZerobss>:
 80006de:	2300      	movs	r3, #0
 80006e0:	f842 3b04 	str.w	r3, [r2], #4

080006e4 <LoopFillZerobss>:
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <LoopFillZerobss+0x24>)
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3f9      	bcc.n	80006de <FillZerobss>
 80006ea:	f7ff ffe5 	bl	80006b8 <SystemInit>
 80006ee:	f009 f965 	bl	80099bc <__libc_init_array>
 80006f2:	f7ff fd97 	bl	8000224 <main>
 80006f6:	4770      	bx	lr
 80006f8:	08009ae0 	.word	0x08009ae0
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000120 	.word	0x20000120
 8000704:	20000120 	.word	0x20000120
 8000708:	20000c5c 	.word	0x20000c5c

0800070c <ADC1_2_IRQHandler>:
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_Init+0x28>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_Init+0x28>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f945 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f808 	bl	800073c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f7ff fec8 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_InitTick+0x54>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x58>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f95d 	bl	8000a1a <HAL_SYSTICK_Config>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e00e      	b.n	8000788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d80a      	bhi.n	8000786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f925 	bl	80009c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800077c:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_InitTick+0x5c>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
 8000784:	e000      	b.n	8000788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000008 	.word	0x20000008
 8000798:	20000004 	.word	0x20000004

0800079c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x1c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <HAL_IncTick+0x20>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000488 	.word	0x20000488

080007c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return uwTick;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <HAL_GetTick+0x10>)
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	20000488 	.word	0x20000488

080007d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007dc:	f7ff fff0 	bl	80007c0 <HAL_GetTick>
 80007e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ec:	d005      	beq.n	80007fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_Delay+0x40>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fa:	bf00      	nop
 80007fc:	f7ff ffe0 	bl	80007c0 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <HAL_Delay+0x28>
  {
  }
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000008 	.word	0x20000008

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4906      	ldr	r1, [pc, #24]	; (80008b0 <__NVIC_EnableIRQ+0x34>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db0a      	blt.n	80008de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	490c      	ldr	r1, [pc, #48]	; (8000900 <__NVIC_SetPriority+0x4c>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	0112      	lsls	r2, r2, #4
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008dc:	e00a      	b.n	80008f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4908      	ldr	r1, [pc, #32]	; (8000904 <__NVIC_SetPriority+0x50>)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	3b04      	subs	r3, #4
 80008ec:	0112      	lsls	r2, r2, #4
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	440b      	add	r3, r1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	401a      	ands	r2, r3
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000950:	f04f 31ff 	mov.w	r1, #4294967295
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43d9      	mvns	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	4313      	orrs	r3, r2
         );
}
 8000962:	4618      	mov	r0, r3
 8000964:	3724      	adds	r7, #36	; 0x24
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff2d 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff42 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <__NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff35 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffa2 	bl	800096c <SysTick_Config>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e133      	b.n	8000cb0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8122 	bne.w	8000caa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d034      	beq.n	8000ad8 <HAL_GPIO_Init+0xa4>
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d80d      	bhi.n	8000a8e <HAL_GPIO_Init+0x5a>
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d02b      	beq.n	8000ace <HAL_GPIO_Init+0x9a>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d804      	bhi.n	8000a84 <HAL_GPIO_Init+0x50>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d031      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d01c      	beq.n	8000abc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a82:	e048      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d043      	beq.n	8000b10 <HAL_GPIO_Init+0xdc>
 8000a88:	2b11      	cmp	r3, #17
 8000a8a:	d01b      	beq.n	8000ac4 <HAL_GPIO_Init+0x90>
          break;
 8000a8c:	e043      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a8e:	4a8f      	ldr	r2, [pc, #572]	; (8000ccc <HAL_GPIO_Init+0x298>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d026      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000a94:	4a8d      	ldr	r2, [pc, #564]	; (8000ccc <HAL_GPIO_Init+0x298>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d806      	bhi.n	8000aa8 <HAL_GPIO_Init+0x74>
 8000a9a:	4a8d      	ldr	r2, [pc, #564]	; (8000cd0 <HAL_GPIO_Init+0x29c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d020      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000aa0:	4a8c      	ldr	r2, [pc, #560]	; (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d01d      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
          break;
 8000aa6:	e036      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aa8:	4a8b      	ldr	r2, [pc, #556]	; (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d019      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000aae:	4a8b      	ldr	r2, [pc, #556]	; (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d016      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
 8000ab4:	4a8a      	ldr	r2, [pc, #552]	; (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0xae>
          break;
 8000aba:	e02c      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e028      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e023      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e01e      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	330c      	adds	r3, #12
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e019      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aea:	2304      	movs	r3, #4
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e012      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	611a      	str	r2, [r3, #16]
          break;
 8000b02:	e008      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	615a      	str	r2, [r3, #20]
          break;
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d801      	bhi.n	8000b20 <HAL_GPIO_Init+0xec>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	e001      	b.n	8000b24 <HAL_GPIO_Init+0xf0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3304      	adds	r3, #4
 8000b24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	2bff      	cmp	r3, #255	; 0xff
 8000b2a:	d802      	bhi.n	8000b32 <HAL_GPIO_Init+0xfe>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x104>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	3b08      	subs	r3, #8
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	210f      	movs	r1, #15
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	401a      	ands	r2, r3
 8000b4a:	6a39      	ldr	r1, [r7, #32]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	431a      	orrs	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 80a2 	beq.w	8000caa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b7e:	4a5a      	ldr	r2, [pc, #360]	; (8000ce8 <HAL_GPIO_Init+0x2b4>)
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3302      	adds	r3, #2
 8000b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	220f      	movs	r2, #15
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a51      	ldr	r2, [pc, #324]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d01f      	beq.n	8000bea <HAL_GPIO_Init+0x1b6>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a50      	ldr	r2, [pc, #320]	; (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d019      	beq.n	8000be6 <HAL_GPIO_Init+0x1b2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_GPIO_Init+0x2c0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0x1ae>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4e      	ldr	r2, [pc, #312]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <HAL_GPIO_Init+0x1aa>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x1a6>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_GPIO_Init+0x1a2>
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	e00a      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x1b8>
 8000bea:	2300      	movs	r3, #0
 8000bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bee:	f002 0203 	and.w	r2, r2, #3
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bfc:	493a      	ldr	r1, [pc, #232]	; (8000ce8 <HAL_GPIO_Init+0x2b4>)
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	493a      	ldr	r1, [pc, #232]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]
 8000c22:	e006      	b.n	8000c32 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4935      	ldr	r1, [pc, #212]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	4930      	ldr	r1, [pc, #192]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	604b      	str	r3, [r1, #4]
 8000c4a:	e006      	b.n	8000c5a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	492b      	ldr	r1, [pc, #172]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	4926      	ldr	r1, [pc, #152]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	608b      	str	r3, [r1, #8]
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4921      	ldr	r1, [pc, #132]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d006      	beq.n	8000c9c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	491c      	ldr	r1, [pc, #112]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	60cb      	str	r3, [r1, #12]
 8000c9a:	e006      	b.n	8000caa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	4917      	ldr	r1, [pc, #92]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3301      	adds	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f47f aec4 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	372c      	adds	r7, #44	; 0x2c
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	10210000 	.word	0x10210000
 8000cd0:	10110000 	.word	0x10110000
 8000cd4:	10120000 	.word	0x10120000
 8000cd8:	10310000 	.word	0x10310000
 8000cdc:	10320000 	.word	0x10320000
 8000ce0:	10220000 	.word	0x10220000
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40010c00 	.word	0x40010c00
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40011400 	.word	0x40011400
 8000cfc:	40011800 	.word	0x40011800
 8000d00:	40011c00 	.word	0x40011c00
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d24:	e003      	b.n	8000d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e11f      	b.n	8000f8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d106      	bne.n	8000d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fbe0 	bl	8000524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2224      	movs	r2, #36	; 0x24
 8000d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d9c:	f002 f88c 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8000da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a7b      	ldr	r2, [pc, #492]	; (8000f94 <HAL_I2C_Init+0x25c>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d807      	bhi.n	8000dbc <HAL_I2C_Init+0x84>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a7a      	ldr	r2, [pc, #488]	; (8000f98 <HAL_I2C_Init+0x260>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	bf94      	ite	ls
 8000db4:	2301      	movls	r3, #1
 8000db6:	2300      	movhi	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	e006      	b.n	8000dca <HAL_I2C_Init+0x92>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a77      	ldr	r2, [pc, #476]	; (8000f9c <HAL_I2C_Init+0x264>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf94      	ite	ls
 8000dc4:	2301      	movls	r3, #1
 8000dc6:	2300      	movhi	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0db      	b.n	8000f8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4a72      	ldr	r2, [pc, #456]	; (8000fa0 <HAL_I2C_Init+0x268>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a64      	ldr	r2, [pc, #400]	; (8000f94 <HAL_I2C_Init+0x25c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d802      	bhi.n	8000e0c <HAL_I2C_Init+0xd4>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e009      	b.n	8000e20 <HAL_I2C_Init+0xe8>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	4a63      	ldr	r2, [pc, #396]	; (8000fa4 <HAL_I2C_Init+0x26c>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	3301      	adds	r3, #1
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4956      	ldr	r1, [pc, #344]	; (8000f94 <HAL_I2C_Init+0x25c>)
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d80d      	bhi.n	8000e5c <HAL_I2C_Init+0x124>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e59      	subs	r1, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	bf38      	it	cc
 8000e58:	2304      	movcc	r3, #4
 8000e5a:	e04f      	b.n	8000efc <HAL_I2C_Init+0x1c4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <HAL_I2C_Init+0x150>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	440b      	add	r3, r1
 8000e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf0c      	ite	eq
 8000e80:	2301      	moveq	r3, #1
 8000e82:	2300      	movne	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e012      	b.n	8000eae <HAL_I2C_Init+0x176>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	0099      	lsls	r1, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Init+0x17e>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e022      	b.n	8000efc <HAL_I2C_Init+0x1c4>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <HAL_I2C_Init+0x1a4>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1e58      	subs	r0, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6859      	ldr	r1, [r3, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eda:	e00f      	b.n	8000efc <HAL_I2C_Init+0x1c4>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	0099      	lsls	r1, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6911      	ldr	r1, [r2, #16]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68d2      	ldr	r2, [r2, #12]
 8000f36:	4311      	orrs	r1, r2
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2220      	movs	r2, #32
 8000f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	000186a0 	.word	0x000186a0
 8000f98:	001e847f 	.word	0x001e847f
 8000f9c:	003d08ff 	.word	0x003d08ff
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	10624dd3 	.word	0x10624dd3

08000fa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af06      	add	r7, sp, #24
 8000fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0fd      	b.n	80011b6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f008 fa34 	bl	800943c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fd2f 	bl	8004a44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	687e      	ldr	r6, [r7, #4]
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f106 0410 	add.w	r4, r6, #16
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	1d33      	adds	r3, r6, #4
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f003 fcf9 	bl	80049f8 <USB_CoreInit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0ce      	b.n	80011b6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fd2a 	bl	8004a78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e04c      	b.n	80010c4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3301      	adds	r3, #1
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b298      	uxth	r0, r3
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3336      	adds	r3, #54	; 0x36
 8001068:	4602      	mov	r2, r0
 800106a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3303      	adds	r3, #3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3338      	adds	r3, #56	; 0x38
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	333c      	adds	r3, #60	; 0x3c
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3340      	adds	r3, #64	; 0x40
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3ad      	bcc.n	800102a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e044      	b.n	800115e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3b5      	bcc.n	80010d4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687e      	ldr	r6, [r7, #4]
 8001170:	466d      	mov	r5, sp
 8001172:	f106 0410 	add.w	r4, r6, #16
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	602b      	str	r3, [r5, #0]
 800117e:	1d33      	adds	r3, r6, #4
 8001180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f003 fc84 	bl	8004a90 <USB_DevInit>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2202      	movs	r2, #2
 8001192:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00d      	b.n	80011b6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 fc34 	bl	8006a1c <USB_DevDisconnect>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_PCD_Start+0x16>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e016      	b.n	8001202 <HAL_PCD_Start+0x44>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fc19 	bl	8004a18 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 fbb0 	bl	800994e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fc08 	bl	8006a08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b088      	sub	sp, #32
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fc0a 	bl	8006a30 <USB_ReadInterrupts>
 800121c:	4603      	mov	r3, r0
 800121e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001226:	d102      	bne.n	800122e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb8e 	bl	800194a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fbfc 	bl	8006a30 <USB_ReadInterrupts>
 8001238:	4603      	mov	r3, r0
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001242:	d112      	bne.n	800126a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001256:	b292      	uxth	r2, r2
 8001258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f008 f968 	bl	8009532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f925 	bl	80014b4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fbde 	bl	8006a30 <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800127e:	d10b      	bne.n	8001298 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001292:	b292      	uxth	r2, r2
 8001294:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f005 fbc7 	bl	8006a30 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ac:	d10b      	bne.n	80012c6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012c0:	b292      	uxth	r2, r2
 80012c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fbb0 	bl	8006a30 <USB_ReadInterrupts>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012da:	d126      	bne.n	800132a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0208 	bic.w	r2, r2, #8
 8001306:	b292      	uxth	r2, r2
 8001308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f008 f949 	bl	80095a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001324:	b292      	uxth	r2, r2
 8001326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f005 fb7e 	bl	8006a30 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800133e:	f040 8084 	bne.w	800144a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	77fb      	strb	r3, [r7, #31]
 8001346:	e011      	b.n	800136c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	441a      	add	r2, r3
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	b292      	uxth	r2, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	f107 0120 	add.w	r1, r7, #32
 8001360:	440b      	add	r3, r1
 8001362:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	3301      	adds	r3, #1
 800136a:	77fb      	strb	r3, [r7, #31]
 800136c:	7ffb      	ldrb	r3, [r7, #31]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d9ea      	bls.n	8001348 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	b292      	uxth	r2, r2
 800139e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013a2:	bf00      	nop
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f6      	beq.n	80013a4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c8:	b292      	uxth	r2, r2
 80013ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	77fb      	strb	r3, [r7, #31]
 80013d2:	e010      	b.n	80013f6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	4611      	mov	r1, r2
 80013dc:	7ffa      	ldrb	r2, [r7, #31]
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	440a      	add	r2, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	f107 0120 	add.w	r1, r7, #32
 80013e8:	440b      	add	r3, r1
 80013ea:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013ee:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	3301      	adds	r3, #1
 80013f4:	77fb      	strb	r3, [r7, #31]
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d9eb      	bls.n	80013d4 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0208 	orr.w	r2, r2, #8
 800140e:	b292      	uxth	r2, r2
 8001410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001426:	b292      	uxth	r2, r2
 8001428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001434:	b29a      	uxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0204 	orr.w	r2, r2, #4
 800143e:	b292      	uxth	r2, r2
 8001440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f008 f893 	bl	8009570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f005 faee 	bl	8006a30 <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145e:	d10e      	bne.n	800147e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f008 f84c 	bl	8009516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f005 fad4 	bl	8006a30 <USB_ReadInterrupts>
 8001488:	4603      	mov	r3, r0
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001492:	d10b      	bne.n	80014ac <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800149c:	b29a      	uxth	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a6:	b292      	uxth	r2, r2
 80014a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_PCD_SetAddress+0x1a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e013      	b.n	80014f6 <HAL_PCD_SetAddress+0x42>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fa7b 	bl	80069e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	4608      	mov	r0, r1
 8001508:	4611      	mov	r1, r2
 800150a:	461a      	mov	r2, r3
 800150c:	4603      	mov	r3, r0
 800150e:	70fb      	strb	r3, [r7, #3]
 8001510:	460b      	mov	r3, r1
 8001512:	803b      	strh	r3, [r7, #0]
 8001514:	4613      	mov	r3, r2
 8001516:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800151c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da0e      	bge.n	8001542 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2201      	movs	r2, #1
 800153e:	705a      	strb	r2, [r3, #1]
 8001540:	e00e      	b.n	8001560 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	f003 0207 	and.w	r2, r3, #7
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2da      	uxtb	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800156c:	883a      	ldrh	r2, [r7, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	78ba      	ldrb	r2, [r7, #2]
 8001576:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d102      	bne.n	8001596 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_PCD_EP_Open+0xa6>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e00e      	b.n	80015c2 <HAL_PCD_EP_Open+0xc4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 faa2 	bl	8004afc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015c0:	7afb      	ldrb	r3, [r7, #11]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	da0e      	bge.n	80015fc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	705a      	strb	r2, [r3, #1]
 80015fa:	e00e      	b.n	800161a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f003 0207 	and.w	r2, r3, #7
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	b2da      	uxtb	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_PCD_EP_Close+0x6a>
 8001630:	2302      	movs	r3, #2
 8001632:	e00e      	b.n	8001652 <HAL_PCD_EP_Close+0x88>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fdc4 	bl	80051d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	460b      	mov	r3, r1
 8001668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	f003 0207 	and.w	r2, r3, #7
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2200      	movs	r2, #0
 8001698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6979      	ldr	r1, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 ff76 	bl	80055a8 <USB_EPStartXfer>
 80016bc:	e005      	b.n	80016ca <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6979      	ldr	r1, [r7, #20]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 ff6f 	bl	80055a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	f003 0207 	and.w	r2, r3, #7
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	460b      	mov	r3, r1
 8001710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2201      	movs	r2, #1
 800174c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	b2da      	uxtb	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800175a:	7afb      	ldrb	r3, [r7, #11]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6979      	ldr	r1, [r7, #20]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 ff1c 	bl	80055a8 <USB_EPStartXfer>
 8001770:	e005      	b.n	800177e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 ff15 	bl	80055a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0207 	and.w	r2, r3, #7
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d901      	bls.n	80017a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e04c      	b.n	8001840 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da0e      	bge.n	80017cc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2201      	movs	r2, #1
 80017c8:	705a      	strb	r2, [r3, #1]
 80017ca:	e00c      	b.n	80017e6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_PCD_EP_SetStall+0x7e>
 8001802:	2302      	movs	r3, #2
 8001804:	e01c      	b.n	8001840 <HAL_PCD_EP_SetStall+0xb8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68f9      	ldr	r1, [r7, #12]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 ffe7 	bl	80067e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f005 f90c 	bl	8006a4e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 020f 	and.w	r2, r3, #15
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	429a      	cmp	r2, r3
 8001860:	d901      	bls.n	8001866 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e040      	b.n	80018e8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	da0e      	bge.n	800188c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	705a      	strb	r2, [r3, #1]
 800188a:	e00e      	b.n	80018aa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_EP_ClrStall+0x82>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00e      	b.n	80018e8 <HAL_PCD_EP_ClrStall+0xa0>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 ffd5 	bl	8006888 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_PCD_EP_Flush+0x1a>
 8001906:	2302      	movs	r3, #2
 8001908:	e01b      	b.n	8001942 <HAL_PCD_EP_Flush+0x52>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da09      	bge.n	800192e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f003 f8d2 	bl	8004ad0 <USB_FlushTxFifo>
 800192c:	e004      	b.n	8001938 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f8d7 	bl	8004ae6 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b08e      	sub	sp, #56	; 0x38
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001952:	e2df      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800195e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800196a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 8158 	bne.w	8001c24 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d152      	bne.n	8001a24 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800198a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198e:	81fb      	strh	r3, [r7, #14]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800199a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800199e:	b29b      	uxth	r3, r3
 80019a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3328      	adds	r3, #40	; 0x28
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	3302      	adds	r3, #2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	441a      	add	r2, r3
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f007 fd7c 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 828e 	beq.w	8001f14 <PCD_EP_ISR_Handler+0x5ca>
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 8289 	bne.w	8001f14 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a22:	e277      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d034      	beq.n	8001aa8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	3306      	adds	r3, #6
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f005 f835 	bl	8006aec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a8e:	4013      	ands	r3, r2
 8001a90:	823b      	strh	r3, [r7, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	8a3a      	ldrh	r2, [r7, #16]
 8001a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f007 fcf1 	bl	8009488 <HAL_PCD_SetupStageCallback>
 8001aa6:	e235      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f280 8231 	bge.w	8001f14 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001abe:	4013      	ands	r3, r2
 8001ac0:	83bb      	strh	r3, [r7, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	8bba      	ldrh	r2, [r7, #28]
 8001ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001acc:	b292      	uxth	r2, r2
 8001ace:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3306      	adds	r3, #6
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d019      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x1ee>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	6959      	ldr	r1, [r3, #20]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f004 ffe5 	bl	8006aec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	441a      	add	r2, r3
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f007 fcba 	bl	80094ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d112      	bne.n	8001b86 <PCD_EP_ISR_Handler+0x23c>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	e02f      	b.n	8001be6 <PCD_EP_ISR_Handler+0x29c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b8c:	d813      	bhi.n	8001bb6 <PCD_EP_ISR_Handler+0x26c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <PCD_EP_ISR_Handler+0x25e>
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	029b      	lsls	r3, r3, #10
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	801a      	strh	r2, [r3, #0]
 8001bb4:	e017      	b.n	8001be6 <PCD_EP_ISR_Handler+0x29c>
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <PCD_EP_ISR_Handler+0x286>
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf6:	827b      	strh	r3, [r7, #18]
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bfe:	827b      	strh	r3, [r7, #18]
 8001c00:	8a7b      	ldrh	r3, [r7, #18]
 8001c02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c06:	827b      	strh	r3, [r7, #18]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	8a7b      	ldrh	r3, [r7, #18]
 8001c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	8013      	strh	r3, [r2, #0]
 8001c22:	e177      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c36:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f280 80ea 	bge.w	8001e14 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c56:	4013      	ands	r3, r2
 8001c58:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	7b1b      	ldrb	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d122      	bne.n	8001cd6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3306      	adds	r3, #6
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001cba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8087 	beq.w	8001dd0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	6959      	ldr	r1, [r3, #20]
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	88da      	ldrh	r2, [r3, #6]
 8001cce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd0:	f004 ff0c 	bl	8006aec <USB_ReadPMA>
 8001cd4:	e07c      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	78db      	ldrb	r3, [r3, #3]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d108      	bne.n	8001cf0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001cde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f923 	bl	8001f30 <HAL_PCD_EP_DB_Receive>
 8001cea:	4603      	mov	r3, r0
 8001cec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001cee:	e06f      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d021      	beq.n	8001d8e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d02a      	beq.n	8001dd0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	6959      	ldr	r1, [r3, #20]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	891a      	ldrh	r2, [r3, #8]
 8001d86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d88:	f004 feb0 	bl	8006aec <USB_ReadPMA>
 8001d8c:	e020      	b.n	8001dd0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	3306      	adds	r3, #6
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	6959      	ldr	r1, [r3, #20]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	895a      	ldrh	r2, [r3, #10]
 8001dca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dcc:	f004 fe8e 	bl	8006aec <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dd6:	441a      	add	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001de2:	441a      	add	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <PCD_EP_ISR_Handler+0x4b0>
 8001df0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d206      	bcs.n	8001e08 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f007 fb53 	bl	80094ac <HAL_PCD_DataOutStageCallback>
 8001e06:	e005      	b.n	8001e14 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fbca 	bl	80055a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d07a      	beq.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4c:	843b      	strh	r3, [r7, #32]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	8c3b      	ldrh	r3, [r7, #32]
 8001e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	78db      	ldrb	r3, [r3, #3]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d108      	bne.n	8001e84 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d146      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d141      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eac:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d906      	bls.n	8001ec6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	8bfb      	ldrh	r3, [r7, #30]
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	619a      	str	r2, [r3, #24]
 8001ec4:	e002      	b.n	8001ecc <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 fb01 	bl	80094e2 <HAL_PCD_DataInStageCallback>
 8001ee0:	e018      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	8bfb      	ldrh	r3, [r7, #30]
 8001ee8:	441a      	add	r2, r3
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	441a      	add	r2, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fb51 	bl	80055a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f06:	e005      	b.n	8001f14 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f91b 	bl	800214a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f6ff ad17 	blt.w	8001954 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3738      	adds	r7, #56	; 0x38
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d07e      	beq.n	8002046 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d306      	bcc.n	8001f8a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	8b7b      	ldrh	r3, [r7, #26]
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	619a      	str	r2, [r3, #24]
 8001f88:	e002      	b.n	8001f90 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	833b      	strh	r3, [r7, #24]
 8001fb4:	8b3b      	ldrh	r3, [r7, #24]
 8001fb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001fba:	833b      	strh	r3, [r7, #24]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	441a      	add	r2, r3
 8001fca:	8b3b      	ldrh	r3, [r7, #24]
 8001fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01f      	beq.n	800202a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	82fb      	strh	r3, [r7, #22]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	441a      	add	r2, r3
 8002014:	8afb      	ldrh	r3, [r7, #22]
 8002016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002026:	b29b      	uxth	r3, r3
 8002028:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800202a:	8b7b      	ldrh	r3, [r7, #26]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8087 	beq.w	8002140 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	891a      	ldrh	r2, [r3, #8]
 800203e:	8b7b      	ldrh	r3, [r7, #26]
 8002040:	f004 fd54 	bl	8006aec <USB_ReadPMA>
 8002044:	e07c      	b.n	8002140 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	3306      	adds	r3, #6
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	8b7b      	ldrh	r3, [r7, #26]
 8002076:	429a      	cmp	r2, r3
 8002078:	d306      	bcc.n	8002088 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	8b7b      	ldrh	r3, [r7, #26]
 8002080:	1ad2      	subs	r2, r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	619a      	str	r2, [r3, #24]
 8002086:	e002      	b.n	800208e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d123      	bne.n	80020de <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b0:	83fb      	strh	r3, [r7, #30]
 80020b2:	8bfb      	ldrh	r3, [r7, #30]
 80020b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	8bfb      	ldrh	r3, [r7, #30]
 80020ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11f      	bne.n	8002128 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	83bb      	strh	r3, [r7, #28]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	441a      	add	r2, r3
 8002112:	8bbb      	ldrh	r3, [r7, #28]
 8002114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800211c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002124:	b29b      	uxth	r3, r3
 8002126:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6959      	ldr	r1, [r3, #20]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	895a      	ldrh	r2, [r3, #10]
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	f004 fcd6 	bl	8006aec <USB_ReadPMA>
    }
  }

  return count;
 8002140:	8b7b      	ldrh	r3, [r7, #26]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b092      	sub	sp, #72	; 0x48
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8132 	beq.w	80023c8 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	3302      	adds	r3, #2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002194:	429a      	cmp	r2, r3
 8002196:	d906      	bls.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800219e:	1ad2      	subs	r2, r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	619a      	str	r2, [r3, #24]
 80021a4:	e002      	b.n	80021ac <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12c      	bne.n	800220e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f007 f991 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 822f 	beq.w	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	827b      	strh	r3, [r7, #18]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	441a      	add	r2, r3
 80021f6:	8a7b      	ldrh	r3, [r7, #18]
 80021f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002208:	b29b      	uxth	r3, r3
 800220a:	8013      	strh	r3, [r2, #0]
 800220c:	e20d      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01f      	beq.n	8002258 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 81e3 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800226a:	441a      	add	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002276:	441a      	add	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d309      	bcc.n	800229c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	6a1a      	ldr	r2, [r3, #32]
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	1ad2      	subs	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	621a      	str	r2, [r3, #32]
 800229a:	e014      	b.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80022a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022b0:	e009      	b.n	80022c6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2200      	movs	r2, #0
 80022c4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d155      	bne.n	800237a <HAL_PCD_EP_DB_Transmit+0x230>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022dc:	b29b      	uxth	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4413      	add	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	011a      	lsls	r2, r3, #4
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4413      	add	r3, r2
 80022f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002306:	b29a      	uxth	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	801a      	strh	r2, [r3, #0]
 8002320:	e047      	b.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x268>
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2b3e      	cmp	r3, #62	; 0x3e
 8002326:	d811      	bhi.n	800234c <HAL_PCD_EP_DB_Transmit+0x202>
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	3301      	adds	r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	b29b      	uxth	r3, r3
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e032      	b.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x268>
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_PCD_EP_DB_Transmit+0x218>
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	3b01      	subs	r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	b29b      	uxth	r3, r3
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	b29b      	uxth	r3, r3
 800236a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	e01b      	b.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x268>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d117      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x268>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002390:	b29b      	uxth	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	4413      	add	r3, r2
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	011a      	lsls	r2, r3, #4
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	4413      	add	r3, r2
 80023a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6959      	ldr	r1, [r3, #20]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	891a      	ldrh	r2, [r3, #8]
 80023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f004 fb4f 	bl	8006a64 <USB_WritePMA>
 80023c6:	e130      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3306      	adds	r3, #6
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d306      	bcc.n	800240a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	619a      	str	r2, [r3, #24]
 8002408:	e002      	b.n	8002410 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d12c      	bne.n	8002472 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f007 f85f 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 80fd 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	441a      	add	r2, r3
 800245a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800245c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246c:	b29b      	uxth	r3, r3
 800246e:	8013      	strh	r3, [r2, #0]
 8002470:	e0db      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11f      	bne.n	80024bc <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	441a      	add	r2, r3
 80024a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80024a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 80b1 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ce:	441a      	add	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024da:	441a      	add	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d309      	bcc.n	8002500 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	621a      	str	r2, [r3, #32]
 80024fe:	e014      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002508:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002514:	e009      	b.n	800252a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	785b      	ldrb	r3, [r3, #1]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d155      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	647b      	str	r3, [r7, #68]	; 0x44
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254c:	4413      	add	r3, r2
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	011a      	lsls	r2, r3, #4
 8002556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002558:	4413      	add	r3, r2
 800255a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800255e:	643b      	str	r3, [r7, #64]	; 0x40
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d112      	bne.n	800258c <HAL_PCD_EP_DB_Transmit+0x442>
 8002566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002570:	b29a      	uxth	r2, r3
 8002572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002584:	b29a      	uxth	r2, r3
 8002586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e044      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	2b3e      	cmp	r3, #62	; 0x3e
 8002590:	d811      	bhi.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x45e>
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	3301      	adds	r3, #1
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e02f      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x482>
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	3b01      	subs	r3, #1
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	029b      	lsls	r3, r3, #10
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e018      	b.n	8002616 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d114      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	4413      	add	r3, r2
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	011a      	lsls	r2, r3, #4
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	4413      	add	r3, r2
 8002608:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	b29a      	uxth	r2, r3
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	895a      	ldrh	r2, [r3, #10]
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	b29b      	uxth	r3, r3
 8002626:	f004 fa1d 	bl	8006a64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002644:	823b      	strh	r3, [r7, #16]
 8002646:	8a3b      	ldrh	r3, [r7, #16]
 8002648:	f083 0310 	eor.w	r3, r3, #16
 800264c:	823b      	strh	r3, [r7, #16]
 800264e:	8a3b      	ldrh	r3, [r7, #16]
 8002650:	f083 0320 	eor.w	r3, r3, #32
 8002654:	823b      	strh	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	8a3b      	ldrh	r3, [r7, #16]
 8002666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3748      	adds	r7, #72	; 0x48
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	4613      	mov	r3, r2
 8002694:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e009      	b.n	80026ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ba:	897a      	ldrh	r2, [r7, #10]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	80da      	strh	r2, [r3, #6]
 80026e2:	e00b      	b.n	80026fc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2201      	movs	r2, #1
 80026e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e26c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00c      	beq.n	800274e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d112      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d10b      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06c      	beq.n	8002834 <HAL_RCC_OscConfig+0x12c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d168      	bne.n	8002834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e246      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x76>
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7f      	ldr	r2, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x98>
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b78      	ldr	r3, [pc, #480]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a77      	ldr	r2, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xbc>
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a71      	ldr	r2, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a67      	ldr	r2, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fd ffec 	bl	80007c0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fd ffe8 	bl	80007c0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1fa      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xe4>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fd ffd8 	bl	80007c0 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fd ffd4 	bl	80007c0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1e6      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x10c>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1ba      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4939      	ldr	r1, [pc, #228]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fd ff8d 	bl	80007c0 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fd ff89 	bl	80007c0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e19b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4927      	ldr	r1, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fd ff6c 	bl	80007c0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fd ff68 	bl	80007c0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e17a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03a      	beq.n	800298c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fd ff4c 	bl	80007c0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fd ff48 	bl	80007c0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e15a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f000 fac8 	bl	8002ee0 <RCC_Delay>
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fd ff32 	bl	80007c0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295e:	e00f      	b.n	8002980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fd ff2e 	bl	80007c0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d908      	bls.n	8002980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e140      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	42420000 	.word	0x42420000
 800297c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b9e      	ldr	r3, [pc, #632]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e9      	bne.n	8002960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a6 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b97      	ldr	r3, [pc, #604]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a93      	ldr	r2, [pc, #588]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b91      	ldr	r3, [pc, #580]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b8e      	ldr	r3, [pc, #568]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a8a      	ldr	r2, [pc, #552]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7fd feef 	bl	80007c0 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fd feeb 	bl	80007c0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0fd      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x312>
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a7a      	ldr	r2, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	e02d      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x334>
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	e01c      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x356>
 8002a44:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a69      	ldr	r2, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a66      	ldr	r2, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fd fe9f 	bl	80007c0 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fd fe9b 	bl	80007c0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0ab      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x37e>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fd fe89 	bl	80007c0 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd fe85 	bl	80007c0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e095      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a47      	ldr	r2, [pc, #284]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8081 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d061      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d146      	bne.n	8002b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fd fe59 	bl	80007c0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fd fe55 	bl	80007c0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e067      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	4b35      	ldr	r3, [pc, #212]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	492d      	ldr	r1, [pc, #180]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a19      	ldr	r1, [r3, #32]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	4927      	ldr	r1, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fd fe29 	bl	80007c0 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fd fe25 	bl	80007c0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e037      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x46a>
 8002b90:	e02f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_RCC_OscConfig+0x4fc>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd fe12 	bl	80007c0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fd fe0e 	bl	80007c0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e020      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x498>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e013      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42420060 	.word	0x42420060

08002c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d0      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4965      	ldr	r1, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d040      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e073      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4936      	ldr	r1, [pc, #216]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fd fd62 	bl	80007c0 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fd fd5e 	bl	80007c0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e053      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d210      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0207 	bic.w	r2, r3, #7
 8002d3e:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fcc0 	bl	800073c <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08009a84 	.word	0x08009a84
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b490      	push	{r4, r7}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002de2:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de4:	1d3c      	adds	r4, r7, #4
 8002de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x40>
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x46>
 8002e1a:	e02d      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e1e:	623b      	str	r3, [r7, #32]
      break;
 8002e20:	e02d      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c5b      	lsrs	r3, r3, #17
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e4e:	4413      	add	r3, r2
 8002e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e5a:	fb02 f203 	mul.w	r2, r2, r3
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e004      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	623b      	str	r3, [r7, #32]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e7a:	623b      	str	r3, [r7, #32]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc90      	pop	{r4, r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	08009a2c 	.word	0x08009a2c
 8002e90:	08009a3c 	.word	0x08009a3c
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	003d0900 	.word	0x003d0900
 8002ea0:	007a1200 	.word	0x007a1200

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff2 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4a03      	ldr	r2, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08009a94 	.word	0x08009a94

08002ee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <RCC_Delay+0x34>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <RCC_Delay+0x38>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0a5b      	lsrs	r3, r3, #9
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002efc:	bf00      	nop
  }
  while (Delay --);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	60fa      	str	r2, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f9      	bne.n	8002efc <RCC_Delay+0x1c>
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
 8002f18:	10624dd3 	.word	0x10624dd3

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d07d      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	61d3      	str	r3, [r2, #28]
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d118      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f70:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a42      	ldr	r2, [pc, #264]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7c:	f7fd fc20 	bl	80007c0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fd fc1c 	bl	80007c0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e06d      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa2:	4b36      	ldr	r3, [pc, #216]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02e      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d027      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fd6:	4a29      	ldr	r2, [pc, #164]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d014      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fbeb 	bl	80007c0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	e00a      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fd fbe7 	bl	80007c0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e036      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ee      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003010:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4917      	ldr	r1, [pc, #92]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	4313      	orrs	r3, r2
 8003020:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	490b      	ldr	r1, [pc, #44]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
 8003084:	42420440 	.word	0x42420440

08003088 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fa77 	bl	80005a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2203      	movs	r2, #3
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f814 	bl	80030e8 <HAL_SD_InitCard>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00a      	b.n	80030e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003104:	2376      	movs	r3, #118	; 0x76
 8003106:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681d      	ldr	r5, [r3, #0]
 800310c:	466c      	mov	r4, sp
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003120:	4628      	mov	r0, r5
 8003122:	f000 ff4f 	bl	8003fc4 <SDIO_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800312c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e031      	b.n	800319c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_SD_InitCard+0xbc>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 ff84 	bl	8004050 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_SD_InitCard+0xbc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fe82 	bl	8003e58 <SD_PowerON>
 8003154:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e013      	b.n	800319c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fda2 	bl	8003cbe <SD_InitCard>
 800317a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bdb0      	pop	{r4, r5, r7, pc}
 80031a4:	423000a0 	.word	0x423000a0

080031a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b092      	sub	sp, #72	; 0x48
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80031b6:	f7fd fb03 	bl	80007c0 <HAL_GetTick>
 80031ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1d9      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 81cc 	bne.w	8003580 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80031ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	441a      	add	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d907      	bls.n	800320c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e1c0      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2203      	movs	r2, #3
 8003210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	2b01      	cmp	r3, #1
 8003222:	d002      	beq.n	800322a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	025b      	lsls	r3, r3, #9
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff9a 	bl	800416c <SDMMC_CmdBlockLength>
 8003238:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800323a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a9b      	ldr	r2, [pc, #620]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e196      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	025b      	lsls	r3, r3, #9
 800326a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800326c:	2390      	movs	r3, #144	; 0x90
 800326e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003278:	2301      	movs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f107 0214 	add.w	r2, r7, #20
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f000 ff45 	bl	8004116 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d90a      	bls.n	80032a8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ffa8 	bl	80041f4 <SDMMC_CmdReadMultiBlock>
 80032a4:	6478      	str	r0, [r7, #68]	; 0x44
 80032a6:	e009      	b.n	80032bc <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 ff7b 	bl	80041b0 <SDMMC_CmdReadSingleBlock>
 80032ba:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80032bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7b      	ldr	r2, [pc, #492]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e152      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032ec:	e061      	b.n	80033b2 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03c      	beq.n	8003376 <HAL_SD_ReadBlocks+0x1ce>
 80032fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d039      	beq.n	8003376 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003302:	2300      	movs	r3, #0
 8003304:	643b      	str	r3, [r7, #64]	; 0x40
 8003306:	e033      	b.n	8003370 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fe83 	bl	8004018 <SDIO_ReadFIFO>
 8003312:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	b2da      	uxtb	r2, r3
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	3301      	adds	r3, #1
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003324:	3b01      	subs	r3, #1
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b2da      	uxtb	r2, r3
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	3301      	adds	r3, #1
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333a:	3b01      	subs	r3, #1
 800333c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	b2da      	uxtb	r2, r3
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	3301      	adds	r3, #1
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	3b01      	subs	r3, #1
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	0e1b      	lsrs	r3, r3, #24
 8003358:	b2da      	uxtb	r2, r3
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	3301      	adds	r3, #1
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	3b01      	subs	r3, #1
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336c:	3301      	adds	r3, #1
 800336e:	643b      	str	r3, [r7, #64]	; 0x40
 8003370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003372:	2b07      	cmp	r3, #7
 8003374:	d9c8      	bls.n	8003308 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003376:	f7fd fa23 	bl	80007c0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003382:	429a      	cmp	r2, r3
 8003384:	d902      	bls.n	800338c <HAL_SD_ReadBlocks+0x1e4>
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	2b00      	cmp	r3, #0
 800338a:	d112      	bne.n	80033b2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0ed      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b8:	f240 332a 	movw	r3, #810	; 0x32a
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d095      	beq.n	80032ee <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d022      	beq.n	8003416 <HAL_SD_ReadBlocks+0x26e>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d91f      	bls.n	8003416 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d01b      	beq.n	8003416 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ff6c 	bl	80042c0 <SDMMC_CmdStopTransfer>
 80033e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80033ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0bb      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	f043 0208 	orr.w	r2, r3, #8
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0a1      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d012      	beq.n	800347e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e087      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d064      	beq.n	8003556 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_SD_ReadBlocks+0x30c>)
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06d      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
 80034b2:	bf00      	nop
 80034b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fdab 	bl	8004018 <SDIO_ReadFIFO>
 80034c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ce:	3301      	adds	r3, #1
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	3b01      	subs	r3, #1
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	3301      	adds	r3, #1
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	3b01      	subs	r3, #1
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	3301      	adds	r3, #1
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	3b01      	subs	r3, #1
 8003502:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	0e1b      	lsrs	r3, r3, #24
 8003508:	b2da      	uxtb	r2, r3
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	3301      	adds	r3, #1
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	3b01      	subs	r3, #1
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800351a:	f7fd f951 	bl	80007c0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003526:	429a      	cmp	r2, r3
 8003528:	d902      	bls.n	8003530 <HAL_SD_ReadBlocks+0x388>
 800352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d112      	bne.n	8003556 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <HAL_SD_ReadBlocks+0x3f0>)
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e01b      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_SD_ReadBlocks+0x3c2>
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1a6      	bne.n	80034b8 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003572:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e006      	b.n	800358e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3748      	adds	r7, #72	; 0x48
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	004005ff 	.word	0x004005ff

0800359c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b092      	sub	sp, #72	; 0x48
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80035aa:	f7fd f909 	bl	80007c0 <HAL_GetTick>
 80035ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e184      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 8177 	bne.w	80038ca <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	441a      	add	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d907      	bls.n	8003600 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e16b      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2203      	movs	r2, #3
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	2b01      	cmp	r3, #1
 8003616:	d002      	beq.n	800361e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	025b      	lsls	r3, r3, #9
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fda0 	bl	800416c <SDMMC_CmdBlockLength>
 800362c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800362e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00f      	beq.n	8003654 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a9d      	ldr	r2, [pc, #628]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e141      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	025b      	lsls	r3, r3, #9
 800365e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003660:	2390      	movs	r3, #144	; 0x90
 8003662:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800366c:	2301      	movs	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f107 0218 	add.w	r2, r7, #24
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd4b 	bl	8004116 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d90a      	bls.n	800369c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fdf2 	bl	800427c <SDMMC_CmdWriteMultiBlock>
 8003698:	6478      	str	r0, [r7, #68]	; 0x44
 800369a:	e009      	b.n	80036b0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2210      	movs	r2, #16
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fdc5 	bl	8004238 <SDMMC_CmdWriteSingleBlock>
 80036ae:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0fd      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80036e0:	e065      	b.n	80037ae <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d040      	beq.n	8003772 <HAL_SD_WriteBlocks+0x1d6>
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03d      	beq.n	8003772 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	643b      	str	r3, [r7, #64]	; 0x40
 80036fa:	e037      	b.n	800376c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	3301      	adds	r3, #1
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	3b01      	subs	r3, #1
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	3301      	adds	r3, #1
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	3b01      	subs	r3, #1
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	041a      	lsls	r2, r3, #16
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003734:	3301      	adds	r3, #1
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	3b01      	subs	r3, #1
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	061a      	lsls	r2, r3, #24
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	3301      	adds	r3, #1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003752:	3b01      	subs	r3, #1
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f107 0214 	add.w	r2, r7, #20
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fc65 	bl	8004030 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003768:	3301      	adds	r3, #1
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	2b07      	cmp	r3, #7
 8003770:	d9c4      	bls.n	80036fc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003772:	f7fd f825 	bl	80007c0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <HAL_SD_WriteBlocks+0x1ec>
 8003782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003784:	2b00      	cmp	r3, #0
 8003786:	d112      	bne.n	80037ae <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a48      	ldr	r2, [pc, #288]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e094      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b4:	f240 331a 	movw	r3, #794	; 0x31a
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d091      	beq.n	80036e2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d022      	beq.n	8003812 <HAL_SD_WriteBlocks+0x276>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d91f      	bls.n	8003812 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d01b      	beq.n	8003812 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd6e 	bl	80042c0 <SDMMC_CmdStopTransfer>
 80037e4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e062      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	f043 0208 	orr.w	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e048      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d012      	beq.n	800387a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02e      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <HAL_SD_WriteBlocks+0x314>)
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	f043 0210 	orr.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e014      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
 80038ae:	bf00      	nop
 80038b0:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e006      	b.n	80038d8 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3748      	adds	r7, #72	; 0x48
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ee:	0f9b      	lsrs	r3, r3, #30
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fa:	0e9b      	lsrs	r3, r3, #26
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	b2da      	uxtb	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390c:	0e1b      	lsrs	r3, r3, #24
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	b2da      	uxtb	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	b2da      	uxtb	r2, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	b2da      	uxtb	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003936:	b2da      	uxtb	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003940:	0d1b      	lsrs	r3, r3, #20
 8003942:	b29a      	uxth	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395e:	0bdb      	lsrs	r3, r3, #15
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003970:	0b9b      	lsrs	r3, r3, #14
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003994:	0b1b      	lsrs	r3, r3, #12
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d163      	bne.n	8003a78 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80039c0:	0f92      	lsrs	r2, r2, #30
 80039c2:	431a      	orrs	r2, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039cc:	0edb      	lsrs	r3, r3, #27
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039de:	0e1b      	lsrs	r3, r3, #24
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f0:	0d5b      	lsrs	r3, r3, #21
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a02:	0c9b      	lsrs	r3, r3, #18
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a14:	0bdb      	lsrs	r3, r3, #15
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	7e1b      	ldrb	r3, [r3, #24]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	3302      	adds	r3, #2
 8003a38:	2201      	movs	r2, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a42:	fb02 f203 	mul.w	r2, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	7a1b      	ldrb	r3, [r3, #8]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a64:	0a52      	lsrs	r2, r2, #9
 8003a66:	fb02 f203 	mul.w	r2, r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
 8003a76:	e031      	b.n	8003adc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d11d      	bne.n	8003abc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	029a      	lsls	r2, r3, #10
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	661a      	str	r2, [r3, #96]	; 0x60
 8003aba:	e00f      	b.n	8003adc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <HAL_SD_GetCardCSD+0x344>)
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e09d      	b.n	8003c18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae0:	0b9b      	lsrs	r3, r3, #14
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af2:	09db      	lsrs	r3, r3, #7
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	0fdb      	lsrs	r3, r3, #31
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	0f5b      	lsrs	r3, r3, #29
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	0d9b      	lsrs	r3, r3, #22
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	0d5b      	lsrs	r3, r3, #21
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	0bdb      	lsrs	r3, r3, #15
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	0b9b      	lsrs	r3, r3, #14
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	0b1b      	lsrs	r3, r3, #12
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	004005ff 	.word	0x004005ff

08003c28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f96f 	bl	8003f74 <SD_SendStatus>
 8003c96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003cb4:	693b      	ldr	r3, [r7, #16]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003cbe:	b5b0      	push	{r4, r5, r7, lr}
 8003cc0:	b094      	sub	sp, #80	; 0x50
 8003cc2:	af04      	add	r7, sp, #16
 8003cc4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f9cd 	bl	800406e <SDIO_GetPowerState>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cde:	e0b7      	b.n	8003e50 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d02f      	beq.n	8003d48 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fbae 	bl	800444e <SDMMC_CmdSendCID>
 8003cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <SD_InitCard+0x40>
    {
      return errorstate;
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	e0a8      	b.n	8003e50 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f9f4 	bl	80040f2 <SDIO_GetResponse>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2104      	movs	r1, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f9eb 	bl	80040f2 <SDIO_GetResponse>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2108      	movs	r1, #8
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f9e2 	bl	80040f2 <SDIO_GetResponse>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	210c      	movs	r1, #12
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f9d9 	bl	80040f2 <SDIO_GetResponse>
 8003d40:	4602      	mov	r2, r0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d00d      	beq.n	8003d6c <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f107 020e 	add.w	r2, r7, #14
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fbb4 	bl	80044c8 <SDMMC_CmdSetRelAdd>
 8003d60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <SD_InitCard+0xae>
    {
      return errorstate;
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	e071      	b.n	8003e50 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d036      	beq.n	8003de2 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f000 fb7e 	bl	800448a <SDMMC_CmdSendCSD>
 8003d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <SD_InitCard+0xdc>
    {
      return errorstate;
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	e05a      	b.n	8003e50 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f9a6 	bl	80040f2 <SDIO_GetResponse>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2104      	movs	r1, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f99d 	bl	80040f2 <SDIO_GetResponse>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f994 	bl	80040f2 <SDIO_GetResponse>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	210c      	movs	r1, #12
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f98b 	bl	80040f2 <SDIO_GetResponse>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2104      	movs	r1, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f982 	bl	80040f2 <SDIO_GetResponse>
 8003dee:	4603      	mov	r3, r0
 8003df0:	0d1a      	lsrs	r2, r3, #20
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003df6:	f107 0310 	add.w	r3, r7, #16
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff fd6f 	bl	80038e0 <HAL_SD_GetCardCSD>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e0c:	e020      	b.n	8003e50 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	4608      	mov	r0, r1
 8003e22:	f000 fa6f 	bl	8004304 <SDMMC_CmdSelDesel>
 8003e26:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <SD_InitCard+0x174>
  {
    return errorstate;
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	e00e      	b.n	8003e50 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681d      	ldr	r5, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	466c      	mov	r4, sp
 8003e3a:	f103 0210 	add.w	r2, r3, #16
 8003e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e44:	3304      	adds	r3, #4
 8003e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 f8bb 	bl	8003fc4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3740      	adds	r7, #64	; 0x40
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}

08003e58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fa6a 	bl	800434a <SDMMC_CmdGoIdleState>
 8003e76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	e072      	b.n	8003f68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa7d 	bl	8004386 <SDMMC_CmdOperCond>
 8003e8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fa53 	bl	800434a <SDMMC_CmdGoIdleState>
 8003ea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	e05b      	b.n	8003f68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d137      	bne.n	8003f2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fa7d 	bl	80043c4 <SDMMC_CmdAppCommand>
 8003eca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02d      	beq.n	8003f2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ed2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ed6:	e047      	b.n	8003f68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fa70 	bl	80043c4 <SDMMC_CmdAppCommand>
 8003ee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SD_PowerON+0x98>
    {
      return errorstate;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	e03b      	b.n	8003f68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	491e      	ldr	r1, [pc, #120]	; (8003f70 <SD_PowerON+0x118>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fa86 	bl	8004408 <SDMMC_CmdAppOperCommand>
 8003efc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f08:	e02e      	b.n	8003f68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f8ee 	bl	80040f2 <SDIO_GetResponse>
 8003f16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	0fdb      	lsrs	r3, r3, #31
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <SD_PowerON+0xcc>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <SD_PowerON+0xce>
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]

    count++;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d802      	bhi.n	8003f3e <SD_PowerON+0xe6>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0cc      	beq.n	8003ed8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d902      	bls.n	8003f4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f4c:	e00c      	b.n	8003f68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f5e:	e002      	b.n	8003f66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	c1100000 	.word	0xc1100000

08003f74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f88:	e018      	b.n	8003fbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f000 fab7 	bl	800450a <SDMMC_CmdSendStatus>
 8003f9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	e009      	b.n	8003fbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f89f 	bl	80040f2 <SDIO_GetResponse>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	f107 001c 	add.w	r0, r7, #28
 8003fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003fda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003fde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003fe2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003fe6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003fea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003fee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003ffe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	b004      	add	sp, #16
 8004016:	4770      	bx	lr

08004018 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2203      	movs	r2, #3
 800405c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800405e:	2002      	movs	r0, #2
 8004060:	f7fc fbb8 	bl	80007d4 <HAL_Delay>
  
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0303 	and.w	r3, r3, #3
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80040ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80040b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80040c2:	f023 030f 	bic.w	r3, r3, #15
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	b2db      	uxtb	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b085      	sub	sp, #20
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3314      	adds	r3, #20
 8004100:	461a      	mov	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4413      	add	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
}  
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800413c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004142:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004148:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004160:	2300      	movs	r3, #0

}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800417a:	2310      	movs	r3, #16
 800417c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004182:	2300      	movs	r3, #0
 8004184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800418c:	f107 0308 	add.w	r3, r7, #8
 8004190:	4619      	mov	r1, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff78 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	2110      	movs	r1, #16
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9fe 	bl	80045a0 <SDMMC_GetCmdResp1>
 80041a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041a6:	69fb      	ldr	r3, [r7, #28]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80041be:	2311      	movs	r3, #17
 80041c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041c2:	2340      	movs	r3, #64	; 0x40
 80041c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff56 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	2111      	movs	r1, #17
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9dc 	bl	80045a0 <SDMMC_GetCmdResp1>
 80041e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041ea:	69fb      	ldr	r3, [r7, #28]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004202:	2312      	movs	r3, #18
 8004204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800420e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff34 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	2112      	movs	r1, #18
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9ba 	bl	80045a0 <SDMMC_GetCmdResp1>
 800422c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800422e:	69fb      	ldr	r3, [r7, #28]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004246:	2318      	movs	r3, #24
 8004248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800424a:	2340      	movs	r3, #64	; 0x40
 800424c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ff12 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	2118      	movs	r1, #24
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f998 	bl	80045a0 <SDMMC_GetCmdResp1>
 8004270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004272:	69fb      	ldr	r3, [r7, #28]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800428a:	2319      	movs	r3, #25
 800428c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fef0 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	2119      	movs	r1, #25
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f976 	bl	80045a0 <SDMMC_GetCmdResp1>
 80042b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042b6:	69fb      	ldr	r3, [r7, #28]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80042cc:	230c      	movs	r3, #12
 80042ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fecf 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80042ea:	4a05      	ldr	r2, [pc, #20]	; (8004300 <SDMMC_CmdStopTransfer+0x40>)
 80042ec:	210c      	movs	r1, #12
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f956 	bl	80045a0 <SDMMC_GetCmdResp1>
 80042f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042f6:	69fb      	ldr	r3, [r7, #28]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	05f5e100 	.word	0x05f5e100

08004304 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004314:	2307      	movs	r3, #7
 8004316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004318:	2340      	movs	r3, #64	; 0x40
 800431a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004324:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	4619      	mov	r1, r3
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7ff feab 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004332:	f241 3288 	movw	r2, #5000	; 0x1388
 8004336:	2107      	movs	r1, #7
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f931 	bl	80045a0 <SDMMC_GetCmdResp1>
 800433e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004342:	4618      	mov	r0, r3
 8004344:	3728      	adds	r7, #40	; 0x28
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b088      	sub	sp, #32
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe8a 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f8eb 	bl	8004550 <SDMMC_GetCmdError>
 800437a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800437c:	69fb      	ldr	r3, [r7, #28]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b088      	sub	sp, #32
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800438e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004394:	2308      	movs	r3, #8
 8004396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004398:	2340      	movs	r3, #64	; 0x40
 800439a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043a6:	f107 0308 	add.w	r3, r7, #8
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fe6b 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fad4 	bl	8004960 <SDMMC_GetCmdResp7>
 80043b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043ba:	69fb      	ldr	r3, [r7, #28]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80043d2:	2337      	movs	r3, #55	; 0x37
 80043d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043e4:	f107 0308 	add.w	r3, r7, #8
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fe4c 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	2137      	movs	r1, #55	; 0x37
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8d2 	bl	80045a0 <SDMMC_GetCmdResp1>
 80043fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043fe:	69fb      	ldr	r3, [r7, #28]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800441e:	2329      	movs	r3, #41	; 0x29
 8004420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800442a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fe26 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f9e1 	bl	8004804 <SDMMC_GetCmdResp3>
 8004442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004444:	69fb      	ldr	r3, [r7, #28]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3720      	adds	r7, #32
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800445a:	2302      	movs	r3, #2
 800445c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800445e:	23c0      	movs	r3, #192	; 0xc0
 8004460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800446a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800446c:	f107 0308 	add.w	r3, r7, #8
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fe08 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f97d 	bl	8004778 <SDMMC_GetCmdResp2>
 800447e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004480:	69fb      	ldr	r3, [r7, #28]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b088      	sub	sp, #32
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004498:	2309      	movs	r3, #9
 800449a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800449c:	23c0      	movs	r3, #192	; 0xc0
 800449e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fde9 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f95e 	bl	8004778 <SDMMC_GetCmdResp2>
 80044bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044be:	69fb      	ldr	r3, [r7, #28]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80044d6:	2303      	movs	r3, #3
 80044d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044e8:	f107 0308 	add.w	r3, r7, #8
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fdca 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	2103      	movs	r1, #3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f9bd 	bl	8004878 <SDMMC_GetCmdResp6>
 80044fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004500:	69fb      	ldr	r3, [r7, #28]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b088      	sub	sp, #32
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004518:	230d      	movs	r3, #13
 800451a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800451c:	2340      	movs	r3, #64	; 0x40
 800451e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fda9 	bl	8004088 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	210d      	movs	r1, #13
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f82f 	bl	80045a0 <SDMMC_GetCmdResp1>
 8004542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004544:	69fb      	ldr	r3, [r7, #28]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004550:	b490      	push	{r4, r7}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <SDMMC_GetCmdError+0x48>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0f      	ldr	r2, [pc, #60]	; (800459c <SDMMC_GetCmdError+0x4c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a5b      	lsrs	r3, r3, #9
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800456c:	4623      	mov	r3, r4
 800456e:	1e5c      	subs	r4, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004578:	e009      	b.n	800458e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f2      	beq.n	800456c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	22c5      	movs	r2, #197	; 0xc5
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bc90      	pop	{r4, r7}
 8004596:	4770      	bx	lr
 8004598:	20000000 	.word	0x20000000
 800459c:	10624dd3 	.word	0x10624dd3

080045a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	460b      	mov	r3, r1
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80045ae:	4b6f      	ldr	r3, [pc, #444]	; (800476c <SDMMC_GetCmdResp1+0x1cc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6f      	ldr	r2, [pc, #444]	; (8004770 <SDMMC_GetCmdResp1+0x1d0>)
 80045b4:	fba2 2303 	umull	r2, r3, r2, r3
 80045b8:	0a5b      	lsrs	r3, r3, #9
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80045c0:	4623      	mov	r3, r4
 80045c2:	1e5c      	subs	r4, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045cc:	e0c9      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <SDMMC_GetCmdResp1+0x20>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1eb      	bne.n	80045c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2204      	movs	r2, #4
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045fa:	2304      	movs	r3, #4
 80045fc:	e0b1      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004610:	2301      	movs	r3, #1
 8004612:	e0a6      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	22c5      	movs	r2, #197	; 0xc5
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff fd5d 	bl	80040da <SDIO_GetCommandResponse>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	4293      	cmp	r3, r2
 8004628:	d001      	beq.n	800462e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800462a:	2301      	movs	r3, #1
 800462c:	e099      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800462e:	2100      	movs	r1, #0
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fd5e 	bl	80040f2 <SDIO_GetResponse>
 8004636:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <SDMMC_GetCmdResp1+0x1d4>)
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004642:	2300      	movs	r3, #0
 8004644:	e08d      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	da02      	bge.n	8004652 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800464c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004650:	e087      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800465c:	2340      	movs	r3, #64	; 0x40
 800465e:	e080      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	e079      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800467c:	e071      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800468c:	e069      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469c:	e061      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80046a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046ac:	e059      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d002      	beq.n	80046be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80046b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046bc:	e051      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80046c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046cc:	e049      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80046d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046dc:	e041      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80046e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ec:	e039      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80046f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046fc:	e031      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800470c:	e029      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004718:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800471c:	e021      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800472c:	e019      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004738:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800473c:	e011      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800474c:	e009      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004758:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800475c:	e001      	b.n	8004762 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800475e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	20000000 	.word	0x20000000
 8004770:	10624dd3 	.word	0x10624dd3
 8004774:	fdffe008 	.word	0xfdffe008

08004778 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004778:	b490      	push	{r4, r7}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <SDMMC_GetCmdResp2+0x84>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <SDMMC_GetCmdResp2+0x88>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0a5b      	lsrs	r3, r3, #9
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004794:	4623      	mov	r3, r4
 8004796:	1e5c      	subs	r4, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800479c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047a0:	e026      	b.n	80047f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <SDMMC_GetCmdResp2+0x1c>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1eb      	bne.n	8004794 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d004      	beq.n	80047d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2204      	movs	r2, #4
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047ce:	2304      	movs	r3, #4
 80047d0:	e00e      	b.n	80047f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e003      	b.n	80047f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	22c5      	movs	r2, #197	; 0xc5
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc90      	pop	{r4, r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000000 	.word	0x20000000
 8004800:	10624dd3 	.word	0x10624dd3

08004804 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004804:	b490      	push	{r4, r7}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <SDMMC_GetCmdResp3+0x6c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <SDMMC_GetCmdResp3+0x70>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0a5b      	lsrs	r3, r3, #9
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004820:	4623      	mov	r3, r4
 8004822:	1e5c      	subs	r4, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800482c:	e01b      	b.n	8004866 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <SDMMC_GetCmdResp3+0x1c>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1eb      	bne.n	8004820 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2204      	movs	r2, #4
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800485a:	2304      	movs	r3, #4
 800485c:	e003      	b.n	8004866 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	22c5      	movs	r2, #197	; 0xc5
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bc90      	pop	{r4, r7}
 800486e:	4770      	bx	lr
 8004870:	20000000 	.word	0x20000000
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	460b      	mov	r3, r1
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004886:	4b34      	ldr	r3, [pc, #208]	; (8004958 <SDMMC_GetCmdResp6+0xe0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a34      	ldr	r2, [pc, #208]	; (800495c <SDMMC_GetCmdResp6+0xe4>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800489a:	4623      	mov	r3, r4
 800489c:	1e5c      	subs	r4, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048a6:	e052      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <SDMMC_GetCmdResp6+0x22>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1eb      	bne.n	800489a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2204      	movs	r2, #4
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048d4:	2304      	movs	r3, #4
 80048d6:	e03a      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e02f      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fbf3 	bl	80040da <SDIO_GetCommandResponse>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d001      	beq.n	8004902 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048fe:	2301      	movs	r3, #1
 8004900:	e025      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22c5      	movs	r2, #197	; 0xc5
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004908:	2100      	movs	r1, #0
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fbf1 	bl	80040f2 <SDIO_GetResponse>
 8004910:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004926:	2300      	movs	r3, #0
 8004928:	e011      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004938:	e009      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004948:	e001      	b.n	800494e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800494a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	bd90      	pop	{r4, r7, pc}
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3

08004960 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004960:	b490      	push	{r4, r7}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <SDMMC_GetCmdResp7+0x90>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <SDMMC_GetCmdResp7+0x94>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0a5b      	lsrs	r3, r3, #9
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800497c:	4623      	mov	r3, r4
 800497e:	1e5c      	subs	r4, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004988:	e02c      	b.n	80049e4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <SDMMC_GetCmdResp7+0x1c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1eb      	bne.n	800497c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d004      	beq.n	80049ba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2204      	movs	r2, #4
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049b6:	2304      	movs	r3, #4
 80049b8:	e014      	b.n	80049e4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e009      	b.n	80049e4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80049e2:	2300      	movs	r3, #0
  
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc90      	pop	{r4, r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000000 	.word	0x20000000
 80049f4:	10624dd3 	.word	0x10624dd3

080049f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049f8:	b084      	sub	sp, #16
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	f107 0014 	add.w	r0, r7, #20
 8004a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	b004      	add	sp, #16
 8004a16:	4770      	bx	lr

08004a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 0014 	add.w	r0, r7, #20
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	b004      	add	sp, #16
 8004ace:	4770      	bx	lr

08004ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
	...

08004afc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b09b      	sub	sp, #108	; 0x6c
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	78db      	ldrb	r3, [r3, #3]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d81f      	bhi.n	8004b6e <USB_ActivateEndpoint+0x72>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <USB_ActivateEndpoint+0x38>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b77 	.word	0x08004b77
 8004b40:	08004b53 	.word	0x08004b53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b50:	e012      	b.n	8004b78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b5e:	e00b      	b.n	8004b78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b6c:	e004      	b.n	8004b78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b74:	e000      	b.n	8004b78 <USB_ActivateEndpoint+0x7c>
      break;
 8004b76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	7b1b      	ldrb	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f040 8149 	bne.w	8004e7c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8084 	beq.w	8004cfc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4413      	add	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	011a      	lsls	r2, r3, #4
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	88db      	ldrh	r3, [r3, #6]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	81fb      	strh	r3, [r7, #14]
 8004c36:	89fb      	ldrh	r3, [r7, #14]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <USB_ActivateEndpoint+0x17c>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	81bb      	strh	r3, [r7, #12]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	89bb      	ldrh	r3, [r7, #12]
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	78db      	ldrb	r3, [r3, #3]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d020      	beq.n	8004cc2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	813b      	strh	r3, [r7, #8]
 8004c98:	893b      	ldrh	r3, [r7, #8]
 8004c9a:	f083 0320 	eor.w	r3, r3, #32
 8004c9e:	813b      	strh	r3, [r7, #8]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	893b      	ldrh	r3, [r7, #8]
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
 8004cc0:	e27f      	b.n	80051c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	817b      	strh	r3, [r7, #10]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	897b      	ldrh	r3, [r7, #10]
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]
 8004cfa:	e262      	b.n	80051c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	011a      	lsls	r2, r3, #4
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	88db      	ldrh	r3, [r3, #6]
 8004d24:	085b      	lsrs	r3, r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	4413      	add	r3, r2
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	011a      	lsls	r2, r3, #4
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d112      	bne.n	8004d82 <USB_ActivateEndpoint+0x286>
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e02f      	b.n	8004de2 <USB_ActivateEndpoint+0x2e6>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b3e      	cmp	r3, #62	; 0x3e
 8004d88:	d813      	bhi.n	8004db2 <USB_ActivateEndpoint+0x2b6>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	663b      	str	r3, [r7, #96]	; 0x60
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <USB_ActivateEndpoint+0x2a8>
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	3301      	adds	r3, #1
 8004da2:	663b      	str	r3, [r7, #96]	; 0x60
 8004da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	e017      	b.n	8004de2 <USB_ActivateEndpoint+0x2e6>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <USB_ActivateEndpoint+0x2d0>
 8004dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	663b      	str	r3, [r7, #96]	; 0x60
 8004dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	029b      	lsls	r3, r3, #10
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	83fb      	strh	r3, [r7, #30]
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <USB_ActivateEndpoint+0x336>
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	83bb      	strh	r3, [r7, #28]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8bbb      	ldrh	r3, [r7, #28]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	837b      	strh	r3, [r7, #26]
 8004e4a:	8b7b      	ldrh	r3, [r7, #26]
 8004e4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e50:	837b      	strh	r3, [r7, #26]
 8004e52:	8b7b      	ldrh	r3, [r7, #26]
 8004e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e58:	837b      	strh	r3, [r7, #26]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	8b7b      	ldrh	r3, [r7, #26]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]
 8004e7a:	e1a2      	b.n	80051c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec8:	4413      	add	r3, r2
 8004eca:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	891b      	ldrh	r3, [r3, #8]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efc:	4413      	add	r3, r2
 8004efe:	653b      	str	r3, [r7, #80]	; 0x50
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	011a      	lsls	r2, r3, #4
 8004f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	895b      	ldrh	r3, [r3, #10]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 8091 	bne.w	800504c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01b      	beq.n	8004f7a <USB_ActivateEndpoint+0x47e>
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <USB_ActivateEndpoint+0x4ce>
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fe2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fe4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fe8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005028:	867b      	strh	r3, [r7, #50]	; 0x32
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
 800504a:	e0ba      	b.n	80051c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800505c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <USB_ActivateEndpoint+0x5a8>
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800509c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01d      	beq.n	80050fc <USB_ActivateEndpoint+0x600>
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	78db      	ldrb	r3, [r3, #3]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d024      	beq.n	800514e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800511e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005122:	f083 0320 	eor.w	r3, r3, #32
 8005126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]
 800514c:	e01d      	b.n	800518a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	376c      	adds	r7, #108	; 0x6c
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b08d      	sub	sp, #52	; 0x34
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	7b1b      	ldrb	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 808e 	bne.w	8005300 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d044      	beq.n	8005276 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	81bb      	strh	r3, [r7, #12]
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <USB_DeactivateEndpoint+0x6c>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	817b      	strh	r3, [r7, #10]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	897b      	ldrh	r3, [r7, #10]
 8005228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005238:	b29b      	uxth	r3, r3
 800523a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005252:	813b      	strh	r3, [r7, #8]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	b29b      	uxth	r3, r3
 8005272:	8013      	strh	r3, [r2, #0]
 8005274:	e192      	b.n	800559c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	827b      	strh	r3, [r7, #18]
 8005284:	8a7b      	ldrh	r3, [r7, #18]
 8005286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01b      	beq.n	80052c6 <USB_DeactivateEndpoint+0xf6>
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	823b      	strh	r3, [r7, #16]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	8a3b      	ldrh	r3, [r7, #16]
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	81fb      	strh	r3, [r7, #14]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
 80052fe:	e14d      	b.n	800559c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 80a5 	bne.w	8005454 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	843b      	strh	r3, [r7, #32]
 8005318:	8c3b      	ldrh	r3, [r7, #32]
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01b      	beq.n	800535a <USB_DeactivateEndpoint+0x18a>
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	83fb      	strh	r3, [r7, #30]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	8bfb      	ldrh	r3, [r7, #30]
 8005346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	83bb      	strh	r3, [r7, #28]
 8005368:	8bbb      	ldrh	r3, [r7, #28]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01b      	beq.n	80053aa <USB_DeactivateEndpoint+0x1da>
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	837b      	strh	r3, [r7, #26]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	833b      	strh	r3, [r7, #24]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	8b3b      	ldrh	r3, [r7, #24]
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	82fb      	strh	r3, [r7, #22]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	8afb      	ldrh	r3, [r7, #22]
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005430:	82bb      	strh	r3, [r7, #20]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	8abb      	ldrh	r3, [r7, #20]
 800543e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544e:	b29b      	uxth	r3, r3
 8005450:	8013      	strh	r3, [r2, #0]
 8005452:	e0a3      	b.n	800559c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01b      	beq.n	80054a4 <USB_DeactivateEndpoint+0x2d4>
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800549c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01b      	beq.n	80054f4 <USB_DeactivateEndpoint+0x324>
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005542:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005560:	b29b      	uxth	r3, r3
 8005562:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557a:	847b      	strh	r3, [r7, #34]	; 0x22
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	441a      	add	r2, r3
 8005586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	b29b      	uxth	r3, r3
 800559a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3734      	adds	r7, #52	; 0x34
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b0c4      	sub	sp, #272	; 0x110
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	6018      	str	r0, [r3, #0]
 80055b2:	463b      	mov	r3, r7
 80055b4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 8557 	bne.w	8006070 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d905      	bls.n	80055de <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055d2:	463b      	mov	r3, r7
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055dc:	e004      	b.n	80055e8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055e8:	463b      	mov	r3, r7
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	7b1b      	ldrb	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d12c      	bne.n	800564c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6959      	ldr	r1, [r3, #20]
 80055f8:	463b      	mov	r3, r7
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	88da      	ldrh	r2, [r3, #6]
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005602:	b29b      	uxth	r3, r3
 8005604:	1d38      	adds	r0, r7, #4
 8005606:	6800      	ldr	r0, [r0, #0]
 8005608:	f001 fa2c 	bl	8006a64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	011a      	lsls	r2, r3, #4
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	b29a      	uxth	r2, r3
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	f000 bcdd 	b.w	8006006 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800564c:	463b      	mov	r3, r7
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	2b02      	cmp	r3, #2
 8005654:	f040 8347 	bne.w	8005ce6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1a      	ldr	r2, [r3, #32]
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	429a      	cmp	r2, r3
 8005666:	f240 82eb 	bls.w	8005c40 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005684:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056ae:	463b      	mov	r3, r7
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6a1a      	ldr	r2, [r3, #32]
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b8:	1ad2      	subs	r2, r2, r3
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8159 	beq.w	800598e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056dc:	1d3b      	adds	r3, r7, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d164      	bne.n	80057b6 <USB_EPStartXfer+0x20e>
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	4413      	add	r3, r2
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	4413      	add	r3, r2
 8005710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d112      	bne.n	8005744 <USB_EPStartXfer+0x19c>
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005728:	b29a      	uxth	r2, r3
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573c:	b29a      	uxth	r2, r3
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e054      	b.n	80057ee <USB_EPStartXfer+0x246>
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005748:	2b3e      	cmp	r3, #62	; 0x3e
 800574a:	d817      	bhi.n	800577c <USB_EPStartXfer+0x1d4>
 800574c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <USB_EPStartXfer+0x1c4>
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005766:	3301      	adds	r3, #1
 8005768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005770:	b29b      	uxth	r3, r3
 8005772:	029b      	lsls	r3, r3, #10
 8005774:	b29a      	uxth	r2, r3
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	e038      	b.n	80057ee <USB_EPStartXfer+0x246>
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <USB_EPStartXfer+0x1f4>
 8005792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005796:	3b01      	subs	r3, #1
 8005798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	029b      	lsls	r3, r3, #10
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e01b      	b.n	80057ee <USB_EPStartXfer+0x246>
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d116      	bne.n	80057ee <USB_EPStartXfer+0x246>
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	4413      	add	r3, r2
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	463b      	mov	r3, r7
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	011a      	lsls	r2, r3, #4
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	4413      	add	r3, r2
 80057de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
 80057e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	895b      	ldrh	r3, [r3, #10]
 80057f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6959      	ldr	r1, [r3, #20]
 80057fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005802:	b29b      	uxth	r3, r3
 8005804:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005808:	1d38      	adds	r0, r7, #4
 800580a:	6800      	ldr	r0, [r0, #0]
 800580c:	f001 f92a 	bl	8006a64 <USB_WritePMA>
            ep->xfer_buff += len;
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	441a      	add	r2, r3
 800581c:	463b      	mov	r3, r7
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d909      	bls.n	8005846 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005832:	463b      	mov	r3, r7
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a1a      	ldr	r2, [r3, #32]
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583c:	1ad2      	subs	r2, r2, r3
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	621a      	str	r2, [r3, #32]
 8005844:	e008      	b.n	8005858 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2200      	movs	r2, #0
 8005856:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d164      	bne.n	800592c <USB_EPStartXfer+0x384>
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	61fb      	str	r3, [r7, #28]
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d112      	bne.n	80058ba <USB_EPStartXfer+0x312>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800589e:	b29a      	uxth	r2, r3
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e057      	b.n	800596a <USB_EPStartXfer+0x3c2>
 80058ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058be:	2b3e      	cmp	r3, #62	; 0x3e
 80058c0:	d817      	bhi.n	80058f2 <USB_EPStartXfer+0x34a>
 80058c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <USB_EPStartXfer+0x33a>
 80058d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058dc:	3301      	adds	r3, #1
 80058de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	029b      	lsls	r3, r3, #10
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	e03b      	b.n	800596a <USB_EPStartXfer+0x3c2>
 80058f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USB_EPStartXfer+0x36a>
 8005908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800590c:	3b01      	subs	r3, #1
 800590e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005912:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005924:	b29a      	uxth	r2, r3
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e01e      	b.n	800596a <USB_EPStartXfer+0x3c2>
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d119      	bne.n	800596a <USB_EPStartXfer+0x3c2>
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	4413      	add	r3, r2
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	4413      	add	r3, r2
 800595a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800595e:	623b      	str	r3, [r7, #32]
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005964:	b29a      	uxth	r2, r3
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	891b      	ldrh	r3, [r3, #8]
 8005970:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6959      	ldr	r1, [r3, #20]
 800597a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597e:	b29b      	uxth	r3, r3
 8005980:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005984:	1d38      	adds	r0, r7, #4
 8005986:	6800      	ldr	r0, [r0, #0]
 8005988:	f001 f86c 	bl	8006a64 <USB_WritePMA>
 800598c:	e33b      	b.n	8006006 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d164      	bne.n	8005a62 <USB_EPStartXfer+0x4ba>
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	4413      	add	r3, r2
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	011a      	lsls	r2, r3, #4
 80059b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ba:	4413      	add	r3, r2
 80059bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d112      	bne.n	80059f0 <USB_EPStartXfer+0x448>
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e057      	b.n	8005aa0 <USB_EPStartXfer+0x4f8>
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	2b3e      	cmp	r3, #62	; 0x3e
 80059f6:	d817      	bhi.n	8005a28 <USB_EPStartXfer+0x480>
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <USB_EPStartXfer+0x470>
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a12:	3301      	adds	r3, #1
 8005a14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e03b      	b.n	8005aa0 <USB_EPStartXfer+0x4f8>
 8005a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <USB_EPStartXfer+0x4a0>
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	029b      	lsls	r3, r3, #10
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e01e      	b.n	8005aa0 <USB_EPStartXfer+0x4f8>
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d119      	bne.n	8005aa0 <USB_EPStartXfer+0x4f8>
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	657b      	str	r3, [r7, #84]	; 0x54
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a80:	4413      	add	r3, r2
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
 8005a84:	463b      	mov	r3, r7
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a94:	653b      	str	r3, [r7, #80]	; 0x50
 8005a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	891b      	ldrh	r3, [r3, #8]
 8005aa6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6959      	ldr	r1, [r3, #20]
 8005ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005aba:	1d38      	adds	r0, r7, #4
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f000 ffd1 	bl	8006a64 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005acc:	441a      	add	r2, r3
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d909      	bls.n	8005af8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	621a      	str	r2, [r3, #32]
 8005af6:	e008      	b.n	8005b0a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005af8:	463b      	mov	r3, r7
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005b02:	463b      	mov	r3, r7
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d164      	bne.n	8005be4 <USB_EPStartXfer+0x63c>
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	4413      	add	r3, r2
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d112      	bne.n	8005b72 <USB_EPStartXfer+0x5ca>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e054      	b.n	8005c1c <USB_EPStartXfer+0x674>
 8005b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b76:	2b3e      	cmp	r3, #62	; 0x3e
 8005b78:	d817      	bhi.n	8005baa <USB_EPStartXfer+0x602>
 8005b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0x5f2>
 8005b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b94:	3301      	adds	r3, #1
 8005b96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e038      	b.n	8005c1c <USB_EPStartXfer+0x674>
 8005baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <USB_EPStartXfer+0x622>
 8005bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e01b      	b.n	8005c1c <USB_EPStartXfer+0x674>
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d116      	bne.n	8005c1c <USB_EPStartXfer+0x674>
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfc:	4413      	add	r3, r2
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	011a      	lsls	r2, r3, #4
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c10:	643b      	str	r3, [r7, #64]	; 0x40
 8005c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	895b      	ldrh	r3, [r3, #10]
 8005c22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6959      	ldr	r1, [r3, #20]
 8005c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c36:	1d38      	adds	r0, r7, #4
 8005c38:	6800      	ldr	r0, [r0, #0]
 8005c3a:	f000 ff13 	bl	8006a64 <USB_WritePMA>
 8005c3e:	e1e2      	b.n	8006006 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c4a:	1d3b      	adds	r3, r7, #4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	663b      	str	r3, [r7, #96]	; 0x60
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ca2:	4413      	add	r3, r2
 8005ca4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	891b      	ldrh	r3, [r3, #8]
 8005cc8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005cdc:	1d38      	adds	r0, r7, #4
 8005cde:	6800      	ldr	r0, [r0, #0]
 8005ce0:	f000 fec0 	bl	8006a64 <USB_WritePMA>
 8005ce4:	e18f      	b.n	8006006 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 808f 	beq.w	8005e20 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d164      	bne.n	8005ddc <USB_EPStartXfer+0x834>
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d26:	4413      	add	r3, r2
 8005d28:	673b      	str	r3, [r7, #112]	; 0x70
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d34:	4413      	add	r3, r2
 8005d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d112      	bne.n	8005d6a <USB_EPStartXfer+0x7c2>
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	e054      	b.n	8005e14 <USB_EPStartXfer+0x86c>
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d70:	d817      	bhi.n	8005da2 <USB_EPStartXfer+0x7fa>
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <USB_EPStartXfer+0x7ea>
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e038      	b.n	8005e14 <USB_EPStartXfer+0x86c>
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <USB_EPStartXfer+0x81a>
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e01b      	b.n	8005e14 <USB_EPStartXfer+0x86c>
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d116      	bne.n	8005e14 <USB_EPStartXfer+0x86c>
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df4:	4413      	add	r3, r2
 8005df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e08:	677b      	str	r3, [r7, #116]	; 0x74
 8005e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	895b      	ldrh	r3, [r3, #10]
 8005e1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005e1e:	e097      	b.n	8005f50 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d168      	bne.n	8005efc <USB_EPStartXfer+0x954>
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e42:	4413      	add	r3, r2
 8005e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d112      	bne.n	8005e8a <USB_EPStartXfer+0x8e2>
 8005e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e05d      	b.n	8005f46 <USB_EPStartXfer+0x99e>
 8005e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e90:	d817      	bhi.n	8005ec2 <USB_EPStartXfer+0x91a>
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <USB_EPStartXfer+0x90a>
 8005ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eac:	3301      	adds	r3, #1
 8005eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	e041      	b.n	8005f46 <USB_EPStartXfer+0x99e>
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <USB_EPStartXfer+0x93a>
 8005ed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005edc:	3b01      	subs	r3, #1
 8005ede:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ee2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e024      	b.n	8005f46 <USB_EPStartXfer+0x99e>
 8005efc:	463b      	mov	r3, r7
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11f      	bne.n	8005f46 <USB_EPStartXfer+0x99e>
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f0e:	1d3b      	adds	r3, r7, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1e:	4413      	add	r3, r2
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	011a      	lsls	r2, r3, #4
 8005f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	891b      	ldrh	r3, [r3, #8]
 8005f4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005f60:	1d38      	adds	r0, r7, #4
 8005f62:	6800      	ldr	r0, [r0, #0]
 8005f64:	f000 fd7e 	bl	8006a64 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d122      	bne.n	8005fb8 <USB_EPStartXfer+0xa10>
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e026      	b.n	8006006 <USB_EPStartXfer+0xa5e>
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d121      	bne.n	8006006 <USB_EPStartXfer+0xa5e>
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	441a      	add	r2, r3
 8005fee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006006:	1d3b      	adds	r3, r7, #4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f107 020e 	add.w	r2, r7, #14
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006024:	8013      	strh	r3, [r2, #0]
 8006026:	f107 030e 	add.w	r3, r7, #14
 800602a:	f107 020e 	add.w	r2, r7, #14
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	f082 0210 	eor.w	r2, r2, #16
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	f107 030e 	add.w	r3, r7, #14
 800603a:	f107 020e 	add.w	r2, r7, #14
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	f082 0220 	eor.w	r2, r2, #32
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	f107 030e 	add.w	r3, r7, #14
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e3b5      	b.n	80067dc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006070:	463b      	mov	r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	7b1b      	ldrb	r3, [r3, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 8090 	bne.w	800619c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d90e      	bls.n	80060aa <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	463b      	mov	r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	619a      	str	r2, [r3, #24]
 80060a8:	e008      	b.n	80060bc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80060aa:	463b      	mov	r3, r7
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060d4:	4413      	add	r3, r2
 80060d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	011a      	lsls	r2, r3, #4
 80060e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d116      	bne.n	8006126 <USB_EPStartXfer+0xb7e>
 80060f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e32c      	b.n	8006780 <USB_EPStartXfer+0x11d8>
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612a:	2b3e      	cmp	r3, #62	; 0x3e
 800612c:	d818      	bhi.n	8006160 <USB_EPStartXfer+0xbb8>
 800612e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <USB_EPStartXfer+0xba6>
 8006144:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800614e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e30f      	b.n	8006780 <USB_EPStartXfer+0x11d8>
 8006160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800616a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <USB_EPStartXfer+0xbd8>
 8006176:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800617a:	3b01      	subs	r3, #1
 800617c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e2f1      	b.n	8006780 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	78db      	ldrb	r3, [r3, #3]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	f040 818f 	bne.w	80064c6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d175      	bne.n	800629e <USB_EPStartXfer+0xcf6>
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061dc:	4413      	add	r3, r2
 80061de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d116      	bne.n	800621e <USB_EPStartXfer+0xc76>
 80061f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e065      	b.n	80062ea <USB_EPStartXfer+0xd42>
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b3e      	cmp	r3, #62	; 0x3e
 8006226:	d81a      	bhi.n	800625e <USB_EPStartXfer+0xcb6>
 8006228:	463b      	mov	r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <USB_EPStartXfer+0xca4>
 8006242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006246:	3301      	adds	r3, #1
 8006248:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800624c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006250:	b29b      	uxth	r3, r3
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e045      	b.n	80062ea <USB_EPStartXfer+0xd42>
 800625e:	463b      	mov	r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <USB_EPStartXfer+0xcda>
 8006278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627c:	3b01      	subs	r3, #1
 800627e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006286:	b29b      	uxth	r3, r3
 8006288:	029b      	lsls	r3, r3, #10
 800628a:	b29b      	uxth	r3, r3
 800628c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800629a:	801a      	strh	r2, [r3, #0]
 800629c:	e025      	b.n	80062ea <USB_EPStartXfer+0xd42>
 800629e:	463b      	mov	r3, r7
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d120      	bne.n	80062ea <USB_EPStartXfer+0xd42>
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c0:	4413      	add	r3, r2
 80062c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	011a      	lsls	r2, r3, #4
 80062ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d175      	bne.n	80063e8 <USB_EPStartXfer+0xe40>
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800630c:	b29b      	uxth	r3, r3
 800630e:	461a      	mov	r2, r3
 8006310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006314:	4413      	add	r3, r2
 8006316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	011a      	lsls	r2, r3, #4
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006326:	4413      	add	r3, r2
 8006328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800632c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <USB_EPStartXfer+0xdc0>
 800633a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29b      	uxth	r3, r3
 8006356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e061      	b.n	800642c <USB_EPStartXfer+0xe84>
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d81a      	bhi.n	80063a8 <USB_EPStartXfer+0xe00>
 8006372:	463b      	mov	r3, r7
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <USB_EPStartXfer+0xdee>
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006390:	3301      	adds	r3, #1
 8006392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e041      	b.n	800642c <USB_EPStartXfer+0xe84>
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d104      	bne.n	80063cc <USB_EPStartXfer+0xe24>
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063de:	b29a      	uxth	r2, r3
 80063e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	e021      	b.n	800642c <USB_EPStartXfer+0xe84>
 80063e8:	463b      	mov	r3, r7
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d11c      	bne.n	800642c <USB_EPStartXfer+0xe84>
 80063f2:	1d3b      	adds	r3, r7, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006402:	4413      	add	r3, r2
 8006404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006408:	463b      	mov	r3, r7
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	011a      	lsls	r2, r3, #4
 8006410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006414:	4413      	add	r3, r2
 8006416:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800641a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800642a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 81a4 	beq.w	8006780 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800644c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <USB_EPStartXfer+0xebc>
 8006458:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10d      	bne.n	8006480 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006464:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8187 	bne.w	8006780 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006472:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 8180 	bne.w	8006780 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006480:	1d3b      	adds	r3, r7, #4
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	463b      	mov	r3, r7
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]
 80064c4:	e15c      	b.n	8006780 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064c6:	463b      	mov	r3, r7
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	78db      	ldrb	r3, [r3, #3]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f040 8155 	bne.w	800677c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90e      	bls.n	8006500 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	619a      	str	r2, [r3, #24]
 80064fe:	e008      	b.n	8006512 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800650a:	463b      	mov	r3, r7
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d16f      	bne.n	80065fc <USB_EPStartXfer+0x1054>
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006534:	4413      	add	r3, r2
 8006536:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	011a      	lsls	r2, r3, #4
 8006542:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006546:	4413      	add	r3, r2
 8006548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800654c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d116      	bne.n	8006586 <USB_EPStartXfer+0xfde>
 8006558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006564:	b29a      	uxth	r2, r3
 8006566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e05f      	b.n	8006646 <USB_EPStartXfer+0x109e>
 8006586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658a:	2b3e      	cmp	r3, #62	; 0x3e
 800658c:	d818      	bhi.n	80065c0 <USB_EPStartXfer+0x1018>
 800658e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <USB_EPStartXfer+0x1006>
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	3301      	adds	r3, #1
 80065aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e042      	b.n	8006646 <USB_EPStartXfer+0x109e>
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <USB_EPStartXfer+0x1038>
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065da:	3b01      	subs	r3, #1
 80065dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e024      	b.n	8006646 <USB_EPStartXfer+0x109e>
 80065fc:	463b      	mov	r3, r7
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d11f      	bne.n	8006646 <USB_EPStartXfer+0x109e>
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661e:	4413      	add	r3, r2
 8006620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	011a      	lsls	r2, r3, #4
 800662c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006630:	4413      	add	r3, r2
 8006632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800663a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d16f      	bne.n	8006738 <USB_EPStartXfer+0x1190>
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	011a      	lsls	r2, r3, #4
 800667e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006682:	4413      	add	r3, r2
 8006684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d116      	bne.n	80066c2 <USB_EPStartXfer+0x111a>
 8006694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066be:	801a      	strh	r2, [r3, #0]
 80066c0:	e05e      	b.n	8006780 <USB_EPStartXfer+0x11d8>
 80066c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c6:	2b3e      	cmp	r3, #62	; 0x3e
 80066c8:	d818      	bhi.n	80066fc <USB_EPStartXfer+0x1154>
 80066ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <USB_EPStartXfer+0x1142>
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	029b      	lsls	r3, r3, #10
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f8:	801a      	strh	r2, [r3, #0]
 80066fa:	e041      	b.n	8006780 <USB_EPStartXfer+0x11d8>
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <USB_EPStartXfer+0x1174>
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	3b01      	subs	r3, #1
 8006718:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	e023      	b.n	8006780 <USB_EPStartXfer+0x11d8>
 8006738:	463b      	mov	r3, r7
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d11e      	bne.n	8006780 <USB_EPStartXfer+0x11d8>
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006764:	4413      	add	r3, r2
 8006766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800676a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e001      	b.n	8006780 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e02e      	b.n	80067de <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006780:	1d3b      	adds	r3, r7, #4
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	463b      	mov	r3, r7
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800679e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006810:	81bb      	strh	r3, [r7, #12]
 8006812:	89bb      	ldrh	r3, [r7, #12]
 8006814:	f083 0310 	eor.w	r3, r3, #16
 8006818:	81bb      	strh	r3, [r7, #12]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	89bb      	ldrh	r3, [r7, #12]
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]
 800683a:	e01f      	b.n	800687c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	81fb      	strh	r3, [r7, #14]
 8006854:	89fb      	ldrh	r3, [r7, #14]
 8006856:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800685a:	81fb      	strh	r3, [r7, #14]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006878:	b29b      	uxth	r3, r3
 800687a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	7b1b      	ldrb	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 809d 	bne.w	80069d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d04c      	beq.n	800693e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	823b      	strh	r3, [r7, #16]
 80068b2:	8a3b      	ldrh	r3, [r7, #16]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01b      	beq.n	80068f4 <USB_EPClearStall+0x6c>
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	81fb      	strh	r3, [r7, #14]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	89fb      	ldrh	r3, [r7, #14]
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	78db      	ldrb	r3, [r3, #3]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d06c      	beq.n	80069d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006912:	81bb      	strh	r3, [r7, #12]
 8006914:	89bb      	ldrh	r3, [r7, #12]
 8006916:	f083 0320 	eor.w	r3, r3, #32
 800691a:	81bb      	strh	r3, [r7, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	89bb      	ldrh	r3, [r7, #12]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]
 800693c:	e04b      	b.n	80069d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	82fb      	strh	r3, [r7, #22]
 800694c:	8afb      	ldrh	r3, [r7, #22]
 800694e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01b      	beq.n	800698e <USB_EPClearStall+0x106>
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696c:	82bb      	strh	r3, [r7, #20]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	8abb      	ldrh	r3, [r7, #20]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a4:	827b      	strh	r3, [r7, #18]
 80069a6:	8a7b      	ldrh	r3, [r7, #18]
 80069a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ac:	827b      	strh	r3, [r7, #18]
 80069ae:	8a7b      	ldrh	r3, [r7, #18]
 80069b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b4:	827b      	strh	r3, [r7, #18]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	8a7b      	ldrh	r3, [r7, #18]
 80069c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d103      	bne.n	80069fc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2280      	movs	r2, #128	; 0x80
 80069f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b08d      	sub	sp, #52	; 0x34
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	460b      	mov	r3, r1
 8006a74:	80fb      	strh	r3, [r7, #6]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	005a      	lsls	r2, r3, #1
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9c:	e01e      	b.n	8006adc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	3302      	adds	r3, #2
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1dd      	bne.n	8006a9e <USB_WritePMA+0x3a>
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3734      	adds	r7, #52	; 0x34
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b08b      	sub	sp, #44	; 0x2c
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b02:	88bb      	ldrh	r3, [r7, #4]
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	005a      	lsls	r2, r3, #1
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	e01b      	b.n	8006b5e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	3302      	adds	r3, #2
 8006b32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	3302      	adds	r3, #2
 8006b56:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e0      	bne.n	8006b26 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b64:	88bb      	ldrh	r3, [r7, #4]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	701a      	strb	r2, [r3, #0]
  }
}
 8006b80:	bf00      	nop
 8006b82:	372c      	adds	r7, #44	; 0x2c
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7c1b      	ldrb	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d115      	bne.n	8006bca <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f002 fd75 	bl	8009696 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb8:	2202      	movs	r2, #2
 8006bba:	2181      	movs	r1, #129	; 0x81
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 fd6a 	bl	8009696 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bc8:	e012      	b.n	8006bf0 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006bca:	2340      	movs	r3, #64	; 0x40
 8006bcc:	2202      	movs	r2, #2
 8006bce:	2101      	movs	r1, #1
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f002 fd60 	bl	8009696 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	2202      	movs	r2, #2
 8006be2:	2181      	movs	r1, #129	; 0x81
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 fd56 	bl	8009696 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006bf0:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006bf4:	f002 fe96 	bl	8009924 <USBD_static_malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e003      	b.n	8006c16 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9da 	bl	8006fc8 <MSC_BOT_Init>

  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f002 fd58 	bl	80096e2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006c3a:	2181      	movs	r1, #129	; 0x81
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 fd50 	bl	80096e2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa07 	bl	800705c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d009      	beq.n	8006c6c <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 fe6c 	bl	800993c <USBD_static_free>
    pdev->pClassData  = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d04d      	beq.n	8006d3a <USBD_MSC_Setup+0xc2>
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	f040 8113 	bne.w	8006eca <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2bfe      	cmp	r3, #254	; 0xfe
 8006caa:	d002      	beq.n	8006cb2 <USBD_MSC_Setup+0x3a>
 8006cac:	2bff      	cmp	r3, #255	; 0xff
 8006cae:	d024      	beq.n	8006cfa <USBD_MSC_Setup+0x82>
 8006cb0:	e03b      	b.n	8006d2a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	885b      	ldrh	r3, [r3, #2]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d118      	bne.n	8006cec <USBD_MSC_Setup+0x74>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	88db      	ldrh	r3, [r3, #6]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d114      	bne.n	8006cec <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da0f      	bge.n	8006cec <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	4798      	blx	r3
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f002 f983 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cea:	e025      	b.n	8006d38 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 f914 	bl	8008f1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf8:	e01e      	b.n	8006d38 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <USBD_MSC_Setup+0xa4>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db03      	blt.n	8006d1c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f987 	bl	8007028 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d1a:	e00d      	b.n	8006d38 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 f8fc 	bl	8008f1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006d24:	2302      	movs	r3, #2
 8006d26:	75fb      	strb	r3, [r7, #23]
          break;
 8006d28:	e006      	b.n	8006d38 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f002 f8f5 	bl	8008f1c <USBD_CtlError>
          ret = USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	75fb      	strb	r3, [r7, #23]
          break;
 8006d36:	bf00      	nop
      }
      break;
 8006d38:	e0ce      	b.n	8006ed8 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	f200 80bb 	bhi.w	8006eba <USBD_MSC_Setup+0x242>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_MSC_Setup+0xd4>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006df3 	.word	0x08006df3
 8006d54:	08006ebb 	.word	0x08006ebb
 8006d58:	08006ebb 	.word	0x08006ebb
 8006d5c:	08006ebb 	.word	0x08006ebb
 8006d60:	08006ebb 	.word	0x08006ebb
 8006d64:	08006ebb 	.word	0x08006ebb
 8006d68:	08006ebb 	.word	0x08006ebb
 8006d6c:	08006ebb 	.word	0x08006ebb
 8006d70:	08006ebb 	.word	0x08006ebb
 8006d74:	08006da5 	.word	0x08006da5
 8006d78:	08006dcd 	.word	0x08006dcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d107      	bne.n	8006d96 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d86:	f107 030e 	add.w	r3, r7, #14
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f002 f92e 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d94:	e098      	b.n	8006ec8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f002 f8bf 	bl	8008f1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	75fb      	strb	r3, [r7, #23]
          break;
 8006da2:	e091      	b.n	8006ec8 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3304      	adds	r3, #4
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f002 f91a 	bl	8008ff0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dbc:	e084      	b.n	8006ec8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 f8ab 	bl	8008f1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006dca:	e07d      	b.n	8006ec8 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d106      	bne.n	8006de4 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006de2:	e071      	b.n	8006ec8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f002 f898 	bl	8008f1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006dec:	2302      	movs	r3, #2
 8006dee:	75fb      	strb	r3, [r7, #23]
          break;
 8006df0:	e06a      	b.n	8006ec8 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	889b      	ldrh	r3, [r3, #4]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f002 fc90 	bl	8009720 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	889b      	ldrh	r3, [r3, #4]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f002 fc6a 	bl	80096e2 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	889b      	ldrh	r3, [r3, #4]
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da23      	bge.n	8006e60 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	889b      	ldrh	r3, [r3, #4]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 020f 	and.w	r2, r3, #15
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3318      	adds	r3, #24
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7c1b      	ldrb	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d107      	bne.n	8006e4c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e40:	2202      	movs	r2, #2
 8006e42:	2181      	movs	r1, #129	; 0x81
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 fc26 	bl	8009696 <USBD_LL_OpenEP>
 8006e4a:	e005      	b.n	8006e58 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2202      	movs	r2, #2
 8006e50:	2181      	movs	r1, #129	; 0x81
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 fc1f 	bl	8009696 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e5e:	e024      	b.n	8006eaa <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	889b      	ldrh	r3, [r3, #4]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 020f 	and.w	r2, r3, #15
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7c1b      	ldrb	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d107      	bne.n	8006e96 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 fc01 	bl	8009696 <USBD_LL_OpenEP>
 8006e94:	e005      	b.n	8006ea2 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006e96:	2340      	movs	r3, #64	; 0x40
 8006e98:	2202      	movs	r2, #2
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f002 fbfa 	bl	8009696 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa50 	bl	8007358 <MSC_BOT_CplClrFeature>
          break;
 8006eb8:	e006      	b.n	8006ec8 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f002 f82d 	bl	8008f1c <USBD_CtlError>
          ret = USBD_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e006      	b.n	8006ed8 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f002 f825 	bl	8008f1c <USBD_CtlError>
      ret = USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed6:	bf00      	nop
  }

  return ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f8c1 	bl	800707c <MSC_BOT_DataIn>

  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f8e2 	bl	80070de <MSC_BOT_DataOut>

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000044 	.word	0x20000044

08006f44 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006f52:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000064 	.word	0x20000064

08006f64 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006f72:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000084 	.word	0x20000084

08006f84 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	200000a4 	.word	0x200000a4

08006fa4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr

08006fc8 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007000:	2101      	movs	r1, #1
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f002 fb8c 	bl	8009720 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007008:	2181      	movs	r1, #129	; 0x81
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 fb88 	bl	8009720 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007016:	231f      	movs	r3, #31
 8007018:	2101      	movs	r1, #1
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f002 fc4b 	bl	80098b6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800704a:	231f      	movs	r3, #31
 800704c:	2101      	movs	r1, #1
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f002 fc31 	bl	80098b6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	721a      	strb	r2, [r3, #8]
}
 8007072:	bf00      	nop
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr

0800707c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7a1b      	ldrb	r3, [r3, #8]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d004      	beq.n	80070a2 <MSC_BOT_DataIn+0x26>
 8007098:	2b02      	cmp	r3, #2
 800709a:	db19      	blt.n	80070d0 <MSC_BOT_DataIn+0x54>
 800709c:	2b04      	cmp	r3, #4
 800709e:	dc17      	bgt.n	80070d0 <MSC_BOT_DataIn+0x54>
 80070a0:	e011      	b.n	80070c6 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80070ae:	461a      	mov	r2, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f979 	bl	80073a8 <SCSI_ProcessCmd>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	da0b      	bge.n	80070d4 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80070bc:	2101      	movs	r1, #1
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f8f0 	bl	80072a4 <MSC_BOT_SendCSW>
      }
      break;
 80070c4:	e006      	b.n	80070d4 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80070c6:	2100      	movs	r1, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f8eb 	bl	80072a4 <MSC_BOT_SendCSW>
      break;
 80070ce:	e002      	b.n	80070d6 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <MSC_BOT_DataIn+0x5a>
      break;
 80070d4:	bf00      	nop
  }
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f0:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	7a1b      	ldrb	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <MSC_BOT_DataOut+0x22>
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d004      	beq.n	8007108 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80070fe:	e015      	b.n	800712c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f817 	bl	8007134 <MSC_BOT_CBW_Decode>
      break;
 8007106:	e011      	b.n	800712c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007114:	461a      	mov	r2, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f946 	bl	80073a8 <SCSI_ProcessCmd>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	da03      	bge.n	800712a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007122:	2101      	movs	r1, #1
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f8bd 	bl	80072a4 <MSC_BOT_SendCSW>
      break;
 800712a:	bf00      	nop
  }
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007142:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800715c:	2101      	movs	r1, #1
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f002 fbcc 	bl	80098fc <USBD_LL_GetRxDataSize>
 8007164:	4603      	mov	r3, r0
 8007166:	2b1f      	cmp	r3, #31
 8007168:	d114      	bne.n	8007194 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007170:	4a32      	ldr	r2, [pc, #200]	; (800723c <MSC_BOT_CBW_Decode+0x108>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10e      	bne.n	8007194 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800717c:	2b01      	cmp	r3, #1
 800717e:	d809      	bhi.n	8007194 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8007190:	2b10      	cmp	r3, #16
 8007192:	d90e      	bls.n	80071b2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800719a:	2320      	movs	r3, #32
 800719c:	2205      	movs	r2, #5
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fc48 	bl	8007a34 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2202      	movs	r2, #2
 80071a8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8a6 	bl	80072fc <MSC_BOT_Abort>
 80071b0:	e041      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80071be:	461a      	mov	r2, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8f1 	bl	80073a8 <SCSI_ProcessCmd>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da0c      	bge.n	80071e6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	7a1b      	ldrb	r3, [r3, #8]
 80071d0:	2b05      	cmp	r3, #5
 80071d2:	d104      	bne.n	80071de <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80071d4:	2101      	movs	r1, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f864 	bl	80072a4 <MSC_BOT_SendCSW>
 80071dc:	e02b      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f88c 	bl	80072fc <MSC_BOT_Abort>
 80071e4:	e027      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7a1b      	ldrb	r3, [r3, #8]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d022      	beq.n	8007234 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d01e      	beq.n	8007234 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d01a      	beq.n	8007234 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	895b      	ldrh	r3, [r3, #10]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f103 010c 	add.w	r1, r3, #12
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	895b      	ldrh	r3, [r3, #10]
 8007210:	461a      	mov	r2, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f814 	bl	8007240 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007218:	e00d      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007222:	2100      	movs	r1, #0
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f83d 	bl	80072a4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800722a:	e004      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f865 	bl	80072fc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007232:	e000      	b.n	8007236 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007234:	bf00      	nop
    }
  }
}
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	43425355 	.word	0x43425355

08007240 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	429a      	cmp	r2, r3
 8007260:	d204      	bcs.n	800726c <MSC_BOT_SendData+0x2c>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007268:	b29b      	uxth	r3, r3
 800726a:	e000      	b.n	800726e <MSC_BOT_SendData+0x2e>
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2204      	movs	r2, #4
 800728c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800728e:	8a7b      	ldrh	r3, [r7, #18]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	2181      	movs	r1, #129	; 0x81
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f002 faeb 	bl	8009870 <USBD_LL_Transmit>
}
 800729a:	bf00      	nop
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a0f      	ldr	r2, [pc, #60]	; (80072f8 <MSC_BOT_SendCSW+0x54>)
 80072bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80072d4:	230d      	movs	r3, #13
 80072d6:	2181      	movs	r1, #129	; 0x81
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f002 fac9 	bl	8009870 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80072e4:	231f      	movs	r3, #31
 80072e6:	2101      	movs	r1, #1
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 fae4 	bl	80098b6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	53425355 	.word	0x53425355

080072fc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10c      	bne.n	8007330 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007328:	2101      	movs	r1, #1
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f002 fa17 	bl	800975e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007330:	2181      	movs	r1, #129	; 0x81
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f002 fa13 	bl	800975e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	7a5b      	ldrb	r3, [r3, #9]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d107      	bne.n	8007350 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007346:	231f      	movs	r3, #31
 8007348:	2101      	movs	r1, #1
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 fab3 	bl	80098b6 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	7a5b      	ldrb	r3, [r3, #9]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d107      	bne.n	8007384 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007374:	2181      	movs	r1, #129	; 0x81
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f002 f9f1 	bl	800975e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	725a      	strb	r2, [r3, #9]
 8007382:	e00d      	b.n	80073a0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007388:	2b00      	cmp	r3, #0
 800738a:	da08      	bge.n	800739e <MSC_BOT_CplClrFeature+0x46>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	7a5b      	ldrb	r3, [r3, #9]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d004      	beq.n	800739e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007394:	2101      	movs	r1, #1
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff ff84 	bl	80072a4 <MSC_BOT_SendCSW>
 800739c:	e000      	b.n	80073a0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800739e:	bf00      	nop
  }
}
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	460b      	mov	r3, r1
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b5a      	cmp	r3, #90	; 0x5a
 80073bc:	f200 810e 	bhi.w	80075dc <SCSI_ProcessCmd+0x234>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <SCSI_ProcessCmd+0x20>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	08007535 	.word	0x08007535
 80073cc:	080075dd 	.word	0x080075dd
 80073d0:	080075dd 	.word	0x080075dd
 80073d4:	08007543 	.word	0x08007543
 80073d8:	080075dd 	.word	0x080075dd
 80073dc:	080075dd 	.word	0x080075dd
 80073e0:	080075dd 	.word	0x080075dd
 80073e4:	080075dd 	.word	0x080075dd
 80073e8:	080075dd 	.word	0x080075dd
 80073ec:	080075dd 	.word	0x080075dd
 80073f0:	080075dd 	.word	0x080075dd
 80073f4:	080075dd 	.word	0x080075dd
 80073f8:	080075dd 	.word	0x080075dd
 80073fc:	080075dd 	.word	0x080075dd
 8007400:	080075dd 	.word	0x080075dd
 8007404:	080075dd 	.word	0x080075dd
 8007408:	080075dd 	.word	0x080075dd
 800740c:	080075dd 	.word	0x080075dd
 8007410:	08007551 	.word	0x08007551
 8007414:	080075dd 	.word	0x080075dd
 8007418:	080075dd 	.word	0x080075dd
 800741c:	080075dd 	.word	0x080075dd
 8007420:	080075dd 	.word	0x080075dd
 8007424:	080075dd 	.word	0x080075dd
 8007428:	080075dd 	.word	0x080075dd
 800742c:	080075dd 	.word	0x080075dd
 8007430:	0800757b 	.word	0x0800757b
 8007434:	0800755f 	.word	0x0800755f
 8007438:	080075dd 	.word	0x080075dd
 800743c:	080075dd 	.word	0x080075dd
 8007440:	0800756d 	.word	0x0800756d
 8007444:	080075dd 	.word	0x080075dd
 8007448:	080075dd 	.word	0x080075dd
 800744c:	080075dd 	.word	0x080075dd
 8007450:	080075dd 	.word	0x080075dd
 8007454:	08007597 	.word	0x08007597
 8007458:	080075dd 	.word	0x080075dd
 800745c:	080075a5 	.word	0x080075a5
 8007460:	080075dd 	.word	0x080075dd
 8007464:	080075dd 	.word	0x080075dd
 8007468:	080075b3 	.word	0x080075b3
 800746c:	080075dd 	.word	0x080075dd
 8007470:	080075c1 	.word	0x080075c1
 8007474:	080075dd 	.word	0x080075dd
 8007478:	080075dd 	.word	0x080075dd
 800747c:	080075dd 	.word	0x080075dd
 8007480:	080075dd 	.word	0x080075dd
 8007484:	080075cf 	.word	0x080075cf
 8007488:	080075dd 	.word	0x080075dd
 800748c:	080075dd 	.word	0x080075dd
 8007490:	080075dd 	.word	0x080075dd
 8007494:	080075dd 	.word	0x080075dd
 8007498:	080075dd 	.word	0x080075dd
 800749c:	080075dd 	.word	0x080075dd
 80074a0:	080075dd 	.word	0x080075dd
 80074a4:	080075dd 	.word	0x080075dd
 80074a8:	080075dd 	.word	0x080075dd
 80074ac:	080075dd 	.word	0x080075dd
 80074b0:	080075dd 	.word	0x080075dd
 80074b4:	080075dd 	.word	0x080075dd
 80074b8:	080075dd 	.word	0x080075dd
 80074bc:	080075dd 	.word	0x080075dd
 80074c0:	080075dd 	.word	0x080075dd
 80074c4:	080075dd 	.word	0x080075dd
 80074c8:	080075dd 	.word	0x080075dd
 80074cc:	080075dd 	.word	0x080075dd
 80074d0:	080075dd 	.word	0x080075dd
 80074d4:	080075dd 	.word	0x080075dd
 80074d8:	080075dd 	.word	0x080075dd
 80074dc:	080075dd 	.word	0x080075dd
 80074e0:	080075dd 	.word	0x080075dd
 80074e4:	080075dd 	.word	0x080075dd
 80074e8:	080075dd 	.word	0x080075dd
 80074ec:	080075dd 	.word	0x080075dd
 80074f0:	080075dd 	.word	0x080075dd
 80074f4:	080075dd 	.word	0x080075dd
 80074f8:	080075dd 	.word	0x080075dd
 80074fc:	080075dd 	.word	0x080075dd
 8007500:	080075dd 	.word	0x080075dd
 8007504:	080075dd 	.word	0x080075dd
 8007508:	080075dd 	.word	0x080075dd
 800750c:	080075dd 	.word	0x080075dd
 8007510:	080075dd 	.word	0x080075dd
 8007514:	080075dd 	.word	0x080075dd
 8007518:	080075dd 	.word	0x080075dd
 800751c:	080075dd 	.word	0x080075dd
 8007520:	080075dd 	.word	0x080075dd
 8007524:	080075dd 	.word	0x080075dd
 8007528:	080075dd 	.word	0x080075dd
 800752c:	080075dd 	.word	0x080075dd
 8007530:	08007589 	.word	0x08007589
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4619      	mov	r1, r3
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f85c 	bl	80075f8 <SCSI_TestUnitReady>
      break;
 8007540:	e055      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fa09 	bl	8007960 <SCSI_RequestSense>
      break;
 800754e:	e04e      	b.n	80075ee <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4619      	mov	r1, r3
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f888 	bl	800766c <SCSI_Inquiry>
      break;
 800755c:	e047      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4619      	mov	r1, r3
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fa9e 	bl	8007aa6 <SCSI_StartStopUnit>
      break;
 800756a:	e040      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	4619      	mov	r1, r3
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fa97 	bl	8007aa6 <SCSI_StartStopUnit>
      break;
 8007578:	e039      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f99d 	bl	80078c0 <SCSI_ModeSense6>
      break;
 8007586:	e032      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4619      	mov	r1, r3
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f9be 	bl	8007910 <SCSI_ModeSense10>
      break;
 8007594:	e02b      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f92a 	bl	80077f6 <SCSI_ReadFormatCapacity>
      break;
 80075a2:	e024      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	4619      	mov	r1, r3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f8bc 	bl	8007728 <SCSI_ReadCapacity10>
      break;
 80075b0:	e01d      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fa88 	bl	8007ace <SCSI_Read10>
      break;
 80075be:	e016      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fb0d 	bl	8007be6 <SCSI_Write10>
      break;
 80075cc:	e00f      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fbb6 	bl	8007d46 <SCSI_Verify10>
      break;
 80075da:	e008      	b.n	80075ee <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80075dc:	7af9      	ldrb	r1, [r7, #11]
 80075de:	2320      	movs	r3, #32
 80075e0:	2205      	movs	r2, #5
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fa26 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e000      	b.n	80075f0 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	460b      	mov	r3, r1
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800761e:	2320      	movs	r3, #32
 8007620:	2205      	movs	r2, #5
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa06 	bl	8007a34 <SCSI_SenseCode>

    return -1;
 8007628:	f04f 33ff 	mov.w	r3, #4294967295
 800762c:	e019      	b.n	8007662 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	7afa      	ldrb	r2, [r7, #11]
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007642:	7af9      	ldrb	r1, [r7, #11]
 8007644:	233a      	movs	r3, #58	; 0x3a
 8007646:	2202      	movs	r2, #2
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f9f3 	bl	8007a34 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2205      	movs	r2, #5
 8007652:	721a      	strb	r2, [r3, #8]

    return -1;
 8007654:	f04f 33ff 	mov.w	r3, #4294967295
 8007658:	e003      	b.n	8007662 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	815a      	strh	r2, [r3, #10]

  return 0;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800766c:	b480      	push	{r7}
 800766e:	b089      	sub	sp, #36	; 0x24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	460b      	mov	r3, r1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3301      	adds	r3, #1
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d014      	beq.n	80076ba <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007690:	2307      	movs	r3, #7
 8007692:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	8bfa      	ldrh	r2, [r7, #30]
 8007698:	815a      	strh	r2, [r3, #10]

    while (len)
 800769a:	e00a      	b.n	80076b2 <SCSI_Inquiry+0x46>
    {
      len--;
 800769c:	8bfb      	ldrh	r3, [r7, #30]
 800769e:	3b01      	subs	r3, #1
 80076a0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80076a2:	8bfa      	ldrh	r2, [r7, #30]
 80076a4:	8bfb      	ldrh	r3, [r7, #30]
 80076a6:	491f      	ldr	r1, [pc, #124]	; (8007724 <SCSI_Inquiry+0xb8>)
 80076a8:	5c89      	ldrb	r1, [r1, r2]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4413      	add	r3, r2
 80076ae:	460a      	mov	r2, r1
 80076b0:	731a      	strb	r2, [r3, #12]
    while (len)
 80076b2:	8bfb      	ldrh	r3, [r7, #30]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f1      	bne.n	800769c <SCSI_Inquiry+0x30>
 80076b8:	e02e      	b.n	8007718 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c0:	69d9      	ldr	r1, [r3, #28]
 80076c2:	7afa      	ldrb	r2, [r7, #11]
 80076c4:	4613      	mov	r3, r2
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	3304      	adds	r3, #4
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3305      	adds	r3, #5
 80076da:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8bfa      	ldrh	r2, [r7, #30]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d303      	bcc.n	80076f2 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	8bfa      	ldrh	r2, [r7, #30]
 80076f6:	815a      	strh	r2, [r3, #10]

    while (len)
 80076f8:	e00b      	b.n	8007712 <SCSI_Inquiry+0xa6>
    {
      len--;
 80076fa:	8bfb      	ldrh	r3, [r7, #30]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007700:	8bfb      	ldrh	r3, [r7, #30]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	441a      	add	r2, r3
 8007706:	8bfb      	ldrh	r3, [r7, #30]
 8007708:	7811      	ldrb	r1, [r2, #0]
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4413      	add	r3, r2
 800770e:	460a      	mov	r2, r1
 8007710:	731a      	strb	r2, [r3, #12]
    while (len)
 8007712:	8bfb      	ldrh	r3, [r7, #30]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f0      	bne.n	80076fa <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3724      	adds	r7, #36	; 0x24
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	08009a9c 	.word	0x08009a9c

08007728 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	460b      	mov	r3, r1
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8007752:	7af8      	ldrb	r0, [r7, #11]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800775c:	7af9      	ldrb	r1, [r7, #11]
 800775e:	233a      	movs	r3, #58	; 0x3a
 8007760:	2202      	movs	r2, #2
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f966 	bl	8007a34 <SCSI_SenseCode>
    return -1;
 8007768:	f04f 33ff 	mov.w	r3, #4294967295
 800776c:	e03f      	b.n	80077ee <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007774:	3b01      	subs	r3, #1
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	b2da      	uxtb	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007784:	3b01      	subs	r3, #1
 8007786:	0c1b      	lsrs	r3, r3, #16
 8007788:	b2da      	uxtb	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007794:	3b01      	subs	r3, #1
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b2da      	uxtb	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80077b4:	161b      	asrs	r3, r3, #24
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80077c2:	141b      	asrs	r3, r3, #16
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2208      	movs	r2, #8
 80077ea:	815a      	strh	r2, [r3, #10]
    return 0;
 80077ec:	2300      	movs	r3, #0
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	460b      	mov	r3, r1
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800780c:	2300      	movs	r3, #0
 800780e:	83fb      	strh	r3, [r7, #30]
 8007810:	e007      	b.n	8007822 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007812:	8bfb      	ldrh	r3, [r7, #30]
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	4413      	add	r3, r2
 8007818:	2200      	movs	r2, #0
 800781a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800781c:	8bfb      	ldrh	r3, [r7, #30]
 800781e:	3301      	adds	r3, #1
 8007820:	83fb      	strh	r3, [r7, #30]
 8007822:	8bfb      	ldrh	r3, [r7, #30]
 8007824:	2b0b      	cmp	r3, #11
 8007826:	d9f4      	bls.n	8007812 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f107 0216 	add.w	r2, r7, #22
 8007834:	f107 0110 	add.w	r1, r7, #16
 8007838:	7af8      	ldrb	r0, [r7, #11]
 800783a:	4798      	blx	r3
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007842:	7af9      	ldrb	r1, [r7, #11]
 8007844:	233a      	movs	r3, #58	; 0x3a
 8007846:	2202      	movs	r2, #2
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f8f3 	bl	8007a34 <SCSI_SenseCode>
    return -1;
 800784e:	f04f 33ff 	mov.w	r3, #4294967295
 8007852:	e030      	b.n	80078b6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2208      	movs	r2, #8
 8007858:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	3b01      	subs	r3, #1
 800785e:	0e1b      	lsrs	r3, r3, #24
 8007860:	b2da      	uxtb	r2, r3
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	3b01      	subs	r3, #1
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	b2da      	uxtb	r2, r3
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3b01      	subs	r3, #1
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b2da      	uxtb	r2, r3
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b2da      	uxtb	r2, r3
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2202      	movs	r2, #2
 800788e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007890:	8afb      	ldrh	r3, [r7, #22]
 8007892:	141b      	asrs	r3, r3, #16
 8007894:	b2da      	uxtb	r2, r3
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800789a:	8afb      	ldrh	r3, [r7, #22]
 800789c:	0a1b      	lsrs	r3, r3, #8
 800789e:	b29b      	uxth	r3, r3
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	220c      	movs	r2, #12
 80078b2:	815a      	strh	r2, [r3, #10]
    return 0;
 80078b4:	2300      	movs	r3, #0
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	460b      	mov	r3, r1
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80078d6:	2308      	movs	r3, #8
 80078d8:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	8afa      	ldrh	r2, [r7, #22]
 80078de:	815a      	strh	r2, [r3, #10]

  while (len)
 80078e0:	e00a      	b.n	80078f8 <SCSI_ModeSense6+0x38>
  {
    len--;
 80078e2:	8afb      	ldrh	r3, [r7, #22]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80078e8:	8afa      	ldrh	r2, [r7, #22]
 80078ea:	8afb      	ldrh	r3, [r7, #22]
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <SCSI_ModeSense6+0x4c>)
 80078ee:	5c89      	ldrb	r1, [r1, r2]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	460a      	mov	r2, r1
 80078f6:	731a      	strb	r2, [r3, #12]
  while (len)
 80078f8:	8afb      	ldrh	r3, [r7, #22]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f1      	bne.n	80078e2 <SCSI_ModeSense6+0x22>
  }
  return 0;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	08009aa4 	.word	0x08009aa4

08007910 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	460b      	mov	r3, r1
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800791e:	2308      	movs	r3, #8
 8007920:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	8afa      	ldrh	r2, [r7, #22]
 800792e:	815a      	strh	r2, [r3, #10]

  while (len)
 8007930:	e00a      	b.n	8007948 <SCSI_ModeSense10+0x38>
  {
    len--;
 8007932:	8afb      	ldrh	r3, [r7, #22]
 8007934:	3b01      	subs	r3, #1
 8007936:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007938:	8afa      	ldrh	r2, [r7, #22]
 800793a:	8afb      	ldrh	r3, [r7, #22]
 800793c:	4907      	ldr	r1, [pc, #28]	; (800795c <SCSI_ModeSense10+0x4c>)
 800793e:	5c89      	ldrb	r1, [r1, r2]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	460a      	mov	r2, r1
 8007946:	731a      	strb	r2, [r3, #12]
  while (len)
 8007948:	8afb      	ldrh	r3, [r7, #22]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f1      	bne.n	8007932 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	08009aac 	.word	0x08009aac

08007960 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	460b      	mov	r3, r1
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007974:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]
 800797a:	e007      	b.n	800798c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	4413      	add	r3, r2
 8007982:	2200      	movs	r2, #0
 8007984:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	3301      	adds	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b11      	cmp	r3, #17
 8007990:	d9f4      	bls.n	800797c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2270      	movs	r2, #112	; 0x70
 8007996:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	220c      	movs	r2, #12
 800799c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d02e      	beq.n	8007a0c <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	3347      	adds	r3, #71	; 0x47
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	4413      	add	r3, r2
 80079bc:	791a      	ldrb	r2, [r3, #4]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	3347      	adds	r3, #71	; 0x47
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4413      	add	r3, r2
 80079d0:	7a5a      	ldrb	r2, [r3, #9]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	3347      	adds	r3, #71	; 0x47
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	7a1a      	ldrb	r2, [r3, #8]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80079f0:	3301      	adds	r3, #1
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d103      	bne.n	8007a0c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2212      	movs	r2, #18
 8007a10:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b12      	cmp	r3, #18
 8007a1a:	d805      	bhi.n	8007a28 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	70fb      	strb	r3, [r7, #3]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70bb      	strb	r3, [r7, #2]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	3347      	adds	r3, #71	; 0x47
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	4413      	add	r3, r2
 8007a64:	78ba      	ldrb	r2, [r7, #2]
 8007a66:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	3347      	adds	r3, #71	; 0x47
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4413      	add	r3, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007a80:	3301      	adds	r3, #1
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d103      	bne.n	8007a9c <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr

08007aa6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	815a      	strh	r2, [r3, #10]
  return 0;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr

08007ace <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae2:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	7a1b      	ldrb	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d16e      	bne.n	8007bca <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	db0a      	blt.n	8007b0e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007afe:	2320      	movs	r3, #32
 8007b00:	2205      	movs	r2, #5
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ff96 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	e067      	b.n	8007bde <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	7afa      	ldrb	r2, [r7, #11]
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b22:	7af9      	ldrb	r1, [r7, #11]
 8007b24:	233a      	movs	r3, #58	; 0x3a
 8007b26:	2202      	movs	r2, #2
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff83 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b32:	e054      	b.n	8007bde <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3302      	adds	r3, #2
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3303      	adds	r3, #3
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b44:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b4e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	3205      	adds	r2, #5
 8007b54:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b56:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3307      	adds	r3, #7
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	3208      	adds	r2, #8
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b80:	7af9      	ldrb	r1, [r7, #11]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f912 	bl	8007dac <SCSI_CheckAddressRange>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da02      	bge.n	8007b94 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b92:	e024      	b.n	8007bde <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2202      	movs	r2, #2
 8007b98:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ba6:	6979      	ldr	r1, [r7, #20]
 8007ba8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007bac:	fb01 f303 	mul.w	r3, r1, r3
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d00a      	beq.n	8007bca <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007bba:	2320      	movs	r3, #32
 8007bbc:	2205      	movs	r2, #5
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff ff38 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	e009      	b.n	8007bde <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd0:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f90a 	bl	8007df0 <SCSI_ProcessRead>
 8007bdc:	4603      	mov	r3, r0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b086      	sub	sp, #24
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	7a1b      	ldrb	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 8096 	bne.w	8007d32 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007c0c:	b25b      	sxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da0a      	bge.n	8007c28 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c18:	2320      	movs	r3, #32
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff ff09 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295
 8007c26:	e08a      	b.n	8007d3e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	7afa      	ldrb	r2, [r7, #11]
 8007c32:	4610      	mov	r0, r2
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c3c:	7af9      	ldrb	r1, [r7, #11]
 8007c3e:	233a      	movs	r3, #58	; 0x3a
 8007c40:	2202      	movs	r2, #2
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7ff fef6 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e077      	b.n	8007d3e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	7afa      	ldrb	r2, [r7, #11]
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d008      	beq.n	8007c74 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007c62:	7af9      	ldrb	r1, [r7, #11]
 8007c64:	2327      	movs	r3, #39	; 0x27
 8007c66:	2202      	movs	r2, #2
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fee3 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	e064      	b.n	8007d3e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3302      	adds	r3, #2
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3303      	adds	r3, #3
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c84:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007c8e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	3205      	adds	r2, #5
 8007c94:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007c96:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	3208      	adds	r2, #8
 8007caa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007cac:	431a      	orrs	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007cc0:	7af9      	ldrb	r1, [r7, #11]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 f872 	bl	8007dac <SCSI_CheckAddressRange>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da02      	bge.n	8007cd4 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007cce:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd2:	e034      	b.n	8007d3e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d00a      	beq.n	8007d08 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	2205      	movs	r2, #5
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f7ff fe99 	bl	8007a34 <SCSI_SenseCode>
      return -1;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
 8007d06:	e01a      	b.n	8007d3e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0e:	bf28      	it	cs
 8007d10:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d14:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f103 020c 	add.w	r2, r3, #12
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2101      	movs	r1, #1
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f001 fdc4 	bl	80098b6 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e005      	b.n	8007d3e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	4619      	mov	r1, r3
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f8ce 	bl	8007ed8 <SCSI_ProcessWrite>
 8007d3c:	4603      	mov	r3, r0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b086      	sub	sp, #24
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007d6a:	7af9      	ldrb	r1, [r7, #11]
 8007d6c:	2324      	movs	r3, #36	; 0x24
 8007d6e:	2205      	movs	r2, #5
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff fe5f 	bl	8007a34 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7a:	e013      	b.n	8007da4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d88:	7af9      	ldrb	r1, [r7, #11]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f80e 	bl	8007dac <SCSI_CheckAddressRange>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da02      	bge.n	8007d9c <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9a:	e003      	b.n	8007da4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	815a      	strh	r2, [r3, #10]
  return 0;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	460b      	mov	r3, r1
 8007dba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	441a      	add	r2, r3
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d908      	bls.n	8007de6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007dd4:	7af9      	ldrb	r1, [r7, #11]
 8007dd6:	2321      	movs	r3, #33	; 0x21
 8007dd8:	2205      	movs	r2, #5
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fe2a 	bl	8007a34 <SCSI_SenseCode>
    return -1;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	e000      	b.n	8007de8 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e1c:	bf28      	it	cs
 8007e1e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e22:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2a:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e3e:	4618      	mov	r0, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	78f8      	ldrb	r0, [r7, #3]
 8007e4a:	47a0      	blx	r4
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	da08      	bge.n	8007e64 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007e52:	78f9      	ldrb	r1, [r7, #3]
 8007e54:	2311      	movs	r3, #17
 8007e56:	2204      	movs	r2, #4
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fdeb 	bl	8007a34 <SCSI_SenseCode>
    return -1;
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	e035      	b.n	8007ed0 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f103 020c 	add.w	r2, r3, #12
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2181      	movs	r1, #129	; 0x81
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 fcfd 	bl	8009870 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e82:	4619      	mov	r1, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e8a:	441a      	add	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}

08007ed8 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eea:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007ef8:	fb02 f303 	mul.w	r3, r2, r3
 8007efc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f04:	bf28      	it	cs
 8007f06:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007f0a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f12:	695c      	ldr	r4, [r3, #20]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f103 010c 	add.w	r1, r3, #12
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007f26:	4618      	mov	r0, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	78f8      	ldrb	r0, [r7, #3]
 8007f32:	47a0      	blx	r4
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da08      	bge.n	8007f4c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	2204      	movs	r2, #4
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fd77 	bl	8007a34 <SCSI_SenseCode>

    return -1;
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4a:	e045      	b.n	8007fd8 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007f58:	4619      	mov	r1, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007f74:	4619      	mov	r1, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f7c:	1ad2      	subs	r2, r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	1ad2      	subs	r2, r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d104      	bne.n	8007fa8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f97f 	bl	80072a4 <MSC_BOT_SendCSW>
 8007fa6:	e016      	b.n	8007fd6 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fbc:	bf28      	it	cs
 8007fbe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007fc2:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f103 020c 	add.w	r2, r3, #12
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fc70 	bl	80098b6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd90      	pop	{r4, r7, pc}

08007fe0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e01a      	b.n	800802e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	79fa      	ldrb	r2, [r7, #7]
 8008024:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f001 faca 	bl	80095c0 <USBD_LL_Init>

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d006      	beq.n	8008058 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
 8008056:	e001      	b.n	800805c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008058:	2302      	movs	r3, #2
 800805a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 faf5 	bl	8009660 <USBD_LL_Start>

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00c      	beq.n	80080c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	4611      	mov	r1, r2
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	4611      	mov	r1, r2
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f000 feca 	bl	8008ea4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2b01      	cmp	r3, #1
 8008132:	d00c      	beq.n	800814e <USBD_LL_SetupStage+0x56>
 8008134:	2b01      	cmp	r3, #1
 8008136:	d302      	bcc.n	800813e <USBD_LL_SetupStage+0x46>
 8008138:	2b02      	cmp	r3, #2
 800813a:	d010      	beq.n	800815e <USBD_LL_SetupStage+0x66>
 800813c:	e017      	b.n	800816e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9ca 	bl	80084e0 <USBD_StdDevReq>
      break;
 800814c:	e01a      	b.n	8008184 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa2c 	bl	80085b4 <USBD_StdItfReq>
      break;
 800815c:	e012      	b.n	8008184 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa6a 	bl	8008640 <USBD_StdEPReq>
      break;
 800816c:	e00a      	b.n	8008184 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008174:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008178:	b2db      	uxtb	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 faee 	bl	800975e <USBD_LL_StallEP>
      break;
 8008182:	bf00      	nop
  }

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	460b      	mov	r3, r1
 8008198:	607a      	str	r2, [r7, #4]
 800819a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d14b      	bne.n	800823a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80081a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d134      	bne.n	800821e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d919      	bls.n	80081f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d203      	bcs.n	80081e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80081de:	b29b      	uxth	r3, r3
 80081e0:	e002      	b.n	80081e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 ff2d 	bl	800904c <USBD_CtlContinueRx>
 80081f2:	e038      	b.n	8008266 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00a      	beq.n	8008216 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008206:	2b03      	cmp	r3, #3
 8008208:	d105      	bne.n	8008216 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 ff2a 	bl	8009070 <USBD_CtlSendStatus>
 800821c:	e023      	b.n	8008266 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008224:	2b05      	cmp	r3, #5
 8008226:	d11e      	bne.n	8008266 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008230:	2100      	movs	r1, #0
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 fa93 	bl	800975e <USBD_LL_StallEP>
 8008238:	e015      	b.n	8008266 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800824c:	2b03      	cmp	r3, #3
 800824e:	d108      	bne.n	8008262 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	7afa      	ldrb	r2, [r7, #11]
 800825a:	4611      	mov	r1, r2
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	4798      	blx	r3
 8008260:	e001      	b.n	8008266 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008262:	2302      	movs	r3, #2
 8008264:	e000      	b.n	8008268 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	460b      	mov	r3, r1
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d17f      	bne.n	8008384 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3314      	adds	r3, #20
 8008288:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008290:	2b02      	cmp	r3, #2
 8008292:	d15c      	bne.n	800834e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	429a      	cmp	r2, r3
 800829e:	d915      	bls.n	80082cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	68da      	ldr	r2, [r3, #12]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 feb5 	bl	8009028 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f001 faf6 	bl	80098b6 <USBD_LL_PrepareReceive>
 80082ca:	e04e      	b.n	800836a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	6912      	ldr	r2, [r2, #16]
 80082d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d8:	fb02 f201 	mul.w	r2, r2, r1
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d11c      	bne.n	800831c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d316      	bcc.n	800831c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d20f      	bcs.n	800831c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 fe91 	bl	8009028 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800830e:	2300      	movs	r3, #0
 8008310:	2200      	movs	r2, #0
 8008312:	2100      	movs	r1, #0
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f001 face 	bl	80098b6 <USBD_LL_PrepareReceive>
 800831a:	e026      	b.n	800836a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800832e:	2b03      	cmp	r3, #3
 8008330:	d105      	bne.n	800833e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f001 fa0c 	bl	800975e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fea5 	bl	8009096 <USBD_CtlReceiveStatus>
 800834c:	e00d      	b.n	800836a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008354:	2b04      	cmp	r3, #4
 8008356:	d004      	beq.n	8008362 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008362:	2180      	movs	r1, #128	; 0x80
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f001 f9fa 	bl	800975e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d11d      	bne.n	80083b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fe83 	bl	8008080 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008382:	e015      	b.n	80083b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00d      	beq.n	80083ac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008396:	2b03      	cmp	r3, #3
 8008398:	d108      	bne.n	80083ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	7afa      	ldrb	r2, [r7, #11]
 80083a4:	4611      	mov	r1, r2
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	4798      	blx	r3
 80083aa:	e001      	b.n	80083b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083ac:	2302      	movs	r3, #2
 80083ae:	e000      	b.n	80083b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 f964 	bl	8009696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2240      	movs	r2, #64	; 0x40
 80083da:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	2200      	movs	r2, #0
 80083e2:	2180      	movs	r1, #128	; 0x80
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f956 	bl	8009696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2240      	movs	r2, #64	; 0x40
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d009      	beq.n	8008432 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6852      	ldr	r2, [r2, #4]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	4611      	mov	r1, r2
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
  }

  return USBD_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2204      	movs	r2, #4
 8008472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	2b04      	cmp	r3, #4
 8008492:	d105      	bne.n	80084a0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d10b      	bne.n	80084d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d004      	beq.n	8008504 <USBD_StdDevReq+0x24>
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d002      	beq.n	8008504 <USBD_StdDevReq+0x24>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <USBD_StdDevReq+0x34>
 8008502:	e04c      	b.n	800859e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
      break;
 8008512:	e049      	b.n	80085a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	2b09      	cmp	r3, #9
 800851a:	d83a      	bhi.n	8008592 <USBD_StdDevReq+0xb2>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USBD_StdDevReq+0x44>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008575 	.word	0x08008575
 8008528:	08008589 	.word	0x08008589
 800852c:	08008593 	.word	0x08008593
 8008530:	0800857f 	.word	0x0800857f
 8008534:	08008593 	.word	0x08008593
 8008538:	08008557 	.word	0x08008557
 800853c:	0800854d 	.word	0x0800854d
 8008540:	08008593 	.word	0x08008593
 8008544:	0800856b 	.word	0x0800856b
 8008548:	08008561 	.word	0x08008561
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f9d4 	bl	80088fc <USBD_GetDescriptor>
          break;
 8008554:	e022      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fb37 	bl	8008bcc <USBD_SetAddress>
          break;
 800855e:	e01d      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fb74 	bl	8008c50 <USBD_SetConfig>
          break;
 8008568:	e018      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fbfd 	bl	8008d6c <USBD_GetConfig>
          break;
 8008572:	e013      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fc2c 	bl	8008dd4 <USBD_GetStatus>
          break;
 800857c:	e00e      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc5a 	bl	8008e3a <USBD_SetFeature>
          break;
 8008586:	e009      	b.n	800859c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fc69 	bl	8008e62 <USBD_ClrFeature>
          break;
 8008590:	e004      	b.n	800859c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fcc1 	bl	8008f1c <USBD_CtlError>
          break;
 800859a:	bf00      	nop
      }
      break;
 800859c:	e004      	b.n	80085a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fcbb 	bl	8008f1c <USBD_CtlError>
      break;
 80085a6:	bf00      	nop
  }

  return ret;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	d003      	beq.n	80085d6 <USBD_StdItfReq+0x22>
 80085ce:	2b40      	cmp	r3, #64	; 0x40
 80085d0:	d001      	beq.n	80085d6 <USBD_StdItfReq+0x22>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d12a      	bne.n	800862c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085dc:	3b01      	subs	r3, #1
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d81d      	bhi.n	800861e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	889b      	ldrh	r3, [r3, #4]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d813      	bhi.n	8008614 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d110      	bne.n	8008628 <USBD_StdItfReq+0x74>
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10d      	bne.n	8008628 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fd2f 	bl	8009070 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008612:	e009      	b.n	8008628 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fc80 	bl	8008f1c <USBD_CtlError>
          break;
 800861c:	e004      	b.n	8008628 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc7b 	bl	8008f1c <USBD_CtlError>
          break;
 8008626:	e000      	b.n	800862a <USBD_StdItfReq+0x76>
          break;
 8008628:	bf00      	nop
      }
      break;
 800862a:	e004      	b.n	8008636 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fc74 	bl	8008f1c <USBD_CtlError>
      break;
 8008634:	bf00      	nop
  }

  return USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	889b      	ldrh	r3, [r3, #4]
 8008652:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800865c:	2b20      	cmp	r3, #32
 800865e:	d004      	beq.n	800866a <USBD_StdEPReq+0x2a>
 8008660:	2b40      	cmp	r3, #64	; 0x40
 8008662:	d002      	beq.n	800866a <USBD_StdEPReq+0x2a>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d008      	beq.n	800867a <USBD_StdEPReq+0x3a>
 8008668:	e13d      	b.n	80088e6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
      break;
 8008678:	e13a      	b.n	80088f0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008682:	2b20      	cmp	r3, #32
 8008684:	d10a      	bne.n	800869c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	4798      	blx	r3
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	e12a      	b.n	80088f2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d03e      	beq.n	8008722 <USBD_StdEPReq+0xe2>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d002      	beq.n	80086ae <USBD_StdEPReq+0x6e>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d070      	beq.n	800878e <USBD_StdEPReq+0x14e>
 80086ac:	e115      	b.n	80088da <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d002      	beq.n	80086be <USBD_StdEPReq+0x7e>
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d015      	beq.n	80086e8 <USBD_StdEPReq+0xa8>
 80086bc:	e02b      	b.n	8008716 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <USBD_StdEPReq+0x9e>
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d009      	beq.n	80086de <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 f845 	bl	800975e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 f841 	bl	800975e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086dc:	e020      	b.n	8008720 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc1b 	bl	8008f1c <USBD_CtlError>
              break;
 80086e6:	e01b      	b.n	8008720 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	885b      	ldrh	r3, [r3, #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10e      	bne.n	800870e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <USBD_StdEPReq+0xce>
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b80      	cmp	r3, #128	; 0x80
 80086fa:	d008      	beq.n	800870e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	88db      	ldrh	r3, [r3, #6]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 f828 	bl	800975e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fcae 	bl	8009070 <USBD_CtlSendStatus>

              break;
 8008714:	e004      	b.n	8008720 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fbff 	bl	8008f1c <USBD_CtlError>
              break;
 800871e:	bf00      	nop
          }
          break;
 8008720:	e0e0      	b.n	80088e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	2b02      	cmp	r3, #2
 800872a:	d002      	beq.n	8008732 <USBD_StdEPReq+0xf2>
 800872c:	2b03      	cmp	r3, #3
 800872e:	d015      	beq.n	800875c <USBD_StdEPReq+0x11c>
 8008730:	e026      	b.n	8008780 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <USBD_StdEPReq+0x112>
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d009      	beq.n	8008752 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f80b 	bl	800975e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 f807 	bl	800975e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008750:	e01c      	b.n	800878c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbe1 	bl	8008f1c <USBD_CtlError>
              break;
 800875a:	e017      	b.n	800878c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d112      	bne.n	800878a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876a:	2b00      	cmp	r3, #0
 800876c:	d004      	beq.n	8008778 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 f812 	bl	800979c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc79 	bl	8009070 <USBD_CtlSendStatus>
              }
              break;
 800877e:	e004      	b.n	800878a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbca 	bl	8008f1c <USBD_CtlError>
              break;
 8008788:	e000      	b.n	800878c <USBD_StdEPReq+0x14c>
              break;
 800878a:	bf00      	nop
          }
          break;
 800878c:	e0aa      	b.n	80088e4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	2b02      	cmp	r3, #2
 8008796:	d002      	beq.n	800879e <USBD_StdEPReq+0x15e>
 8008798:	2b03      	cmp	r3, #3
 800879a:	d032      	beq.n	8008802 <USBD_StdEPReq+0x1c2>
 800879c:	e097      	b.n	80088ce <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <USBD_StdEPReq+0x174>
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	2b80      	cmp	r3, #128	; 0x80
 80087a8:	d004      	beq.n	80087b4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbb5 	bl	8008f1c <USBD_CtlError>
                break;
 80087b2:	e091      	b.n	80088d8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0b      	bge.n	80087d4 <USBD_StdEPReq+0x194>
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	3310      	adds	r3, #16
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	4413      	add	r3, r2
 80087d0:	3304      	adds	r3, #4
 80087d2:	e00b      	b.n	80087ec <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	3304      	adds	r3, #4
 80087ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2202      	movs	r2, #2
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fbf8 	bl	8008ff0 <USBD_CtlSendData>
              break;
 8008800:	e06a      	b.n	80088d8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da11      	bge.n	800882e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3318      	adds	r3, #24
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d117      	bne.n	8008854 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb78 	bl	8008f1c <USBD_CtlError>
                  break;
 800882c:	e054      	b.n	80088d8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800882e:	7bbb      	ldrb	r3, [r7, #14]
 8008830:	f003 020f 	and.w	r2, r3, #15
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d104      	bne.n	8008854 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fb65 	bl	8008f1c <USBD_CtlError>
                  break;
 8008852:	e041      	b.n	80088d8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008858:	2b00      	cmp	r3, #0
 800885a:	da0b      	bge.n	8008874 <USBD_StdEPReq+0x234>
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	3310      	adds	r3, #16
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	4413      	add	r3, r2
 8008870:	3304      	adds	r3, #4
 8008872:	e00b      	b.n	800888c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <USBD_StdEPReq+0x25a>
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	d103      	bne.n	80088a2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e00e      	b.n	80088c0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 ff97 	bl	80097da <USBD_LL_IsStallEP>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e002      	b.n	80088c0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2202      	movs	r2, #2
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fb92 	bl	8008ff0 <USBD_CtlSendData>
              break;
 80088cc:	e004      	b.n	80088d8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb23 	bl	8008f1c <USBD_CtlError>
              break;
 80088d6:	bf00      	nop
          }
          break;
 80088d8:	e004      	b.n	80088e4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fb1d 	bl	8008f1c <USBD_CtlError>
          break;
 80088e2:	bf00      	nop
      }
      break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fb17 	bl	8008f1c <USBD_CtlError>
      break;
 80088ee:	bf00      	nop
  }

  return ret;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b01      	subs	r3, #1
 800891c:	2b06      	cmp	r3, #6
 800891e:	f200 8128 	bhi.w	8008b72 <USBD_GetDescriptor+0x276>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBD_GetDescriptor+0x2c>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008945 	.word	0x08008945
 800892c:	0800895d 	.word	0x0800895d
 8008930:	0800899d 	.word	0x0800899d
 8008934:	08008b73 	.word	0x08008b73
 8008938:	08008b73 	.word	0x08008b73
 800893c:	08008b13 	.word	0x08008b13
 8008940:	08008b3f 	.word	0x08008b3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
      break;
 800895a:	e112      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f107 0208 	add.w	r2, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800897e:	e100      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f107 0208 	add.w	r2, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
      break;
 800899a:	e0f2      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	885b      	ldrh	r3, [r3, #2]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b05      	cmp	r3, #5
 80089a4:	f200 80ac 	bhi.w	8008b00 <USBD_GetDescriptor+0x204>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <USBD_GetDescriptor+0xb4>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	08008a31 	.word	0x08008a31
 80089bc:	08008a65 	.word	0x08008a65
 80089c0:	08008a99 	.word	0x08008a99
 80089c4:	08008acd 	.word	0x08008acd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00b      	beq.n	80089ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	7c12      	ldrb	r2, [r2, #16]
 80089e0:	f107 0108 	add.w	r1, r7, #8
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ea:	e091      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fa94 	bl	8008f1c <USBD_CtlError>
            err++;
 80089f4:	7afb      	ldrb	r3, [r7, #11]
 80089f6:	3301      	adds	r3, #1
 80089f8:	72fb      	strb	r3, [r7, #11]
          break;
 80089fa:	e089      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	7c12      	ldrb	r2, [r2, #16]
 8008a14:	f107 0108 	add.w	r1, r7, #8
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1e:	e077      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa7a 	bl	8008f1c <USBD_CtlError>
            err++;
 8008a28:	7afb      	ldrb	r3, [r7, #11]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2e:	e06f      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
 8008a48:	f107 0108 	add.w	r1, r7, #8
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4798      	blx	r3
 8008a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a52:	e05d      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa60 	bl	8008f1c <USBD_CtlError>
            err++;
 8008a5c:	7afb      	ldrb	r3, [r7, #11]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	72fb      	strb	r3, [r7, #11]
          break;
 8008a62:	e055      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	7c12      	ldrb	r2, [r2, #16]
 8008a7c:	f107 0108 	add.w	r1, r7, #8
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a86:	e043      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa46 	bl	8008f1c <USBD_CtlError>
            err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
          break;
 8008a96:	e03b      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	7c12      	ldrb	r2, [r2, #16]
 8008ab0:	f107 0108 	add.w	r1, r7, #8
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aba:	e029      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fa2c 	bl	8008f1c <USBD_CtlError>
            err++;
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8008aca:	e021      	b.n	8008b10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	7c12      	ldrb	r2, [r2, #16]
 8008ae4:	f107 0108 	add.w	r1, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aee:	e00f      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa12 	bl	8008f1c <USBD_CtlError>
            err++;
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	3301      	adds	r3, #1
 8008afc:	72fb      	strb	r3, [r7, #11]
          break;
 8008afe:	e007      	b.n	8008b10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa0a 	bl	8008f1c <USBD_CtlError>
          err++;
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008b0e:	e038      	b.n	8008b82 <USBD_GetDescriptor+0x286>
 8008b10:	e037      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7c1b      	ldrb	r3, [r3, #16]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f107 0208 	add.w	r2, r7, #8
 8008b26:	4610      	mov	r0, r2
 8008b28:	4798      	blx	r3
 8008b2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b2c:	e029      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f9f3 	bl	8008f1c <USBD_CtlError>
        err++;
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b3c:	e021      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7c1b      	ldrb	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10d      	bne.n	8008b62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f107 0208 	add.w	r2, r7, #8
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
 8008b56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b60:	e00f      	b.n	8008b82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9d9 	bl	8008f1c <USBD_CtlError>
        err++;
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b70:	e007      	b.n	8008b82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9d1 	bl	8008f1c <USBD_CtlError>
      err++;
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b80:	bf00      	nop
  }

  if (err != 0U)
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d11c      	bne.n	8008bc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d011      	beq.n	8008bb2 <USBD_GetDescriptor+0x2b6>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	88db      	ldrh	r3, [r3, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00d      	beq.n	8008bb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88da      	ldrh	r2, [r3, #6]
 8008b9a:	893b      	ldrh	r3, [r7, #8]
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	bf28      	it	cs
 8008ba0:	4613      	movcs	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa1f 	bl	8008ff0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88db      	ldrh	r3, [r3, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d104      	bne.n	8008bc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa58 	bl	8009070 <USBD_CtlSendStatus>
 8008bc0:	e000      	b.n	8008bc4 <USBD_GetDescriptor+0x2c8>
    return;
 8008bc2:	bf00      	nop
    }
  }
}
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop

08008bcc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d130      	bne.n	8008c40 <USBD_SetAddress+0x74>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d12c      	bne.n	8008c40 <USBD_SetAddress+0x74>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	2b7f      	cmp	r3, #127	; 0x7f
 8008bec:	d828      	bhi.n	8008c40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d104      	bne.n	8008c0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f988 	bl	8008f1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c0c:	e01c      	b.n	8008c48 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7bfa      	ldrb	r2, [r7, #15]
 8008c12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fe09 	bl	8009832 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa25 	bl	8009070 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d004      	beq.n	8008c36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c34:	e008      	b.n	8008c48 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	e003      	b.n	8008c48 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f96a 	bl	8008f1c <USBD_CtlError>
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	4b41      	ldr	r3, [pc, #260]	; (8008d68 <USBD_SetConfig+0x118>)
 8008c62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c64:	4b40      	ldr	r3, [pc, #256]	; (8008d68 <USBD_SetConfig+0x118>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d904      	bls.n	8008c76 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f954 	bl	8008f1c <USBD_CtlError>
 8008c74:	e075      	b.n	8008d62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d002      	beq.n	8008c86 <USBD_SetConfig+0x36>
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d023      	beq.n	8008ccc <USBD_SetConfig+0x7c>
 8008c84:	e062      	b.n	8008d4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c86:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <USBD_SetConfig+0x118>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01a      	beq.n	8008cc4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c8e:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <USBD_SetConfig+0x118>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ca0:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <USBD_SetConfig+0x118>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff f9f4 	bl	8008094 <USBD_SetClassConfig>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d104      	bne.n	8008cbc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f931 	bl	8008f1c <USBD_CtlError>
            return;
 8008cba:	e052      	b.n	8008d62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9d7 	bl	8009070 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cc2:	e04e      	b.n	8008d62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f9d3 	bl	8009070 <USBD_CtlSendStatus>
        break;
 8008cca:	e04a      	b.n	8008d62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ccc:	4b26      	ldr	r3, [pc, #152]	; (8008d68 <USBD_SetConfig+0x118>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d112      	bne.n	8008cfa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008cdc:	4b22      	ldr	r3, [pc, #136]	; (8008d68 <USBD_SetConfig+0x118>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <USBD_SetConfig+0x118>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff f9f0 	bl	80080d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9bc 	bl	8009070 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cf8:	e033      	b.n	8008d62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <USBD_SetConfig+0x118>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d01d      	beq.n	8008d44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f9de 	bl	80080d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <USBD_SetConfig+0x118>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d20:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <USBD_SetConfig+0x118>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff f9b4 	bl	8008094 <USBD_SetClassConfig>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d104      	bne.n	8008d3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8f1 	bl	8008f1c <USBD_CtlError>
            return;
 8008d3a:	e012      	b.n	8008d62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f997 	bl	8009070 <USBD_CtlSendStatus>
        break;
 8008d42:	e00e      	b.n	8008d62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f993 	bl	8009070 <USBD_CtlSendStatus>
        break;
 8008d4a:	e00a      	b.n	8008d62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8e4 	bl	8008f1c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <USBD_SetConfig+0x118>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff f9b9 	bl	80080d2 <USBD_ClrClassConfig>
        break;
 8008d60:	bf00      	nop
    }
  }
}
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000013c 	.word	0x2000013c

08008d6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	88db      	ldrh	r3, [r3, #6]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d004      	beq.n	8008d88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f8cb 	bl	8008f1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d86:	e021      	b.n	8008dcc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	db17      	blt.n	8008dc2 <USBD_GetConfig+0x56>
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	dd02      	ble.n	8008d9c <USBD_GetConfig+0x30>
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d00b      	beq.n	8008db2 <USBD_GetConfig+0x46>
 8008d9a:	e012      	b.n	8008dc2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3308      	adds	r3, #8
 8008da6:	2201      	movs	r2, #1
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f920 	bl	8008ff0 <USBD_CtlSendData>
        break;
 8008db0:	e00c      	b.n	8008dcc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3304      	adds	r3, #4
 8008db6:	2201      	movs	r2, #1
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f918 	bl	8008ff0 <USBD_CtlSendData>
        break;
 8008dc0:	e004      	b.n	8008dcc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f8a9 	bl	8008f1c <USBD_CtlError>
        break;
 8008dca:	bf00      	nop
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	3b01      	subs	r3, #1
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d81e      	bhi.n	8008e28 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88db      	ldrh	r3, [r3, #6]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d004      	beq.n	8008dfc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f891 	bl	8008f1c <USBD_CtlError>
        break;
 8008dfa:	e01a      	b.n	8008e32 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f043 0202 	orr.w	r2, r3, #2
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	330c      	adds	r3, #12
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f8e5 	bl	8008ff0 <USBD_CtlSendData>
      break;
 8008e26:	e004      	b.n	8008e32 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f876 	bl	8008f1c <USBD_CtlError>
      break;
 8008e30:	bf00      	nop
  }
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b082      	sub	sp, #8
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	885b      	ldrh	r3, [r3, #2]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d106      	bne.n	8008e5a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f90b 	bl	8009070 <USBD_CtlSendStatus>
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d80b      	bhi.n	8008e90 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	885b      	ldrh	r3, [r3, #2]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10c      	bne.n	8008e9a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f8f1 	bl	8009070 <USBD_CtlSendStatus>
      }
      break;
 8008e8e:	e004      	b.n	8008e9a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f842 	bl	8008f1c <USBD_CtlError>
      break;
 8008e98:	e000      	b.n	8008e9c <USBD_ClrFeature+0x3a>
      break;
 8008e9a:	bf00      	nop
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	785a      	ldrb	r2, [r3, #1]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	3304      	adds	r3, #4
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3305      	adds	r3, #5
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	4413      	add	r3, r2
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	3306      	adds	r3, #6
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	3307      	adds	r3, #7
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	80da      	strh	r2, [r3, #6]

}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f26:	2180      	movs	r1, #128	; 0x80
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc18 	bl	800975e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fc14 	bl	800975e <USBD_LL_StallEP>
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b086      	sub	sp, #24
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	60b9      	str	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d032      	beq.n	8008fba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f834 	bl	8008fc2 <USBD_GetLen>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	75fa      	strb	r2, [r7, #23]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4413      	add	r3, r2
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	75fa      	strb	r2, [r7, #23]
 8008f80:	461a      	mov	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4413      	add	r3, r2
 8008f86:	2203      	movs	r2, #3
 8008f88:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f8a:	e012      	b.n	8008fb2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	60fa      	str	r2, [r7, #12]
 8008f92:	7dfa      	ldrb	r2, [r7, #23]
 8008f94:	1c51      	adds	r1, r2, #1
 8008f96:	75f9      	strb	r1, [r7, #23]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	440a      	add	r2, r1
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	75fa      	strb	r2, [r7, #23]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e8      	bne.n	8008f8c <USBD_GetString+0x4e>
    }
  }
}
 8008fba:	bf00      	nop
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008fce:	e005      	b.n	8008fdc <USBD_GetLen+0x1a>
  {
    len++;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1f5      	bne.n	8008fd0 <USBD_GetLen+0xe>
  }

  return len;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2202      	movs	r2, #2
 8009002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	2100      	movs	r1, #0
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fc29 	bl	8009870 <USBD_LL_Transmit>

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fc17 	bl	8009870 <USBD_LL_Transmit>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	2100      	movs	r1, #0
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fc28 	bl	80098b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2204      	movs	r2, #4
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fbf2 	bl	8009870 <USBD_LL_Transmit>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2205      	movs	r2, #5
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc02 	bl	80098b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090c0:	2200      	movs	r2, #0
 80090c2:	4912      	ldr	r1, [pc, #72]	; (800910c <MX_USB_DEVICE_Init+0x50>)
 80090c4:	4812      	ldr	r0, [pc, #72]	; (8009110 <MX_USB_DEVICE_Init+0x54>)
 80090c6:	f7fe ff8b 	bl	8007fe0 <USBD_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090d0:	f7f7 f9f2 	bl	80004b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80090d4:	490f      	ldr	r1, [pc, #60]	; (8009114 <MX_USB_DEVICE_Init+0x58>)
 80090d6:	480e      	ldr	r0, [pc, #56]	; (8009110 <MX_USB_DEVICE_Init+0x54>)
 80090d8:	f7fe ffad 	bl	8008036 <USBD_RegisterClass>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090e2:	f7f7 f9e9 	bl	80004b8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80090e6:	490c      	ldr	r1, [pc, #48]	; (8009118 <MX_USB_DEVICE_Init+0x5c>)
 80090e8:	4809      	ldr	r0, [pc, #36]	; (8009110 <MX_USB_DEVICE_Init+0x54>)
 80090ea:	f7fd ff5b 	bl	8006fa4 <USBD_MSC_RegisterStorage>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090f4:	f7f7 f9e0 	bl	80004b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090f8:	4805      	ldr	r0, [pc, #20]	; (8009110 <MX_USB_DEVICE_Init+0x54>)
 80090fa:	f7fe ffb5 	bl	8008068 <USBD_Start>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009104:	f7f7 f9d8 	bl	80004b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009108:	bf00      	nop
 800910a:	bd80      	pop	{r7, pc}
 800910c:	200000b0 	.word	0x200000b0
 8009110:	2000048c 	.word	0x2000048c
 8009114:	2000000c 	.word	0x2000000c
 8009118:	20000100 	.word	0x20000100

0800911c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2212      	movs	r2, #18
 800912c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800912e:	4b03      	ldr	r3, [pc, #12]	; (800913c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	200000cc 	.word	0x200000cc

08009140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	2204      	movs	r2, #4
 8009150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009152:	4b03      	ldr	r3, [pc, #12]	; (8009160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	200000e0 	.word	0x200000e0

08009164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d105      	bne.n	8009182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4907      	ldr	r1, [pc, #28]	; (8009198 <USBD_FS_ProductStrDescriptor+0x34>)
 800917a:	4808      	ldr	r0, [pc, #32]	; (800919c <USBD_FS_ProductStrDescriptor+0x38>)
 800917c:	f7ff fedf 	bl	8008f3e <USBD_GetString>
 8009180:	e004      	b.n	800918c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	4904      	ldr	r1, [pc, #16]	; (8009198 <USBD_FS_ProductStrDescriptor+0x34>)
 8009186:	4805      	ldr	r0, [pc, #20]	; (800919c <USBD_FS_ProductStrDescriptor+0x38>)
 8009188:	f7ff fed9 	bl	8008f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000750 	.word	0x20000750
 800919c:	08009a40 	.word	0x08009a40

080091a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	4904      	ldr	r1, [pc, #16]	; (80091c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091b0:	4804      	ldr	r0, [pc, #16]	; (80091c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091b2:	f7ff fec4 	bl	8008f3e <USBD_GetString>
  return USBD_StrDesc;
 80091b6:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20000750 	.word	0x20000750
 80091c4:	08009a54 	.word	0x08009a54

080091c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	221a      	movs	r2, #26
 80091d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091da:	f000 f843 	bl	8009264 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091de:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	200000e4 	.word	0x200000e4

080091ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4907      	ldr	r1, [pc, #28]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009202:	4808      	ldr	r0, [pc, #32]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009204:	f7ff fe9b 	bl	8008f3e <USBD_GetString>
 8009208:	e004      	b.n	8009214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4904      	ldr	r1, [pc, #16]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x34>)
 800920e:	4805      	ldr	r0, [pc, #20]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009210:	f7ff fe95 	bl	8008f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000750 	.word	0x20000750
 8009224:	08009a68 	.word	0x08009a68

08009228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d105      	bne.n	8009246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4907      	ldr	r1, [pc, #28]	; (800925c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800923e:	4808      	ldr	r0, [pc, #32]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009240:	f7ff fe7d 	bl	8008f3e <USBD_GetString>
 8009244:	e004      	b.n	8009250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800924a:	4805      	ldr	r0, [pc, #20]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800924c:	f7ff fe77 	bl	8008f3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009250:	4b02      	ldr	r3, [pc, #8]	; (800925c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009252:	4618      	mov	r0, r3
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000750 	.word	0x20000750
 8009260:	08009a74 	.word	0x08009a74

08009264 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800926a:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <Get_SerialNum+0x44>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009270:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <Get_SerialNum+0x48>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <Get_SerialNum+0x4c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800928a:	2208      	movs	r2, #8
 800928c:	4909      	ldr	r1, [pc, #36]	; (80092b4 <Get_SerialNum+0x50>)
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f814 	bl	80092bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009294:	2204      	movs	r2, #4
 8009296:	4908      	ldr	r1, [pc, #32]	; (80092b8 <Get_SerialNum+0x54>)
 8009298:	68b8      	ldr	r0, [r7, #8]
 800929a:	f000 f80f 	bl	80092bc <IntToUnicode>
  }
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	1ffff7e8 	.word	0x1ffff7e8
 80092ac:	1ffff7ec 	.word	0x1ffff7ec
 80092b0:	1ffff7f0 	.word	0x1ffff7f0
 80092b4:	200000e6 	.word	0x200000e6
 80092b8:	200000f6 	.word	0x200000f6

080092bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4613      	mov	r3, r2
 80092c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]
 80092d2:	e027      	b.n	8009324 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	0f1b      	lsrs	r3, r3, #28
 80092d8:	2b09      	cmp	r3, #9
 80092da:	d80b      	bhi.n	80092f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	0f1b      	lsrs	r3, r3, #28
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	4619      	mov	r1, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	440b      	add	r3, r1
 80092ec:	3230      	adds	r2, #48	; 0x30
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	e00a      	b.n	800930a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0f1b      	lsrs	r3, r3, #28
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	005b      	lsls	r3, r3, #1
 80092fe:	4619      	mov	r1, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	440b      	add	r3, r1
 8009304:	3237      	adds	r2, #55	; 0x37
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	3301      	adds	r3, #1
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	4413      	add	r3, r2
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	3301      	adds	r3, #1
 8009322:	75fb      	strb	r3, [r7, #23]
 8009324:	7dfa      	ldrb	r2, [r7, #23]
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	429a      	cmp	r2, r3
 800932a:	d3d3      	bcc.n	80092d4 <IntToUnicode+0x18>
  }
}
 800932c:	bf00      	nop
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	4603      	mov	r3, r0
 800933e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	return (USBD_OK);
 8009340:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr

0800934c <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_GetCardInfo(&hsd, &SDCardInfo);
 800935a:	4909      	ldr	r1, [pc, #36]	; (8009380 <STORAGE_GetCapacity_FS+0x34>)
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <STORAGE_GetCapacity_FS+0x38>)
 800935e:	f7fa fc63 	bl	8003c28 <HAL_SD_GetCardInfo>
	*block_num  = SDCardInfo.BlockNbr;
 8009362:	4b07      	ldr	r3, [pc, #28]	; (8009380 <STORAGE_GetCapacity_FS+0x34>)
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	601a      	str	r2, [r3, #0]
	*block_size = SDCardInfo.BlockSize;
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <STORAGE_GetCapacity_FS+0x34>)
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	801a      	strh	r2, [r3, #0]
	return (USBD_OK);
 8009374:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000950 	.word	0x20000950
 8009384:	20000404 	.word	0x20000404

08009388 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009392:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr

0800939e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	4603      	mov	r3, r0
 80093a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	return (USBD_OK);
 80093a8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr

080093b4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
 80093be:	461a      	mov	r2, r3
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]
 80093c4:	4613      	mov	r3, r2
 80093c6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, 10);
 80093c8:	89ba      	ldrh	r2, [r7, #12]
 80093ca:	230a      	movs	r3, #10
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4613      	mov	r3, r2
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	4805      	ldr	r0, [pc, #20]	; (80093ec <STORAGE_Read_FS+0x38>)
 80093d6:	f7f9 fee7 	bl	80031a8 <HAL_SD_ReadBlocks>
	HAL_SD_GetCardState(&hsd);
 80093da:	4804      	ldr	r0, [pc, #16]	; (80093ec <STORAGE_Read_FS+0x38>)
 80093dc:	f7fa fc4f 	bl	8003c7e <HAL_SD_GetCardState>
	return (USBD_OK);
 80093e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20000404 	.word	0x20000404

080093f0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	461a      	mov	r2, r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	4613      	mov	r3, r2
 8009402:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, 10);
 8009404:	89ba      	ldrh	r2, [r7, #12]
 8009406:	230a      	movs	r3, #10
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	4613      	mov	r3, r2
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	4805      	ldr	r0, [pc, #20]	; (8009428 <STORAGE_Write_FS+0x38>)
 8009412:	f7fa f8c3 	bl	800359c <HAL_SD_WriteBlocks>
	HAL_SD_GetCardState(&hsd);
 8009416:	4804      	ldr	r0, [pc, #16]	; (8009428 <STORAGE_Write_FS+0x38>)
 8009418:	f7fa fc31 	bl	8003c7e <HAL_SD_GetCardState>
	return (USBD_OK);
 800941c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000404 	.word	0x20000404

0800942c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	bc80      	pop	{r7}
 8009438:	4770      	bx	lr
	...

0800943c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <HAL_PCD_MspInit+0x44>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800944e:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <HAL_PCD_MspInit+0x48>)
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	4a0c      	ldr	r2, [pc, #48]	; (8009484 <HAL_PCD_MspInit+0x48>)
 8009454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009458:	61d3      	str	r3, [r2, #28]
 800945a:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <HAL_PCD_MspInit+0x48>)
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	2014      	movs	r0, #20
 800946c:	f7f7 faab 	bl	80009c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009470:	2014      	movs	r0, #20
 8009472:	f7f7 fac4 	bl	80009fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40005c00 	.word	0x40005c00
 8009484:	40021000 	.word	0x40021000

08009488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fe fe2a 	bl	80080f8 <USBD_LL_SetupStage>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	440b      	add	r3, r1
 80094cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	4619      	mov	r1, r3
 80094d6:	f7fe fe5a 	bl	800818e <USBD_LL_DataOutStage>
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	333c      	adds	r3, #60	; 0x3c
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	78fb      	ldrb	r3, [r7, #3]
 8009508:	4619      	mov	r1, r3
 800950a:	f7fe feb1 	bl	8008270 <USBD_LL_DataInStage>
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe ffc1 	bl	80084ac <USBD_LL_SOF>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800953a:	2301      	movs	r3, #1
 800953c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d001      	beq.n	800954a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009546:	f7f6 ffb7 	bl	80004b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe ff71 	bl	800843c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe ff2a 	bl	80083ba <USBD_LL_Reset>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe ff6b 	bl	800845a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800958c:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <HAL_PCD_SuspendCallback+0x30>)
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	4a03      	ldr	r2, [pc, #12]	; (80095a0 <HAL_PCD_SuspendCallback+0x30>)
 8009592:	f043 0306 	orr.w	r3, r3, #6
 8009596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	e000ed00 	.word	0xe000ed00

080095a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe ff65 	bl	8008482 <USBD_LL_Resume>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095c8:	4a23      	ldr	r2, [pc, #140]	; (8009658 <USBD_LL_Init+0x98>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a21      	ldr	r2, [pc, #132]	; (8009658 <USBD_LL_Init+0x98>)
 80095d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095d8:	4b1f      	ldr	r3, [pc, #124]	; (8009658 <USBD_LL_Init+0x98>)
 80095da:	4a20      	ldr	r2, [pc, #128]	; (800965c <USBD_LL_Init+0x9c>)
 80095dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095de:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <USBD_LL_Init+0x98>)
 80095e0:	2208      	movs	r2, #8
 80095e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095e4:	4b1c      	ldr	r3, [pc, #112]	; (8009658 <USBD_LL_Init+0x98>)
 80095e6:	2202      	movs	r2, #2
 80095e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <USBD_LL_Init+0x98>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095f0:	4b19      	ldr	r3, [pc, #100]	; (8009658 <USBD_LL_Init+0x98>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095f6:	4b18      	ldr	r3, [pc, #96]	; (8009658 <USBD_LL_Init+0x98>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095fc:	4816      	ldr	r0, [pc, #88]	; (8009658 <USBD_LL_Init+0x98>)
 80095fe:	f7f7 fcd3 	bl	8000fa8 <HAL_PCD_Init>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009608:	f7f6 ff56 	bl	80004b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009612:	2318      	movs	r3, #24
 8009614:	2200      	movs	r2, #0
 8009616:	2100      	movs	r1, #0
 8009618:	f7f9 f834 	bl	8002684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009622:	2358      	movs	r3, #88	; 0x58
 8009624:	2200      	movs	r2, #0
 8009626:	2180      	movs	r1, #128	; 0x80
 8009628:	f7f9 f82c 	bl	8002684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009632:	2398      	movs	r3, #152	; 0x98
 8009634:	2200      	movs	r2, #0
 8009636:	2181      	movs	r1, #129	; 0x81
 8009638:	f7f9 f824 	bl	8002684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009642:	23d8      	movs	r3, #216	; 0xd8
 8009644:	2200      	movs	r2, #0
 8009646:	2101      	movs	r1, #1
 8009648:	f7f9 f81c 	bl	8002684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000970 	.word	0x20000970
 800965c:	40005c00 	.word	0x40005c00

08009660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009676:	4618      	mov	r0, r3
 8009678:	f7f7 fda1 	bl	80011be <HAL_PCD_Start>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f96e 	bl	8009964 <USBD_Get_USB_Status>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	461a      	mov	r2, r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	70fb      	strb	r3, [r7, #3]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70bb      	strb	r3, [r7, #2]
 80096ac:	4613      	mov	r3, r2
 80096ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096be:	78bb      	ldrb	r3, [r7, #2]
 80096c0:	883a      	ldrh	r2, [r7, #0]
 80096c2:	78f9      	ldrb	r1, [r7, #3]
 80096c4:	f7f7 ff1b 	bl	80014fe <HAL_PCD_EP_Open>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f948 	bl	8009964 <USBD_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f7f7 ff62 	bl	80015ca <HAL_PCD_EP_Close>
 8009706:	4603      	mov	r3, r0
 8009708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 f929 	bl	8009964 <USBD_Get_USB_Status>
 8009712:	4603      	mov	r3, r0
 8009714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009716:	7bbb      	ldrb	r3, [r7, #14]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	4611      	mov	r1, r2
 800973e:	4618      	mov	r0, r3
 8009740:	f7f8 f8d6 	bl	80018f0 <HAL_PCD_EP_Flush>
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 f90a 	bl	8009964 <USBD_Get_USB_Status>
 8009750:	4603      	mov	r3, r0
 8009752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009754:	7bbb      	ldrb	r3, [r7, #14]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f7f8 f803 	bl	8001788 <HAL_PCD_EP_SetStall>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f8eb 	bl	8009964 <USBD_Get_USB_Status>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009792:	7bbb      	ldrb	r3, [r7, #14]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b6:	78fa      	ldrb	r2, [r7, #3]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f8 f844 	bl	8001848 <HAL_PCD_EP_ClrStall>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f8cc 	bl	8009964 <USBD_Get_USB_Status>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da0c      	bge.n	8009810 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	440b      	add	r3, r1
 800980a:	3302      	adds	r3, #2
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	e00b      	b.n	8009828 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009826:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	bc80      	pop	{r7}
 8009830:	4770      	bx	lr

08009832 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7f7 fe2f 	bl	80014b4 <HAL_PCD_SetAddress>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f881 	bl	8009964 <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009866:	7bbb      	ldrb	r3, [r7, #14]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	461a      	mov	r2, r3
 800987c:	460b      	mov	r3, r1
 800987e:	72fb      	strb	r3, [r7, #11]
 8009880:	4613      	mov	r3, r2
 8009882:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	7af9      	ldrb	r1, [r7, #11]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f7f7 ff33 	bl	8001702 <HAL_PCD_EP_Transmit>
 800989c:	4603      	mov	r3, r0
 800989e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 f85e 	bl	8009964 <USBD_Get_USB_Status>
 80098a8:	4603      	mov	r3, r0
 80098aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b086      	sub	sp, #24
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	60f8      	str	r0, [r7, #12]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	461a      	mov	r2, r3
 80098c2:	460b      	mov	r3, r1
 80098c4:	72fb      	strb	r3, [r7, #11]
 80098c6:	4613      	mov	r3, r2
 80098c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098d8:	893b      	ldrh	r3, [r7, #8]
 80098da:	7af9      	ldrb	r1, [r7, #11]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	f7f7 febc 	bl	800165a <HAL_PCD_EP_Receive>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f000 f83b 	bl	8009964 <USBD_Get_USB_Status>
 80098ee:	4603      	mov	r3, r0
 80098f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7f7 fede 	bl	80016d4 <HAL_PCD_EP_GetRxCount>
 8009918:	4603      	mov	r3, r0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800992c:	4b02      	ldr	r3, [pc, #8]	; (8009938 <USBD_static_malloc+0x14>)
}
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr
 8009938:	20000140 	.word	0x20000140

0800993c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]

}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	460b      	mov	r3, r1
 8009958:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr

08009964 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d817      	bhi.n	80099a8 <USBD_Get_USB_Status+0x44>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_Get_USB_Status+0x1c>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009991 	.word	0x08009991
 8009984:	08009997 	.word	0x08009997
 8009988:	0800999d 	.word	0x0800999d
 800998c:	080099a3 	.word	0x080099a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
    break;
 8009994:	e00b      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009996:	2302      	movs	r3, #2
 8009998:	73fb      	strb	r3, [r7, #15]
    break;
 800999a:	e008      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
    break;
 80099a0:	e005      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099a2:	2302      	movs	r3, #2
 80099a4:	73fb      	strb	r3, [r7, #15]
    break;
 80099a6:	e002      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099a8:	2302      	movs	r3, #2
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	bf00      	nop
  }
  return usb_status;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bc80      	pop	{r7}
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop

080099bc <__libc_init_array>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	2500      	movs	r5, #0
 80099c0:	4e0c      	ldr	r6, [pc, #48]	; (80099f4 <__libc_init_array+0x38>)
 80099c2:	4c0d      	ldr	r4, [pc, #52]	; (80099f8 <__libc_init_array+0x3c>)
 80099c4:	1ba4      	subs	r4, r4, r6
 80099c6:	10a4      	asrs	r4, r4, #2
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	d109      	bne.n	80099e0 <__libc_init_array+0x24>
 80099cc:	f000 f822 	bl	8009a14 <_init>
 80099d0:	2500      	movs	r5, #0
 80099d2:	4e0a      	ldr	r6, [pc, #40]	; (80099fc <__libc_init_array+0x40>)
 80099d4:	4c0a      	ldr	r4, [pc, #40]	; (8009a00 <__libc_init_array+0x44>)
 80099d6:	1ba4      	subs	r4, r4, r6
 80099d8:	10a4      	asrs	r4, r4, #2
 80099da:	42a5      	cmp	r5, r4
 80099dc:	d105      	bne.n	80099ea <__libc_init_array+0x2e>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099e4:	4798      	blx	r3
 80099e6:	3501      	adds	r5, #1
 80099e8:	e7ee      	b.n	80099c8 <__libc_init_array+0xc>
 80099ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099ee:	4798      	blx	r3
 80099f0:	3501      	adds	r5, #1
 80099f2:	e7f2      	b.n	80099da <__libc_init_array+0x1e>
 80099f4:	08009ad8 	.word	0x08009ad8
 80099f8:	08009ad8 	.word	0x08009ad8
 80099fc:	08009ad8 	.word	0x08009ad8
 8009a00:	08009adc 	.word	0x08009adc

08009a04 <memset>:
 8009a04:	4603      	mov	r3, r0
 8009a06:	4402      	add	r2, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
