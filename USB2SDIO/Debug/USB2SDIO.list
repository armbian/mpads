
USB2SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08009748  08009748  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009748  08009748  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000120  08009870  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20000c08  08009870  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017335  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003464  00000000  00000000  0003747e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0003b740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d581  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001232d  00000000  00000000  00059979  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009949f  00000000  00000000  0006bca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003874  00000000  00000000  001051c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000120 	.word	0x20000120
 8000200:	00000000 	.word	0x00000000
 8000204:	0800968c 	.word	0x0800968c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000124 	.word	0x20000124
 8000220:	0800968c 	.word	0x0800968c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa04 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f807 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f888 	bl	8000344 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000234:	f008 fd7e 	bl	8008d34 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000238:	f000 f85e 	bl	80002f8 <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x18>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b096      	sub	sp, #88	; 0x58
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000248:	2228      	movs	r2, #40	; 0x28
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f009 fa15 	bl	800967c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	f107 031c 	add.w	r3, r7, #28
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
 8000270:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800027c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000290:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000294:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f88e 	bl	80023bc <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002a6:	f000 f8d7 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c0:	f107 031c 	add.w	r3, r7, #28
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 faf8 	bl	80028bc <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002d2:	f000 f8c1 	bl	8000458 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002d6:	2310      	movs	r3, #16
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 fc57 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ec:	f000 f8b4 	bl	8000458 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_SDIO_SD_Init+0x44>)
 80002fe:	4a10      	ldr	r2, [pc, #64]	; (8000340 <MX_SDIO_SD_Init+0x48>)
 8000300:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_SDIO_SD_Init+0x44>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_SDIO_SD_Init+0x44>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_SDIO_SD_Init+0x44>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_SDIO_SD_Init+0x44>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_SDIO_SD_Init+0x44>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_SDIO_SD_Init+0x44>)
 8000322:	2203      	movs	r2, #3
 8000324:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_SDIO_SD_Init+0x44>)
 8000328:	f002 fcea 	bl	8002d00 <HAL_SD_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000332:	f000 f891 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200003b0 	.word	0x200003b0
 8000340:	40018000 	.word	0x40018000

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <MX_GPIO_Init+0x104>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a3a      	ldr	r2, [pc, #232]	; (8000448 <MX_GPIO_Init+0x104>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b38      	ldr	r3, [pc, #224]	; (8000448 <MX_GPIO_Init+0x104>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b35      	ldr	r3, [pc, #212]	; (8000448 <MX_GPIO_Init+0x104>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a34      	ldr	r2, [pc, #208]	; (8000448 <MX_GPIO_Init+0x104>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <MX_GPIO_Init+0x104>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_GPIO_Init+0x104>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <MX_GPIO_Init+0x104>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <MX_GPIO_Init+0x104>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0310 	and.w	r3, r3, #16
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b29      	ldr	r3, [pc, #164]	; (8000448 <MX_GPIO_Init+0x104>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a28      	ldr	r2, [pc, #160]	; (8000448 <MX_GPIO_Init+0x104>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_GPIO_Init+0x104>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PORT0_GPIO_Port, PORT0_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4823      	ldr	r0, [pc, #140]	; (800044c <MX_GPIO_Init+0x108>)
 80003c0:	f000 fc34 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PORT1_Pin|PORT2_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80003ca:	4820      	ldr	r0, [pc, #128]	; (800044c <MX_GPIO_Init+0x108>)
 80003cc:	f000 fc2e 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PORT3_Pin|PORT4_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	21c0      	movs	r1, #192	; 0xc0
 80003d4:	481e      	ldr	r0, [pc, #120]	; (8000450 <MX_GPIO_Init+0x10c>)
 80003d6:	f000 fc29 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PORT5_Pin|PORT6_Pin|PORT7_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80003e0:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_GPIO_Init+0x110>)
 80003e2:	f000 fc23 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PORT0_Pin PORT1_Pin PORT2_Pin */
  GPIO_InitStruct.Pin = PORT0_Pin|PORT1_Pin|PORT2_Pin;
 80003e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4813      	ldr	r0, [pc, #76]	; (800044c <MX_GPIO_Init+0x108>)
 8000400:	f000 faaa 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PORT3_Pin PORT4_Pin */
  GPIO_InitStruct.Pin = PORT3_Pin|PORT4_Pin;
 8000404:	23c0      	movs	r3, #192	; 0xc0
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_GPIO_Init+0x10c>)
 800041c:	f000 fa9c 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PORT5_Pin PORT6_Pin PORT7_Pin */
  GPIO_InitStruct.Pin = PORT5_Pin|PORT6_Pin|PORT7_Pin;
 8000420:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2302      	movs	r3, #2
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4806      	ldr	r0, [pc, #24]	; (8000454 <MX_GPIO_Init+0x110>)
 800043a:	f000 fa8d 	bl	8000958 <HAL_GPIO_Init>

}
 800043e:	bf00      	nop
 8000440:	3720      	adds	r7, #32
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40011000 	.word	0x40011000
 8000454:	40010800 	.word	0x40010800

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045e:	e7fe      	b.n	800045e <Error_Handler+0x6>

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <HAL_SD_MspInit+0xa4>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d13c      	bne.n	800055e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <HAL_SD_MspInit+0xa8>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a20      	ldr	r2, [pc, #128]	; (800056c <HAL_SD_MspInit+0xa8>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6153      	str	r3, [r2, #20]
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <HAL_SD_MspInit+0xa8>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <HAL_SD_MspInit+0xa8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1a      	ldr	r2, [pc, #104]	; (800056c <HAL_SD_MspInit+0xa8>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_SD_MspInit+0xa8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_SD_MspInit+0xa8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_SD_MspInit+0xa8>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_SD_MspInit+0xa8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800052c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	2303      	movs	r3, #3
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	4619      	mov	r1, r3
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <HAL_SD_MspInit+0xac>)
 8000542:	f000 fa09 	bl	8000958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000546:	2304      	movs	r3, #4
 8000548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054a:	2302      	movs	r3, #2
 800054c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	4619      	mov	r1, r3
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <HAL_SD_MspInit+0xb0>)
 800055a:	f000 f9fd 	bl	8000958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40018000 	.word	0x40018000
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000
 8000574:	40011400 	.word	0x40011400

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f87f 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ce:	f000 fc76 	bl	8000ebe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000091c 	.word	0x2000091c

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060e:	f7ff ffe5 	bl	80005dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f009 f80f 	bl	8009634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe05 	bl	8000224 <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r3, =_sidata
 800061c:	08009750 	.word	0x08009750
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000624:	20000120 	.word	0x20000120
  ldr r2, =_sbss
 8000628:	20000120 	.word	0x20000120
  ldr r3, = _ebss
 800062c:	20000c08 	.word	0x20000c08

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f945 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff ff06 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f95d 	bl	800093e <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f925 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000434 	.word	0x20000434

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000434 	.word	0x20000434

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_Delay+0x40>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000008 	.word	0x20000008

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <__NVIC_EnableIRQ+0x34>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff90 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff2d 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff42 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa2 	bl	8000890 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b08b      	sub	sp, #44	; 0x2c
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e133      	b.n	8000bd4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800096c:	2201      	movs	r2, #1
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	4013      	ands	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	429a      	cmp	r2, r3
 8000986:	f040 8122 	bne.w	8000bce <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b12      	cmp	r3, #18
 8000990:	d034      	beq.n	80009fc <HAL_GPIO_Init+0xa4>
 8000992:	2b12      	cmp	r3, #18
 8000994:	d80d      	bhi.n	80009b2 <HAL_GPIO_Init+0x5a>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d02b      	beq.n	80009f2 <HAL_GPIO_Init+0x9a>
 800099a:	2b02      	cmp	r3, #2
 800099c:	d804      	bhi.n	80009a8 <HAL_GPIO_Init+0x50>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d031      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d01c      	beq.n	80009e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009a6:	e048      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d043      	beq.n	8000a34 <HAL_GPIO_Init+0xdc>
 80009ac:	2b11      	cmp	r3, #17
 80009ae:	d01b      	beq.n	80009e8 <HAL_GPIO_Init+0x90>
          break;
 80009b0:	e043      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009b2:	4a8f      	ldr	r2, [pc, #572]	; (8000bf0 <HAL_GPIO_Init+0x298>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d026      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
 80009b8:	4a8d      	ldr	r2, [pc, #564]	; (8000bf0 <HAL_GPIO_Init+0x298>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d806      	bhi.n	80009cc <HAL_GPIO_Init+0x74>
 80009be:	4a8d      	ldr	r2, [pc, #564]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d020      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
 80009c4:	4a8c      	ldr	r2, [pc, #560]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d01d      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
          break;
 80009ca:	e036      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009cc:	4a8b      	ldr	r2, [pc, #556]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d019      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
 80009d2:	4a8b      	ldr	r2, [pc, #556]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d016      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
 80009d8:	4a8a      	ldr	r2, [pc, #552]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0xae>
          break;
 80009de:	e02c      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e028      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	3304      	adds	r3, #4
 80009ee:	623b      	str	r3, [r7, #32]
          break;
 80009f0:	e023      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	3308      	adds	r3, #8
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e01e      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	330c      	adds	r3, #12
 8000a02:	623b      	str	r3, [r7, #32]
          break;
 8000a04:	e019      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e012      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d105      	bne.n	8000a28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	611a      	str	r2, [r3, #16]
          break;
 8000a26:	e008      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	615a      	str	r2, [r3, #20]
          break;
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
          break;
 8000a38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2bff      	cmp	r3, #255	; 0xff
 8000a3e:	d801      	bhi.n	8000a44 <HAL_GPIO_Init+0xec>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	e001      	b.n	8000a48 <HAL_GPIO_Init+0xf0>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3304      	adds	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	2bff      	cmp	r3, #255	; 0xff
 8000a4e:	d802      	bhi.n	8000a56 <HAL_GPIO_Init+0xfe>
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x104>
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	210f      	movs	r1, #15
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	6a39      	ldr	r1, [r7, #32]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	431a      	orrs	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80a2 	beq.w	8000bce <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8a:	4b5f      	ldr	r3, [pc, #380]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a5e      	ldr	r2, [pc, #376]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b5c      	ldr	r3, [pc, #368]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa2:	4a5a      	ldr	r2, [pc, #360]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <HAL_GPIO_Init+0x2b8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01f      	beq.n	8000b0e <HAL_GPIO_Init+0x1b6>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <HAL_GPIO_Init+0x2bc>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x1b2>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <HAL_GPIO_Init+0x2c0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x1ae>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4e      	ldr	r2, [pc, #312]	; (8000c1c <HAL_GPIO_Init+0x2c4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x1aa>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4d      	ldr	r2, [pc, #308]	; (8000c20 <HAL_GPIO_Init+0x2c8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x1a6>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <HAL_GPIO_Init+0x2cc>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x1a2>
 8000af6:	2305      	movs	r3, #5
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000afa:	2306      	movs	r3, #6
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x1b8>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b20:	493a      	ldr	r1, [pc, #232]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	493a      	ldr	r1, [pc, #232]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
 8000b46:	e006      	b.n	8000b56 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4935      	ldr	r1, [pc, #212]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b62:	4b31      	ldr	r3, [pc, #196]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4930      	ldr	r1, [pc, #192]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	604b      	str	r3, [r1, #4]
 8000b6e:	e006      	b.n	8000b7e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	43db      	mvns	r3, r3
 8000b78:	492b      	ldr	r1, [pc, #172]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	4926      	ldr	r1, [pc, #152]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	608b      	str	r3, [r1, #8]
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4921      	ldr	r1, [pc, #132]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	491c      	ldr	r1, [pc, #112]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60cb      	str	r3, [r1, #12]
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	4917      	ldr	r1, [pc, #92]	; (8000c28 <HAL_GPIO_Init+0x2d0>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f47f aec4 	bne.w	800096c <HAL_GPIO_Init+0x14>
  }
}
 8000be4:	bf00      	nop
 8000be6:	372c      	adds	r7, #44	; 0x2c
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	10210000 	.word	0x10210000
 8000bf4:	10110000 	.word	0x10110000
 8000bf8:	10120000 	.word	0x10120000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10320000 	.word	0x10320000
 8000c04:	10220000 	.word	0x10220000
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40011400 	.word	0x40011400
 8000c20:	40011800 	.word	0x40011800
 8000c24:	40011c00 	.word	0x40011c00
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c48:	e003      	b.n	8000c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	611a      	str	r2, [r3, #16]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	b08b      	sub	sp, #44	; 0x2c
 8000c60:	af06      	add	r7, sp, #24
 8000c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e0fd      	b.n	8000e6a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d106      	bne.n	8000c88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f008 fa16 	bl	80090b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fd11 	bl	80046bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	687e      	ldr	r6, [r7, #4]
 8000ca2:	466d      	mov	r5, sp
 8000ca4:	f106 0410 	add.w	r4, r6, #16
 8000ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	602b      	str	r3, [r5, #0]
 8000cb0:	1d33      	adds	r3, r6, #4
 8000cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb4:	6838      	ldr	r0, [r7, #0]
 8000cb6:	f003 fcdb 	bl	8004670 <USB_CoreInit>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e0ce      	b.n	8000e6a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fd0c 	bl	80046f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e04c      	b.n	8000d78 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	440b      	add	r3, r1
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3336      	adds	r3, #54	; 0x36
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	440b      	add	r3, r1
 8000d30:	3303      	adds	r3, #3
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	3338      	adds	r3, #56	; 0x38
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	333c      	adds	r3, #60	; 0x3c
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3340      	adds	r3, #64	; 0x40
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	3301      	adds	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3ad      	bcc.n	8000cde <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e044      	b.n	8000e12 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000df6:	7bfa      	ldrb	r2, [r7, #15]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3b5      	bcc.n	8000d88 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	687e      	ldr	r6, [r7, #4]
 8000e24:	466d      	mov	r5, sp
 8000e26:	f106 0410 	add.w	r4, r6, #16
 8000e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	602b      	str	r3, [r5, #0]
 8000e32:	1d33      	adds	r3, r6, #4
 8000e34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f003 fc66 	bl	8004708 <USB_DevInit>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2202      	movs	r2, #2
 8000e46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00d      	b.n	8000e6a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 fc16 	bl	8006694 <USB_DevDisconnect>

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <HAL_PCD_Start+0x16>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e016      	b.n	8000eb6 <HAL_PCD_Start+0x44>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fbfb 	bl	8004690 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f008 fb92 	bl	80095c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 fbea 	bl	8006680 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b088      	sub	sp, #32
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f005 fbec 	bl	80066a8 <USB_ReadInterrupts>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eda:	d102      	bne.n	8000ee2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fb8e 	bl	80015fe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fbde 	bl	80066a8 <USB_ReadInterrupts>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef6:	d112      	bne.n	8000f1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f008 f94a 	bl	80091aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f925 	bl	8001168 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f005 fbc0 	bl	80066a8 <USB_ReadInterrupts>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f32:	d10b      	bne.n	8000f4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f46:	b292      	uxth	r2, r2
 8000f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 fba9 	bl	80066a8 <USB_ReadInterrupts>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f60:	d10b      	bne.n	8000f7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f74:	b292      	uxth	r2, r2
 8000f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 fb92 	bl	80066a8 <USB_ReadInterrupts>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f8e:	d126      	bne.n	8000fde <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0204 	bic.w	r2, r2, #4
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0208 	bic.w	r2, r2, #8
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f008 f92b 	bl	800921c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fb60 	bl	80066a8 <USB_ReadInterrupts>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ff2:	f040 8084 	bne.w	80010fe <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	77fb      	strb	r3, [r7, #31]
 8000ffa:	e011      	b.n	8001020 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	441a      	add	r2, r3
 8001008:	7ffb      	ldrb	r3, [r7, #31]
 800100a:	8812      	ldrh	r2, [r2, #0]
 800100c:	b292      	uxth	r2, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	f107 0120 	add.w	r1, r7, #32
 8001014:	440b      	add	r3, r1
 8001016:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	3301      	adds	r3, #1
 800101e:	77fb      	strb	r3, [r7, #31]
 8001020:	7ffb      	ldrb	r3, [r7, #31]
 8001022:	2b07      	cmp	r3, #7
 8001024:	d9ea      	bls.n	8000ffc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800102e:	b29a      	uxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	b292      	uxth	r2, r2
 800103a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	b292      	uxth	r2, r2
 8001052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001056:	bf00      	nop
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001060:	b29b      	uxth	r3, r3
 8001062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f6      	beq.n	8001058 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107c:	b292      	uxth	r2, r2
 800107e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	77fb      	strb	r3, [r7, #31]
 8001086:	e010      	b.n	80010aa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
 8001090:	7ffa      	ldrb	r2, [r7, #31]
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	440a      	add	r2, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	f107 0120 	add.w	r1, r7, #32
 800109c:	440b      	add	r3, r1
 800109e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80010a2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
 80010a6:	3301      	adds	r3, #1
 80010a8:	77fb      	strb	r3, [r7, #31]
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d9eb      	bls.n	8001088 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0208 	orr.w	r2, r2, #8
 80010c2:	b292      	uxth	r2, r2
 80010c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010da:	b292      	uxth	r2, r2
 80010dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0204 	orr.w	r2, r2, #4
 80010f2:	b292      	uxth	r2, r2
 80010f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f008 f875 	bl	80091e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fad0 	bl	80066a8 <USB_ReadInterrupts>
 8001108:	4603      	mov	r3, r0
 800110a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001112:	d10e      	bne.n	8001132 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111c:	b29a      	uxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001126:	b292      	uxth	r2, r2
 8001128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f008 f82e 	bl	800918e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fab6 	bl	80066a8 <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001146:	d10b      	bne.n	8001160 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_PCD_SetAddress+0x1a>
 800117e:	2302      	movs	r3, #2
 8001180:	e013      	b.n	80011aa <HAL_PCD_SetAddress+0x42>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	78fa      	ldrb	r2, [r7, #3]
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f005 fa5d 	bl	800665a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	4608      	mov	r0, r1
 80011bc:	4611      	mov	r1, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	70fb      	strb	r3, [r7, #3]
 80011c4:	460b      	mov	r3, r1
 80011c6:	803b      	strh	r3, [r7, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da0e      	bge.n	80011f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2201      	movs	r2, #1
 80011f2:	705a      	strb	r2, [r3, #1]
 80011f4:	e00e      	b.n	8001214 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f003 0207 	and.w	r2, r3, #7
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	b2da      	uxtb	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001220:	883a      	ldrh	r2, [r7, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	78ba      	ldrb	r2, [r7, #2]
 800122a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d102      	bne.n	800124a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_PCD_EP_Open+0xa6>
 8001254:	2302      	movs	r3, #2
 8001256:	e00e      	b.n	8001276 <HAL_PCD_EP_Open+0xc4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa84 	bl	8004774 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001274:	7afb      	ldrb	r3, [r7, #11]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800128a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da0e      	bge.n	80012b0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	705a      	strb	r2, [r3, #1]
 80012ae:	e00e      	b.n	80012ce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0207 	and.w	r2, r3, #7
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_PCD_EP_Close+0x6a>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e00e      	b.n	8001306 <HAL_PCD_EP_Close+0x88>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fda6 	bl	8004e48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	460b      	mov	r3, r1
 800131c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	f003 0207 	and.w	r2, r3, #7
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2200      	movs	r2, #0
 800134c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6979      	ldr	r1, [r7, #20]
 800136a:	4618      	mov	r0, r3
 800136c:	f003 ff58 	bl	8005220 <USB_EPStartXfer>
 8001370:	e005      	b.n	800137e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6979      	ldr	r1, [r7, #20]
 8001378:	4618      	mov	r0, r3
 800137a:	f003 ff51 	bl	8005220 <USB_EPStartXfer>
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2201      	movs	r2, #1
 8001400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	b2da      	uxtb	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6979      	ldr	r1, [r7, #20]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fefe 	bl	8005220 <USB_EPStartXfer>
 8001424:	e005      	b.n	8001432 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fef7 	bl	8005220 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0207 	and.w	r2, r3, #7
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	d901      	bls.n	800145a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e04c      	b.n	80014f4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800145a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da0e      	bge.n	8001480 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2201      	movs	r2, #1
 800147c:	705a      	strb	r2, [r3, #1]
 800147e:	e00c      	b.n	800149a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_PCD_EP_SetStall+0x7e>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e01c      	b.n	80014f4 <HAL_PCD_EP_SetStall+0xb8>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 ffc9 	bl	8006460 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f005 f8ee 	bl	80066c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 020f 	and.w	r2, r3, #15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	d901      	bls.n	800151a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e040      	b.n	800159c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da0e      	bge.n	8001540 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	e00e      	b.n	800155e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0207 	and.w	r2, r3, #7
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	b2da      	uxtb	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_PCD_EP_ClrStall+0x82>
 800157a:	2302      	movs	r3, #2
 800157c:	e00e      	b.n	800159c <HAL_PCD_EP_ClrStall+0xa0>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	4618      	mov	r0, r3
 800158e:	f004 ffb7 	bl	8006500 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PCD_EP_Flush+0x1a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e01b      	b.n	80015f6 <HAL_PCD_EP_Flush+0x52>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80015c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da09      	bge.n	80015e2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f003 f8b4 	bl	8004748 <USB_FlushTxFifo>
 80015e0:	e004      	b.n	80015ec <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f8b9 	bl	800475e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08e      	sub	sp, #56	; 0x38
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001606:	e2df      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001610:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800161e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 8158 	bne.w	80018d8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d152      	bne.n	80016d8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800163e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001642:	81fb      	strh	r3, [r7, #14]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800164e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001652:	b29b      	uxth	r3, r3
 8001654:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3328      	adds	r3, #40	; 0x28
 800165a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001664:	b29b      	uxth	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	3302      	adds	r3, #2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4413      	add	r3, r2
 800167a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	441a      	add	r2, r3
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001696:	2100      	movs	r1, #0
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f007 fd5e 	bl	800915a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 828e 	beq.w	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f040 8289 	bne.w	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b292      	uxth	r2, r2
 80016ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016d6:	e277      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d034      	beq.n	800175c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4413      	add	r3, r2
 8001706:	3306      	adds	r3, #6
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001730:	b29b      	uxth	r3, r3
 8001732:	f005 f817 	bl	8006764 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001742:	4013      	ands	r3, r2
 8001744:	823b      	strh	r3, [r7, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	8a3a      	ldrh	r2, [r7, #16]
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	b292      	uxth	r2, r2
 8001752:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f007 fcd3 	bl	8009100 <HAL_PCD_SetupStageCallback>
 800175a:	e235      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001760:	2b00      	cmp	r3, #0
 8001762:	f280 8231 	bge.w	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29a      	uxth	r2, r3
 800176e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001772:	4013      	ands	r3, r2
 8001774:	83bb      	strh	r3, [r7, #28]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	8bba      	ldrh	r2, [r7, #28]
 800177c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001780:	b292      	uxth	r2, r2
 8001782:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178c:	b29b      	uxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	3306      	adds	r3, #6
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <PCD_EP_ISR_Handler+0x1ee>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d015      	beq.n	80017ec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	6959      	ldr	r1, [r3, #20]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	f004 ffc7 	bl	8006764 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	441a      	add	r2, r3
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f007 fc9c 	bl	8009124 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4413      	add	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d112      	bne.n	800183a <PCD_EP_ISR_Handler+0x23c>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800181e:	b29a      	uxth	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	801a      	strh	r2, [r3, #0]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800182e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001832:	b29a      	uxth	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	e02f      	b.n	800189a <PCD_EP_ISR_Handler+0x29c>
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b3e      	cmp	r3, #62	; 0x3e
 8001840:	d813      	bhi.n	800186a <PCD_EP_ISR_Handler+0x26c>
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <PCD_EP_ISR_Handler+0x25e>
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	3301      	adds	r3, #1
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185e:	b29b      	uxth	r3, r3
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	b29a      	uxth	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	e017      	b.n	800189a <PCD_EP_ISR_Handler+0x29c>
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <PCD_EP_ISR_Handler+0x286>
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	3b01      	subs	r3, #1
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
 8001884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001886:	b29b      	uxth	r3, r3
 8001888:	029b      	lsls	r3, r3, #10
 800188a:	b29b      	uxth	r3, r3
 800188c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001894:	b29a      	uxth	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018aa:	827b      	strh	r3, [r7, #18]
 80018ac:	8a7b      	ldrh	r3, [r7, #18]
 80018ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018b2:	827b      	strh	r3, [r7, #18]
 80018b4:	8a7b      	ldrh	r3, [r7, #18]
 80018b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018ba:	827b      	strh	r3, [r7, #18]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	8a7b      	ldrh	r3, [r7, #18]
 80018c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	8013      	strh	r3, [r2, #0]
 80018d6:	e177      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f280 80ea 	bge.w	8001ac8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29a      	uxth	r2, r3
 8001906:	f640 738f 	movw	r3, #3983	; 0xf8f
 800190a:	4013      	ands	r3, r2
 800190c:	853b      	strh	r3, [r7, #40]	; 0x28
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800191e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001922:	b292      	uxth	r2, r2
 8001924:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001926:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	7b1b      	ldrb	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d122      	bne.n	800198a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800194c:	b29b      	uxth	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	3306      	adds	r3, #6
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800196e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8087 	beq.w	8001a84 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	6959      	ldr	r1, [r3, #20]
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	88da      	ldrh	r2, [r3, #6]
 8001982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001984:	f004 feee 	bl	8006764 <USB_ReadPMA>
 8001988:	e07c      	b.n	8001a84 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d108      	bne.n	80019a4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001992:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001994:	461a      	mov	r2, r3
 8001996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f923 	bl	8001be4 <HAL_PCD_EP_DB_Receive>
 800199e:	4603      	mov	r3, r0
 80019a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019a2:	e06f      	b.n	8001a84 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	847b      	strh	r3, [r7, #34]	; 0x22
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	441a      	add	r2, r3
 80019ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d021      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	3302      	adds	r3, #2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a26:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02a      	beq.n	8001a84 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	6959      	ldr	r1, [r3, #20]
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	891a      	ldrh	r2, [r3, #8]
 8001a3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a3c:	f004 fe92 	bl	8006764 <USB_ReadPMA>
 8001a40:	e020      	b.n	8001a84 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	3306      	adds	r3, #6
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	895a      	ldrh	r2, [r3, #10]
 8001a7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a80:	f004 fe70 	bl	8006764 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8a:	441a      	add	r2, r3
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a96:	441a      	add	r2, r3
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <PCD_EP_ISR_Handler+0x4b0>
 8001aa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d206      	bcs.n	8001abc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f007 fb35 	bl	8009124 <HAL_PCD_DataOutStageCallback>
 8001aba:	e005      	b.n	8001ac8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fbac 	bl	8005220 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ac8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d07a      	beq.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ad2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b00:	843b      	strh	r3, [r7, #32]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	441a      	add	r2, r3
 8001b10:	8c3b      	ldrh	r3, [r7, #32]
 8001b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	78db      	ldrb	r3, [r3, #3]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d108      	bne.n	8001b38 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d146      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d141      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b60:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d906      	bls.n	8001b7a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	8bfb      	ldrh	r3, [r7, #30]
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	e002      	b.n	8001b80 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f007 fae3 	bl	800915a <HAL_PCD_DataInStageCallback>
 8001b94:	e018      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	8bfb      	ldrh	r3, [r7, #30]
 8001b9c:	441a      	add	r2, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	8bfb      	ldrh	r3, [r7, #30]
 8001ba8:	441a      	add	r2, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fb33 	bl	8005220 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001bba:	e005      	b.n	8001bc8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001bbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f91b 	bl	8001dfe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f6ff ad17 	blt.w	8001608 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3738      	adds	r7, #56	; 0x38
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d07e      	beq.n	8001cfa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3302      	adds	r3, #2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	8b7b      	ldrh	r3, [r7, #26]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d306      	bcc.n	8001c3e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	8b7b      	ldrh	r3, [r7, #26]
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	e002      	b.n	8001c44 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d123      	bne.n	8001c94 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c66:	833b      	strh	r3, [r7, #24]
 8001c68:	8b3b      	ldrh	r3, [r7, #24]
 8001c6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c6e:	833b      	strh	r3, [r7, #24]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	441a      	add	r2, r3
 8001c7e:	8b3b      	ldrh	r3, [r7, #24]
 8001c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01f      	beq.n	8001cde <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb8:	82fb      	strh	r3, [r7, #22]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8afb      	ldrh	r3, [r7, #22]
 8001cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cde:	8b7b      	ldrh	r3, [r7, #26]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8087 	beq.w	8001df4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	6959      	ldr	r1, [r3, #20]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	891a      	ldrh	r2, [r3, #8]
 8001cf2:	8b7b      	ldrh	r3, [r7, #26]
 8001cf4:	f004 fd36 	bl	8006764 <USB_ReadPMA>
 8001cf8:	e07c      	b.n	8001df4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3306      	adds	r3, #6
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	699a      	ldr	r2, [r3, #24]
 8001d28:	8b7b      	ldrh	r3, [r7, #26]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d306      	bcc.n	8001d3c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	8b7b      	ldrh	r3, [r7, #26]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	619a      	str	r2, [r3, #24]
 8001d3a:	e002      	b.n	8001d42 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d123      	bne.n	8001d92 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d64:	83fb      	strh	r3, [r7, #30]
 8001d66:	8bfb      	ldrh	r3, [r7, #30]
 8001d68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d6c:	83fb      	strh	r3, [r7, #30]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	441a      	add	r2, r3
 8001d7c:	8bfb      	ldrh	r3, [r7, #30]
 8001d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11f      	bne.n	8001ddc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db6:	83bb      	strh	r3, [r7, #28]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	441a      	add	r2, r3
 8001dc6:	8bbb      	ldrh	r3, [r7, #28]
 8001dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001ddc:	8b7b      	ldrh	r3, [r7, #26]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6959      	ldr	r1, [r3, #20]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	895a      	ldrh	r2, [r3, #10]
 8001dee:	8b7b      	ldrh	r3, [r7, #26]
 8001df0:	f004 fcb8 	bl	8006764 <USB_ReadPMA>
    }
  }

  return count;
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b092      	sub	sp, #72	; 0x48
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8132 	beq.w	800207c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d906      	bls.n	8001e5a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	619a      	str	r2, [r3, #24]
 8001e58:	e002      	b.n	8001e60 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d12c      	bne.n	8001ec2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f007 f973 	bl	800915a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 822f 	beq.w	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	827b      	strh	r3, [r7, #18]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	441a      	add	r2, r3
 8001eaa:	8a7b      	ldrh	r3, [r7, #18]
 8001eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	8013      	strh	r3, [r2, #0]
 8001ec0:	e20d      	b.n	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01f      	beq.n	8001f0c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	441a      	add	r2, r3
 8001ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f040 81e3 	bne.w	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f1e:	441a      	add	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f2a:	441a      	add	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d309      	bcc.n	8001f50 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	1ad2      	subs	r2, r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	e014      	b.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f64:	e009      	b.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d155      	bne.n	800202e <HAL_PCD_EP_DB_Transmit+0x230>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4413      	add	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	011a      	lsls	r2, r3, #4
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d112      	bne.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	801a      	strh	r2, [r3, #0]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	801a      	strh	r2, [r3, #0]
 8001fd4:	e047      	b.n	8002066 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001fda:	d811      	bhi.n	8002000 <HAL_PCD_EP_DB_Transmit+0x202>
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	3301      	adds	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	e032      	b.n	8002066 <HAL_PCD_EP_DB_Transmit+0x268>
 8002000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 8002006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_PCD_EP_DB_Transmit+0x218>
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	b29b      	uxth	r3, r3
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	b29b      	uxth	r3, r3
 800201e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002026:	b29a      	uxth	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	801a      	strh	r2, [r3, #0]
 800202c:	e01b      	b.n	8002066 <HAL_PCD_EP_DB_Transmit+0x268>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d117      	bne.n	8002066 <HAL_PCD_EP_DB_Transmit+0x268>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	4413      	add	r3, r2
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	011a      	lsls	r2, r3, #4
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	4413      	add	r3, r2
 8002058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	b29a      	uxth	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	891a      	ldrh	r2, [r3, #8]
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	b29b      	uxth	r3, r3
 8002076:	f004 fb31 	bl	80066dc <USB_WritePMA>
 800207a:	e130      	b.n	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002084:	b29b      	uxth	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	3306      	adds	r3, #6
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4413      	add	r3, r2
 800209a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d306      	bcc.n	80020be <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	619a      	str	r2, [r3, #24]
 80020bc:	e002      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d12c      	bne.n	8002126 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f007 f841 	bl	800915a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80fd 	bne.w	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002120:	b29b      	uxth	r3, r3
 8002122:	8013      	strh	r3, [r2, #0]
 8002124:	e0db      	b.n	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11f      	bne.n	8002170 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800215c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	b29b      	uxth	r3, r3
 800216e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002176:	2b01      	cmp	r3, #1
 8002178:	f040 80b1 	bne.w	80022de <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002182:	441a      	add	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	69da      	ldr	r2, [r3, #28]
 800218c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800218e:	441a      	add	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d309      	bcc.n	80021b4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	1ad2      	subs	r2, r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	621a      	str	r2, [r3, #32]
 80021b2:	e014      	b.n	80021de <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80021bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021c8:	e009      	b.n	80021de <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	785b      	ldrb	r3, [r3, #1]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d155      	bne.n	8002298 <HAL_PCD_EP_DB_Transmit+0x49a>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002200:	4413      	add	r3, r2
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	011a      	lsls	r2, r3, #4
 800220a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220c:	4413      	add	r3, r2
 800220e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <HAL_PCD_EP_DB_Transmit+0x442>
 800221a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002224:	b29a      	uxth	r2, r3
 8002226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002238:	b29a      	uxth	r2, r3
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	801a      	strh	r2, [r3, #0]
 800223e:	e044      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	2b3e      	cmp	r3, #62	; 0x3e
 8002244:	d811      	bhi.n	800226a <HAL_PCD_EP_DB_Transmit+0x46c>
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_PCD_EP_DB_Transmit+0x45e>
 8002256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002258:	3301      	adds	r3, #1
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225e:	b29b      	uxth	r3, r3
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	b29a      	uxth	r2, r3
 8002264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	e02f      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x4cc>
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_PCD_EP_DB_Transmit+0x482>
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	b29b      	uxth	r3, r3
 8002284:	029b      	lsls	r3, r3, #10
 8002286:	b29b      	uxth	r3, r3
 8002288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002290:	b29a      	uxth	r2, r3
 8002292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002294:	801a      	strh	r2, [r3, #0]
 8002296:	e018      	b.n	80022ca <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d114      	bne.n	80022ca <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	4413      	add	r3, r2
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	011a      	lsls	r2, r3, #4
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	4413      	add	r3, r2
 80022bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	895a      	ldrh	r2, [r3, #10]
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f004 f9ff 	bl	80066dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022f8:	823b      	strh	r3, [r7, #16]
 80022fa:	8a3b      	ldrh	r3, [r7, #16]
 80022fc:	f083 0310 	eor.w	r3, r3, #16
 8002300:	823b      	strh	r3, [r7, #16]
 8002302:	8a3b      	ldrh	r3, [r7, #16]
 8002304:	f083 0320 	eor.w	r3, r3, #32
 8002308:	823b      	strh	r3, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	8a3b      	ldrh	r3, [r7, #16]
 800231a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	b29b      	uxth	r3, r3
 800232c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3748      	adds	r7, #72	; 0x48
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	4613      	mov	r3, r2
 8002348:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e009      	b.n	8002382 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236e:	897a      	ldrh	r2, [r7, #10]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	b29a      	uxth	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	80da      	strh	r2, [r3, #6]
 8002396:	e00b      	b.n	80023b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e26c      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8087 	beq.w	80024ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023dc:	4b92      	ldr	r3, [pc, #584]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
 80023f4:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d06c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x12c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d168      	bne.n	80024e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e246      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x76>
 8002424:	4b80      	ldr	r3, [pc, #512]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7f      	ldr	r2, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	e02e      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b78      	ldr	r3, [pc, #480]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0xbc>
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0xd4>
 8002478:	4b6b      	ldr	r3, [pc, #428]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6a      	ldr	r2, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a67      	ldr	r2, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe f924 	bl	80006e4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe f920 	bl	80006e4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1fa      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe4>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe f910 	bl	80006e4 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe f90c 	bl	80006e4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1e6      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x10c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b08      	cmp	r3, #8
 800250c:	d11c      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d116      	bne.n	8002548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1ba      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4939      	ldr	r1, [pc, #228]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	e03a      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe f8c5 	bl	80006e4 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe f8c1 	bl	80006e4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e19b      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e015      	b.n	80025be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x270>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe f8a4 	bl	80006e4 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7fe f8a0 	bl	80006e4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e17a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03a      	beq.n	8002640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d019      	beq.n	8002606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d2:	4b17      	ldr	r3, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7fe f884 	bl	80006e4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e0:	f7fe f880 	bl	80006e4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e15a      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f000 faaa 	bl	8002b58 <RCC_Delay>
 8002604:	e01c      	b.n	8002640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_OscConfig+0x274>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe f86a 	bl	80006e4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002612:	e00f      	b.n	8002634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe f866 	bl	80006e4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d908      	bls.n	8002634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e140      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	42420000 	.word	0x42420000
 8002630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e9      	bne.n	8002614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a6 	beq.w	800279a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b97      	ldr	r3, [pc, #604]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b94      	ldr	r3, [pc, #592]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a93      	ldr	r2, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b91      	ldr	r3, [pc, #580]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b8e      	ldr	r3, [pc, #568]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b8b      	ldr	r3, [pc, #556]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a8a      	ldr	r2, [pc, #552]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe f827 	bl	80006e4 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe f823 	bl	80006e4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0fd      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b81      	ldr	r3, [pc, #516]	; (80028b4 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x312>
 80026c0:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x334>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x356>
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6213      	str	r3, [r2, #32]
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6213      	str	r3, [r2, #32]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x36e>
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a66      	ldr	r2, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fd ffd7 	bl	80006e4 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fd ffd3 	bl	80006e4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ab      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b57      	ldr	r3, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x37e>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fd ffc1 	bl	80006e4 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fd ffbd 	bl	80006e4 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e095      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8081 	beq.w	80028a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d061      	beq.n	8002874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d146      	bne.n	8002846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fd ff91 	bl	80006e4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fd ff8d 	bl	80006e4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e067      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d108      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	492d      	ldr	r1, [pc, #180]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a19      	ldr	r1, [r3, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	430b      	orrs	r3, r1
 8002812:	4927      	ldr	r1, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fd ff61 	bl	80006e4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fd ff5d 	bl	80006e4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e037      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x46a>
 8002844:	e02f      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_OscConfig+0x4fc>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fd ff4a 	bl	80006e4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fd ff46 	bl	80006e4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e020      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x498>
 8002872:	e018      	b.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e013      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42420060 	.word	0x42420060

080028bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0d0      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4965      	ldr	r1, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800293a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d040      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e073      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06b      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4936      	ldr	r1, [pc, #216]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7fd fe9a 	bl	80006e4 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fd fe96 	bl	80006e4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d210      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 0207 	bic.w	r2, r3, #7
 80029f2:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4601      	mov	r1, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1cc>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fdf8 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	080096fc 	.word	0x080096fc
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a98:	1d3c      	adds	r4, r7, #4
 8002a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d002      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x46>
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	e02d      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ae8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c5b      	lsrs	r3, r3, #17
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b02:	4413      	add	r3, r2
 8002b04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0e:	fb02 f203 	mul.w	r2, r2, r3
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e004      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	623b      	str	r3, [r7, #32]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b2e:	623b      	str	r3, [r7, #32]
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	6a3b      	ldr	r3, [r7, #32]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc90      	pop	{r4, r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	080096a4 	.word	0x080096a4
 8002b44:	080096b4 	.word	0x080096b4
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	003d0900 	.word	0x003d0900
 8002b54:	007a1200 	.word	0x007a1200

08002b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RCC_Delay+0x34>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <RCC_Delay+0x38>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b74:	bf00      	nop
  }
  while (Delay --);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <RCC_Delay+0x1c>
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d07d      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb4:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	61d3      	str	r3, [r2, #28]
 8002bcc:	4b49      	ldr	r3, [pc, #292]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d118      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be8:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a42      	ldr	r2, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf4:	f7fd fd76 	bl	80006e4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	e008      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fd fd72 	bl	80006e4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e06d      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c1a:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02e      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d027      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c38:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c48:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d014      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fd fd41 	bl	80006e4 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fd fd3d 	bl	80006e4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e036      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ee      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c88:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4917      	ldr	r1, [pc, #92]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42420440 	.word	0x42420440

08002d00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e022      	b.n	8002d58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd fbcd 	bl	80004c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f814 	bl	8002d60 <HAL_SD_InitCard>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00a      	b.n	8002d58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002d7c:	2376      	movs	r3, #118	; 0x76
 8002d7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681d      	ldr	r5, [r3, #0]
 8002d84:	466c      	mov	r4, sp
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 ff4f 	bl	8003c3c <SDIO_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e031      	b.n	8002e14 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_SD_InitCard+0xbc>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ff84 	bl	8003cc8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_SD_InitCard+0xbc>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fe82 	bl	8003ad0 <SD_PowerON>
 8002dcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e013      	b.n	8002e14 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fda2 	bl	8003936 <SD_InitCard>
 8002df2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	423000a0 	.word	0x423000a0

08002e20 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b092      	sub	sp, #72	; 0x48
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7fd fc59 	bl	80006e4 <HAL_GetTick>
 8002e32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d107      	bne.n	8002e52 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1d9      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	f040 81cc 	bne.w	80031f8 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d907      	bls.n	8002e84 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e1c0      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2203      	movs	r2, #3
 8002e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 ff9a 	bl	8003de4 <SDMMC_CmdBlockLength>
 8002eb0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a9b      	ldr	r2, [pc, #620]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e196      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ee4:	2390      	movs	r3, #144	; 0x90
 8002ee6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f107 0214 	add.w	r2, r7, #20
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 ff45 	bl	8003d8e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d90a      	bls.n	8002f20 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ffa8 	bl	8003e6c <SDMMC_CmdReadMultiBlock>
 8002f1c:	6478      	str	r0, [r7, #68]	; 0x44
 8002f1e:	e009      	b.n	8002f34 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 ff7b 	bl	8003e28 <SDMMC_CmdReadSingleBlock>
 8002f32:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7b      	ldr	r2, [pc, #492]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e152      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f64:	e061      	b.n	800302a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d03c      	beq.n	8002fee <HAL_SD_ReadBlocks+0x1ce>
 8002f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7e:	e033      	b.n	8002fe8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fe83 	bl	8003c90 <SDIO_ReadFIFO>
 8002f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	3301      	adds	r3, #1
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	3301      	adds	r3, #1
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	0e1b      	lsrs	r3, r3, #24
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	3301      	adds	r3, #1
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	d9c8      	bls.n	8002f80 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fee:	f7fd fb79 	bl	80006e4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d902      	bls.n	8003004 <HAL_SD_ReadBlocks+0x1e4>
 8002ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003000:	2b00      	cmp	r3, #0
 8003002:	d112      	bne.n	800302a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a48      	ldr	r2, [pc, #288]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0ed      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	f240 332a 	movw	r3, #810	; 0x32a
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d095      	beq.n	8002f66 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d022      	beq.n	800308e <HAL_SD_ReadBlocks+0x26e>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d91f      	bls.n	800308e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	2b03      	cmp	r3, #3
 8003054:	d01b      	beq.n	800308e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 ff6c 	bl	8003f38 <SDMMC_CmdStopTransfer>
 8003060:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2f      	ldr	r2, [pc, #188]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	431a      	orrs	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0bb      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d012      	beq.n	80030c2 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	f043 0208 	orr.w	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0a1      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d012      	beq.n	80030f6 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	f043 0202 	orr.w	r2, r3, #2
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e087      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d064      	beq.n	80031ce <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <HAL_SD_ReadBlocks+0x30c>)
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06d      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
 800312a:	bf00      	nop
 800312c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fdab 	bl	8003c90 <SDIO_ReadFIFO>
 800313a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	b2da      	uxtb	r2, r3
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	3301      	adds	r3, #1
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800314a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314c:	3b01      	subs	r3, #1
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	b2da      	uxtb	r2, r3
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	3301      	adds	r3, #1
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	3b01      	subs	r3, #1
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	b2da      	uxtb	r2, r3
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	3301      	adds	r3, #1
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003178:	3b01      	subs	r3, #1
 800317a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	0e1b      	lsrs	r3, r3, #24
 8003180:	b2da      	uxtb	r2, r3
 8003182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003184:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	3301      	adds	r3, #1
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	3b01      	subs	r3, #1
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003192:	f7fd faa7 	bl	80006e4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800319e:	429a      	cmp	r2, r3
 80031a0:	d902      	bls.n	80031a8 <HAL_SD_ReadBlocks+0x388>
 80031a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d112      	bne.n	80031ce <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a18      	ldr	r2, [pc, #96]	; (8003210 <HAL_SD_ReadBlocks+0x3f0>)
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01b      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_SD_ReadBlocks+0x3c2>
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a6      	bne.n	8003130 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e006      	b.n	8003206 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	3748      	adds	r7, #72	; 0x48
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	004005ff 	.word	0x004005ff

08003214 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b092      	sub	sp, #72	; 0x48
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003222:	f7fd fa5f 	bl	80006e4 <HAL_GetTick>
 8003226:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e184      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	f040 8177 	bne.w	8003542 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800325a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	441a      	add	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	429a      	cmp	r2, r3
 8003266:	d907      	bls.n	8003278 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e16b      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2203      	movs	r2, #3
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2200      	movs	r2, #0
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	2b01      	cmp	r3, #1
 800328e:	d002      	beq.n	8003296 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fda0 	bl	8003de4 <SDMMC_CmdBlockLength>
 80032a4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00f      	beq.n	80032cc <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a9d      	ldr	r2, [pc, #628]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e141      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80032d8:	2390      	movs	r3, #144	; 0x90
 80032da:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f107 0218 	add.w	r2, r7, #24
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd4b 	bl	8003d8e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d90a      	bls.n	8003314 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fdf2 	bl	8003ef4 <SDMMC_CmdWriteMultiBlock>
 8003310:	6478      	str	r0, [r7, #68]	; 0x44
 8003312:	e009      	b.n	8003328 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2210      	movs	r2, #16
 8003318:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fdc5 	bl	8003eb0 <SDMMC_CmdWriteSingleBlock>
 8003326:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7d      	ldr	r2, [pc, #500]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0fd      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003358:	e065      	b.n	8003426 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d040      	beq.n	80033ea <HAL_SD_WriteBlocks+0x1d6>
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d03d      	beq.n	80033ea <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800336e:	2300      	movs	r3, #0
 8003370:	643b      	str	r3, [r7, #64]	; 0x40
 8003372:	e037      	b.n	80033e4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800337a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337c:	3301      	adds	r3, #1
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003382:	3b01      	subs	r3, #1
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	021a      	lsls	r2, r3, #8
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	3301      	adds	r3, #1
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	3b01      	subs	r3, #1
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	041a      	lsls	r2, r3, #16
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	3301      	adds	r3, #1
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	3b01      	subs	r3, #1
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	061a      	lsls	r2, r3, #24
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80033c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c4:	3301      	adds	r3, #1
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80033c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ca:	3b01      	subs	r3, #1
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f107 0214 	add.w	r2, r7, #20
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fc65 	bl	8003ca8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80033de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e0:	3301      	adds	r3, #1
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
 80033e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e6:	2b07      	cmp	r3, #7
 80033e8:	d9c4      	bls.n	8003374 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80033ea:	f7fd f97b 	bl	80006e4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d902      	bls.n	8003400 <HAL_SD_WriteBlocks+0x1ec>
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d112      	bne.n	8003426 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a48      	ldr	r2, [pc, #288]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340e:	431a      	orrs	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e094      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342c:	f240 331a 	movw	r3, #794	; 0x31a
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d091      	beq.n	800335a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d022      	beq.n	800348a <HAL_SD_WriteBlocks+0x276>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d91f      	bls.n	800348a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	2b03      	cmp	r3, #3
 8003450:	d01b      	beq.n	800348a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fd6e 	bl	8003f38 <SDMMC_CmdStopTransfer>
 800345c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800345e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e062      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	f043 0208 	orr.w	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e048      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a15      	ldr	r2, [pc, #84]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e02e      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <HAL_SD_WriteBlocks+0x314>)
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e014      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
 8003526:	bf00      	nop
 8003528:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f240 523a 	movw	r2, #1338	; 0x53a
 8003534:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e006      	b.n	8003550 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3748      	adds	r7, #72	; 0x48
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003566:	0f9b      	lsrs	r3, r3, #30
 8003568:	b2da      	uxtb	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003572:	0e9b      	lsrs	r3, r3, #26
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003584:	0e1b      	lsrs	r3, r3, #24
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	b2da      	uxtb	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b8:	0d1b      	lsrs	r3, r3, #20
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d6:	0bdb      	lsrs	r3, r3, #15
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e8:	0b9b      	lsrs	r3, r3, #14
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fa:	0b5b      	lsrs	r3, r3, #13
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360c:	0b1b      	lsrs	r3, r3, #12
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	2b00      	cmp	r3, #0
 8003626:	d163      	bne.n	80036f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	009a      	lsls	r2, r3, #2
 800362e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003638:	0f92      	lsrs	r2, r2, #30
 800363a:	431a      	orrs	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003644:	0edb      	lsrs	r3, r3, #27
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	b2da      	uxtb	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003656:	0e1b      	lsrs	r3, r3, #24
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	b2da      	uxtb	r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003668:	0d5b      	lsrs	r3, r3, #21
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	b2da      	uxtb	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	0c9b      	lsrs	r3, r3, #18
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	b2da      	uxtb	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368c:	0bdb      	lsrs	r3, r3, #15
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	b2da      	uxtb	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	3302      	adds	r3, #2
 80036b0:	2201      	movs	r2, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036ba:	fb02 f203 	mul.w	r2, r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	7a1b      	ldrb	r3, [r3, #8]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80036dc:	0a52      	lsrs	r2, r2, #9
 80036de:	fb02 f203 	mul.w	r2, r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60
 80036ee:	e031      	b.n	8003754 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11d      	bne.n	8003734 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	3301      	adds	r3, #1
 8003714:	029a      	lsls	r2, r3, #10
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003728:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	661a      	str	r2, [r3, #96]	; 0x60
 8003732:	e00f      	b.n	8003754 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a58      	ldr	r2, [pc, #352]	; (800389c <HAL_SD_GetCardCSD+0x344>)
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e09d      	b.n	8003890 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003758:	0b9b      	lsrs	r3, r3, #14
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	b2da      	uxtb	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376a:	09db      	lsrs	r3, r3, #7
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003772:	b2da      	uxtb	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003782:	b2da      	uxtb	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	0fdb      	lsrs	r3, r3, #31
 800378e:	b2da      	uxtb	r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	0f5b      	lsrs	r3, r3, #29
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	0e9b      	lsrs	r3, r3, #26
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	0d9b      	lsrs	r3, r3, #22
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	0d5b      	lsrs	r3, r3, #21
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	0bdb      	lsrs	r3, r3, #15
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	0b9b      	lsrs	r3, r3, #14
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	0b5b      	lsrs	r3, r3, #13
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	0b1b      	lsrs	r3, r3, #12
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	b2da      	uxtb	r2, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387e:	b2da      	uxtb	r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	004005ff 	.word	0x004005ff

080038a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f96f 	bl	8003bec <SD_SendStatus>
 800390e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	0a5b      	lsrs	r3, r3, #9
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800392c:	693b      	ldr	r3, [r7, #16]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003936:	b5b0      	push	{r4, r5, r7, lr}
 8003938:	b094      	sub	sp, #80	; 0x50
 800393a:	af04      	add	r7, sp, #16
 800393c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800393e:	2301      	movs	r3, #1
 8003940:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f9cd 	bl	8003ce6 <SDIO_GetPowerState>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003952:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003956:	e0b7      	b.n	8003ac8 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	2b03      	cmp	r3, #3
 800395e:	d02f      	beq.n	80039c0 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fbae 	bl	80040c6 <SDMMC_CmdSendCID>
 800396a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <SD_InitCard+0x40>
    {
      return errorstate;
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	e0a8      	b.n	8003ac8 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f9f4 	bl	8003d6a <SDIO_GetResponse>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2104      	movs	r1, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f9eb 	bl	8003d6a <SDIO_GetResponse>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2108      	movs	r1, #8
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f9e2 	bl	8003d6a <SDIO_GetResponse>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	210c      	movs	r1, #12
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f9d9 	bl	8003d6a <SDIO_GetResponse>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d00d      	beq.n	80039e4 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f107 020e 	add.w	r2, r7, #14
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fbb4 	bl	8004140 <SDMMC_CmdSetRelAdd>
 80039d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_InitCard+0xae>
    {
      return errorstate;
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	e071      	b.n	8003ac8 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d036      	beq.n	8003a5a <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039ec:	89fb      	ldrh	r3, [r7, #14]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f000 fb7e 	bl	8004102 <SDMMC_CmdSendCSD>
 8003a06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	e05a      	b.n	8003ac8 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f9a6 	bl	8003d6a <SDIO_GetResponse>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f99d 	bl	8003d6a <SDIO_GetResponse>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2108      	movs	r1, #8
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f994 	bl	8003d6a <SDIO_GetResponse>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	210c      	movs	r1, #12
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f98b 	bl	8003d6a <SDIO_GetResponse>
 8003a54:	4602      	mov	r2, r0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2104      	movs	r1, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f982 	bl	8003d6a <SDIO_GetResponse>
 8003a66:	4603      	mov	r3, r0
 8003a68:	0d1a      	lsrs	r2, r3, #20
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fd6f 	bl	8003558 <HAL_SD_GetCardCSD>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a84:	e020      	b.n	8003ac8 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	4608      	mov	r0, r1
 8003a9a:	f000 fa6f 	bl	8003f7c <SDMMC_CmdSelDesel>
 8003a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <SD_InitCard+0x174>
  {
    return errorstate;
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa8:	e00e      	b.n	8003ac8 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681d      	ldr	r5, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	466c      	mov	r4, sp
 8003ab2:	f103 0210 	add.w	r2, r3, #16
 8003ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003abc:	3304      	adds	r3, #4
 8003abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 f8bb 	bl	8003c3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3740      	adds	r7, #64	; 0x40
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bdb0      	pop	{r4, r5, r7, pc}

08003ad0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fa6a 	bl	8003fc2 <SDMMC_CmdGoIdleState>
 8003aee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SD_PowerON+0x2a>
  {
    return errorstate;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	e072      	b.n	8003be0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fa7d 	bl	8003ffe <SDMMC_CmdOperCond>
 8003b04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa53 	bl	8003fc2 <SDMMC_CmdGoIdleState>
 8003b1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	e05b      	b.n	8003be0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d137      	bne.n	8003ba6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa7d 	bl	800403c <SDMMC_CmdAppCommand>
 8003b42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02d      	beq.n	8003ba6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b4e:	e047      	b.n	8003be0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fa70 	bl	800403c <SDMMC_CmdAppCommand>
 8003b5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	e03b      	b.n	8003be0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	491e      	ldr	r1, [pc, #120]	; (8003be8 <SD_PowerON+0x118>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa86 	bl	8004080 <SDMMC_CmdAppOperCommand>
 8003b74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b80:	e02e      	b.n	8003be0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f8ee 	bl	8003d6a <SDIO_GetResponse>
 8003b8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	0fdb      	lsrs	r3, r3, #31
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <SD_PowerON+0xcc>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <SD_PowerON+0xce>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	613b      	str	r3, [r7, #16]

    count++;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d802      	bhi.n	8003bb6 <SD_PowerON+0xe6>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0cc      	beq.n	8003b50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d902      	bls.n	8003bc6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc4:	e00c      	b.n	8003be0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8003bd6:	e002      	b.n	8003bde <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	c1100000 	.word	0xc1100000

08003bec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c00:	e018      	b.n	8003c34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 fab7 	bl	8004182 <SDMMC_CmdSendStatus>
 8003c14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e009      	b.n	8003c34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f89f 	bl	8003d6a <SDIO_GetResponse>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	f107 001c 	add.w	r0, r7, #28
 8003c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003c52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003c54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003c56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003c5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003c5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003c62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003c66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	b004      	add	sp, #16
 8003c8e:	4770      	bx	lr

08003c90 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f7fc fd0e 	bl	80006f8 <HAL_Delay>
  
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003d24:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003d2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003d3a:	f023 030f 	bic.w	r3, r3, #15
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	b2db      	uxtb	r3, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3314      	adds	r3, #20
 8003d78:	461a      	mov	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
}  
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003db4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003dba:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003dc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0

}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003df2:	2310      	movs	r3, #16
 8003df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e04:	f107 0308 	add.w	r3, r7, #8
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ff78 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	2110      	movs	r1, #16
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9fe 	bl	8004218 <SDMMC_GetCmdResp1>
 8003e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003e36:	2311      	movs	r3, #17
 8003e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff56 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	2111      	movs	r1, #17
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9dc 	bl	8004218 <SDMMC_GetCmdResp1>
 8003e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003e62:	69fb      	ldr	r3, [r7, #28]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003e7a:	2312      	movs	r3, #18
 8003e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003e7e:	2340      	movs	r3, #64	; 0x40
 8003e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff ff34 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	2112      	movs	r1, #18
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9ba 	bl	8004218 <SDMMC_GetCmdResp1>
 8003ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003ebe:	2318      	movs	r3, #24
 8003ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ec2:	2340      	movs	r3, #64	; 0x40
 8003ec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ff12 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee0:	2118      	movs	r1, #24
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f998 	bl	8004218 <SDMMC_GetCmdResp1>
 8003ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003eea:	69fb      	ldr	r3, [r7, #28]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003f02:	2319      	movs	r3, #25
 8003f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fef0 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	2119      	movs	r1, #25
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f976 	bl	8004218 <SDMMC_GetCmdResp1>
 8003f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003f44:	230c      	movs	r3, #12
 8003f46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f48:	2340      	movs	r3, #64	; 0x40
 8003f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fecf 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003f62:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <SDMMC_CmdStopTransfer+0x40>)
 8003f64:	210c      	movs	r1, #12
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f956 	bl	8004218 <SDMMC_GetCmdResp1>
 8003f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	05f5e100 	.word	0x05f5e100

08003f7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003f8c:	2307      	movs	r3, #7
 8003f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003f90:	2340      	movs	r3, #64	; 0x40
 8003f92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003f9e:	f107 0310 	add.w	r3, r7, #16
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff feab 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	2107      	movs	r1, #7
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f931 	bl	8004218 <SDMMC_GetCmdResp1>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b088      	sub	sp, #32
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003fe0:	f107 0308 	add.w	r3, r7, #8
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fe8a 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8eb 	bl	80041c8 <SDMMC_GetCmdError>
 8003ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b088      	sub	sp, #32
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004006:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800400a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800400c:	2308      	movs	r3, #8
 800400e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800401c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe6b 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fad4 	bl	80045d8 <SDMMC_GetCmdResp7>
 8004030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004032:	69fb      	ldr	r3, [r7, #28]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800404a:	2337      	movs	r3, #55	; 0x37
 800404c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe4c 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	2137      	movs	r1, #55	; 0x37
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8d2 	bl	8004218 <SDMMC_GetCmdResp1>
 8004074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004076:	69fb      	ldr	r3, [r7, #28]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004096:	2329      	movs	r3, #41	; 0x29
 8004098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040a8:	f107 0308 	add.w	r3, r7, #8
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fe26 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f9e1 	bl	800447c <SDMMC_GetCmdResp3>
 80040ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040bc:	69fb      	ldr	r3, [r7, #28]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b088      	sub	sp, #32
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80040d2:	2302      	movs	r3, #2
 80040d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80040d6:	23c0      	movs	r3, #192	; 0xc0
 80040d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fe08 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f97d 	bl	80043f0 <SDMMC_GetCmdResp2>
 80040f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040f8:	69fb      	ldr	r3, [r7, #28]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b088      	sub	sp, #32
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004110:	2309      	movs	r3, #9
 8004112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004114:	23c0      	movs	r3, #192	; 0xc0
 8004116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800411c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fde9 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f95e 	bl	80043f0 <SDMMC_GetCmdResp2>
 8004134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004136:	69fb      	ldr	r3, [r7, #28]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800414e:	2303      	movs	r3, #3
 8004150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800415a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fdca 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	2103      	movs	r1, #3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f9bd 	bl	80044f0 <SDMMC_GetCmdResp6>
 8004176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004178:	69fb      	ldr	r3, [r7, #28]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b088      	sub	sp, #32
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004190:	230d      	movs	r3, #13
 8004192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800419c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fda9 	bl	8003d00 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	210d      	movs	r1, #13
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f82f 	bl	8004218 <SDMMC_GetCmdResp1>
 80041ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80041bc:	69fb      	ldr	r3, [r7, #28]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80041c8:	b490      	push	{r4, r7}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <SDMMC_GetCmdError+0x48>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <SDMMC_GetCmdError+0x4c>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80041e4:	4623      	mov	r3, r4
 80041e6:	1e5c      	subs	r4, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80041ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041f0:	e009      	b.n	8004206 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f2      	beq.n	80041e4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	22c5      	movs	r2, #197	; 0xc5
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bc90      	pop	{r4, r7}
 800420e:	4770      	bx	lr
 8004210:	20000000 	.word	0x20000000
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	460b      	mov	r3, r1
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <SDMMC_GetCmdResp1+0x1cc>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6f      	ldr	r2, [pc, #444]	; (80043e8 <SDMMC_GetCmdResp1+0x1d0>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0a5b      	lsrs	r3, r3, #9
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004238:	4623      	mov	r3, r4
 800423a:	1e5c      	subs	r4, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004244:	e0c9      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <SDMMC_GetCmdResp1+0x20>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1eb      	bne.n	8004238 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2204      	movs	r2, #4
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004272:	2304      	movs	r3, #4
 8004274:	e0b1      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004288:	2301      	movs	r3, #1
 800428a:	e0a6      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22c5      	movs	r2, #197	; 0xc5
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fd5d 	bl	8003d52 <SDIO_GetCommandResponse>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	4293      	cmp	r3, r2
 80042a0:	d001      	beq.n	80042a6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e099      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042a6:	2100      	movs	r1, #0
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fd5e 	bl	8003d6a <SDIO_GetResponse>
 80042ae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4b4e      	ldr	r3, [pc, #312]	; (80043ec <SDMMC_GetCmdResp1+0x1d4>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e08d      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da02      	bge.n	80042ca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80042c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c8:	e087      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	e080      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	e079      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80042f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f4:	e071      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004304:	e069      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004314:	e061      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004324:	e059      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004334:	e051      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004344:	e049      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004354:	e041      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004364:	e039      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004374:	e031      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004384:	e029      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004390:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004394:	e021      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80043a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043a4:	e019      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80043b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043b4:	e011      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80043c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043c4:	e009      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80043d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80043d4:	e001      	b.n	80043da <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80043d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000000 	.word	0x20000000
 80043e8:	10624dd3 	.word	0x10624dd3
 80043ec:	fdffe008 	.word	0xfdffe008

080043f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80043f0:	b490      	push	{r4, r7}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <SDMMC_GetCmdResp2+0x84>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <SDMMC_GetCmdResp2+0x88>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0a5b      	lsrs	r3, r3, #9
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800440c:	4623      	mov	r3, r4
 800440e:	1e5c      	subs	r4, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004418:	e026      	b.n	8004468 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <SDMMC_GetCmdResp2+0x1c>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1eb      	bne.n	800440c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2204      	movs	r2, #4
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004446:	2304      	movs	r3, #4
 8004448:	e00e      	b.n	8004468 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800445c:	2301      	movs	r3, #1
 800445e:	e003      	b.n	8004468 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	22c5      	movs	r2, #197	; 0xc5
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bc90      	pop	{r4, r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000000 	.word	0x20000000
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800447c:	b490      	push	{r4, r7}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004484:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <SDMMC_GetCmdResp3+0x6c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <SDMMC_GetCmdResp3+0x70>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	0a5b      	lsrs	r3, r3, #9
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004498:	4623      	mov	r3, r4
 800449a:	1e5c      	subs	r4, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044a4:	e01b      	b.n	80044de <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <SDMMC_GetCmdResp3+0x1c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1eb      	bne.n	8004498 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2204      	movs	r2, #4
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80044d2:	2304      	movs	r3, #4
 80044d4:	e003      	b.n	80044de <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	22c5      	movs	r2, #197	; 0xc5
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc90      	pop	{r4, r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000000 	.word	0x20000000
 80044ec:	10624dd3 	.word	0x10624dd3

080044f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	460b      	mov	r3, r1
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <SDMMC_GetCmdResp6+0xe0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a34      	ldr	r2, [pc, #208]	; (80045d4 <SDMMC_GetCmdResp6+0xe4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004512:	4623      	mov	r3, r4
 8004514:	1e5c      	subs	r4, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800451a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800451e:	e052      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <SDMMC_GetCmdResp6+0x22>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1eb      	bne.n	8004512 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2204      	movs	r2, #4
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800454c:	2304      	movs	r3, #4
 800454e:	e03a      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004562:	2301      	movs	r3, #1
 8004564:	e02f      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fbf3 	bl	8003d52 <SDIO_GetCommandResponse>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	7afb      	ldrb	r3, [r7, #11]
 8004572:	4293      	cmp	r3, r2
 8004574:	d001      	beq.n	800457a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004576:	2301      	movs	r3, #1
 8004578:	e025      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22c5      	movs	r2, #197	; 0xc5
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004580:	2100      	movs	r1, #0
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7ff fbf1 	bl	8003d6a <SDIO_GetResponse>
 8004588:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800459e:	2300      	movs	r3, #0
 80045a0:	e011      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80045ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b0:	e009      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	e001      	b.n	80045c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80045c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd90      	pop	{r4, r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000000 	.word	0x20000000
 80045d4:	10624dd3 	.word	0x10624dd3

080045d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80045d8:	b490      	push	{r4, r7}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <SDMMC_GetCmdResp7+0x90>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <SDMMC_GetCmdResp7+0x94>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	0a5b      	lsrs	r3, r3, #9
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80045f4:	4623      	mov	r3, r4
 80045f6:	1e5c      	subs	r4, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80045fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004600:	e02c      	b.n	800465c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <SDMMC_GetCmdResp7+0x1c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1eb      	bne.n	80045f4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2204      	movs	r2, #4
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800462e:	2304      	movs	r3, #4
 8004630:	e014      	b.n	800465c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004644:	2301      	movs	r3, #1
 8004646:	e009      	b.n	800465c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800465a:	2300      	movs	r3, #0
  
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bc90      	pop	{r4, r7}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000000 	.word	0x20000000
 800466c:	10624dd3 	.word	0x10624dd3

08004670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004670:	b084      	sub	sp, #16
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	f107 0014 	add.w	r0, r7, #20
 800467e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	b004      	add	sp, #16
 800468e:	4770      	bx	lr

08004690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4013      	ands	r3, r2
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004708:	b084      	sub	sp, #16
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	f107 0014 	add.w	r0, r7, #20
 8004716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	b004      	add	sp, #16
 8004746:	4770      	bx	lr

08004748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
	...

08004774 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004774:	b480      	push	{r7}
 8004776:	b09b      	sub	sp, #108	; 0x6c
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	78db      	ldrb	r3, [r3, #3]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d81f      	bhi.n	80047e6 <USB_ActivateEndpoint+0x72>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <USB_ActivateEndpoint+0x38>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047ef 	.word	0x080047ef
 80047b8:	080047cb 	.word	0x080047cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047c8:	e012      	b.n	80047f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80047d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047d6:	e00b      	b.n	80047f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047e4:	e004      	b.n	80047f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80047ec:	e000      	b.n	80047f0 <USB_ActivateEndpoint+0x7c>
      break;
 80047ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480e:	b29b      	uxth	r3, r3
 8004810:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004828:	b29a      	uxth	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	4313      	orrs	r3, r2
 8004832:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	7b1b      	ldrb	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 8149 	bne.w	8004af4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8084 	beq.w	8004974 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004876:	b29b      	uxth	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	011a      	lsls	r2, r3, #4
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	88db      	ldrh	r3, [r3, #6]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	81fb      	strh	r3, [r7, #14]
 80048ae:	89fb      	ldrh	r3, [r7, #14]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <USB_ActivateEndpoint+0x17c>
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	81bb      	strh	r3, [r7, #12]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	89bb      	ldrh	r3, [r7, #12]
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d020      	beq.n	800493a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	813b      	strh	r3, [r7, #8]
 8004910:	893b      	ldrh	r3, [r7, #8]
 8004912:	f083 0320 	eor.w	r3, r3, #32
 8004916:	813b      	strh	r3, [r7, #8]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	893b      	ldrh	r3, [r7, #8]
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]
 8004938:	e27f      	b.n	8004e3a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004950:	817b      	strh	r3, [r7, #10]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	897b      	ldrh	r3, [r7, #10]
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
 8004972:	e262      	b.n	8004e3a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497e:	b29b      	uxth	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	4413      	add	r3, r2
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	011a      	lsls	r2, r3, #4
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	4413      	add	r3, r2
 8004992:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	88db      	ldrh	r3, [r3, #6]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	4413      	add	r3, r2
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	4413      	add	r3, r2
 80049c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d112      	bne.n	80049fa <USB_ActivateEndpoint+0x286>
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049de:	b29a      	uxth	r2, r3
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	801a      	strh	r2, [r3, #0]
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	e02f      	b.n	8004a5a <USB_ActivateEndpoint+0x2e6>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004a00:	d813      	bhi.n	8004a2a <USB_ActivateEndpoint+0x2b6>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	663b      	str	r3, [r7, #96]	; 0x60
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <USB_ActivateEndpoint+0x2a8>
 8004a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a18:	3301      	adds	r3, #1
 8004a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	e017      	b.n	8004a5a <USB_ActivateEndpoint+0x2e6>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <USB_ActivateEndpoint+0x2d0>
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a40:	3b01      	subs	r3, #1
 8004a42:	663b      	str	r3, [r7, #96]	; 0x60
 8004a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	83fb      	strh	r3, [r7, #30]
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01b      	beq.n	8004aaa <USB_ActivateEndpoint+0x336>
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a88:	83bb      	strh	r3, [r7, #28]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	8bbb      	ldrh	r3, [r7, #28]
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	837b      	strh	r3, [r7, #26]
 8004ac2:	8b7b      	ldrh	r3, [r7, #26]
 8004ac4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ac8:	837b      	strh	r3, [r7, #26]
 8004aca:	8b7b      	ldrh	r3, [r7, #26]
 8004acc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ad0:	837b      	strh	r3, [r7, #26]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
 8004af2:	e1a2      	b.n	8004e3a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b40:	4413      	add	r3, r2
 8004b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	011a      	lsls	r2, r3, #4
 8004b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	891b      	ldrh	r3, [r3, #8]
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	653b      	str	r3, [r7, #80]	; 0x50
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b74:	4413      	add	r3, r2
 8004b76:	653b      	str	r3, [r7, #80]	; 0x50
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	011a      	lsls	r2, r3, #4
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	895b      	ldrh	r3, [r3, #10]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 8091 	bne.w	8004cc4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01b      	beq.n	8004bf2 <USB_ActivateEndpoint+0x47e>
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01b      	beq.n	8004c42 <USB_ActivateEndpoint+0x4ce>
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
 8004cc2:	e0ba      	b.n	8004e3a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01d      	beq.n	8004d1c <USB_ActivateEndpoint+0x5a8>
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	441a      	add	r2, r3
 8004d04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01d      	beq.n	8004d74 <USB_ActivateEndpoint+0x600>
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	78db      	ldrb	r3, [r3, #3]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d024      	beq.n	8004dc6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d9a:	f083 0320 	eor.w	r3, r3, #32
 8004d9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	441a      	add	r2, r3
 8004dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
 8004dc4:	e01d      	b.n	8004e02 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ddc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	376c      	adds	r7, #108	; 0x6c
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b08d      	sub	sp, #52	; 0x34
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	7b1b      	ldrb	r3, [r3, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 808e 	bne.w	8004f78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d044      	beq.n	8004eee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	81bb      	strh	r3, [r7, #12]
 8004e72:	89bb      	ldrh	r3, [r7, #12]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <USB_DeactivateEndpoint+0x6c>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	817b      	strh	r3, [r7, #10]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eca:	813b      	strh	r3, [r7, #8]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	893b      	ldrh	r3, [r7, #8]
 8004ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	8013      	strh	r3, [r2, #0]
 8004eec:	e192      	b.n	8005214 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	827b      	strh	r3, [r7, #18]
 8004efc:	8a7b      	ldrh	r3, [r7, #18]
 8004efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01b      	beq.n	8004f3e <USB_DeactivateEndpoint+0xf6>
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	823b      	strh	r3, [r7, #16]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	8a3b      	ldrh	r3, [r7, #16]
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	81fb      	strh	r3, [r7, #14]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	89fb      	ldrh	r3, [r7, #14]
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
 8004f76:	e14d      	b.n	8005214 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 80a5 	bne.w	80050cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	843b      	strh	r3, [r7, #32]
 8004f90:	8c3b      	ldrh	r3, [r7, #32]
 8004f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01b      	beq.n	8004fd2 <USB_DeactivateEndpoint+0x18a>
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb0:	83fb      	strh	r3, [r7, #30]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	8bfb      	ldrh	r3, [r7, #30]
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	83bb      	strh	r3, [r7, #28]
 8004fe0:	8bbb      	ldrh	r3, [r7, #28]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01b      	beq.n	8005022 <USB_DeactivateEndpoint+0x1da>
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005000:	837b      	strh	r3, [r7, #26]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	8b7b      	ldrh	r3, [r7, #26]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	833b      	strh	r3, [r7, #24]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8b3b      	ldrh	r3, [r7, #24]
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	82fb      	strh	r3, [r7, #22]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	8afb      	ldrh	r3, [r7, #22]
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a8:	82bb      	strh	r3, [r7, #20]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	8abb      	ldrh	r3, [r7, #20]
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]
 80050ca:	e0a3      	b.n	8005214 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <USB_DeactivateEndpoint+0x2d4>
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005118:	b29b      	uxth	r3, r3
 800511a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	857b      	strh	r3, [r7, #42]	; 0x2a
 800512a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <USB_DeactivateEndpoint+0x324>
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	853b      	strh	r3, [r7, #40]	; 0x28
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	441a      	add	r2, r3
 8005156:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	b29b      	uxth	r3, r3
 80051da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005210:	b29b      	uxth	r3, r3
 8005212:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3734      	adds	r7, #52	; 0x34
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr

08005220 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b0c4      	sub	sp, #272	; 0x110
 8005224:	af00      	add	r7, sp, #0
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	6018      	str	r0, [r3, #0]
 800522a:	463b      	mov	r3, r7
 800522c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800522e:	463b      	mov	r3, r7
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b01      	cmp	r3, #1
 8005236:	f040 8557 	bne.w	8005ce8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d905      	bls.n	8005256 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005254:	e004      	b.n	8005260 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005260:	463b      	mov	r3, r7
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	7b1b      	ldrb	r3, [r3, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12c      	bne.n	80052c4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6959      	ldr	r1, [r3, #20]
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	88da      	ldrh	r2, [r3, #6]
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527a:	b29b      	uxth	r3, r3
 800527c:	1d38      	adds	r0, r7, #4
 800527e:	6800      	ldr	r0, [r0, #0]
 8005280:	f001 fa2c 	bl	80066dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	f107 0310 	add.w	r3, r7, #16
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	f000 bcdd 	b.w	8005c7e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	f040 8347 	bne.w	800595e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	f240 82eb 	bls.w	80058b8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800531e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005322:	b29b      	uxth	r3, r3
 8005324:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8159 	beq.w	8005606 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d164      	bne.n	800542e <USB_EPStartXfer+0x20e>
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	4413      	add	r3, r2
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	4413      	add	r3, r2
 8005388:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
 800538e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d112      	bne.n	80053bc <USB_EPStartXfer+0x19c>
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e054      	b.n	8005466 <USB_EPStartXfer+0x246>
 80053bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c0:	2b3e      	cmp	r3, #62	; 0x3e
 80053c2:	d817      	bhi.n	80053f4 <USB_EPStartXfer+0x1d4>
 80053c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <USB_EPStartXfer+0x1c4>
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053de:	3301      	adds	r3, #1
 80053e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	029b      	lsls	r3, r3, #10
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e038      	b.n	8005466 <USB_EPStartXfer+0x246>
 80053f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <USB_EPStartXfer+0x1f4>
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540e:	3b01      	subs	r3, #1
 8005410:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005418:	b29b      	uxth	r3, r3
 800541a:	029b      	lsls	r3, r3, #10
 800541c:	b29b      	uxth	r3, r3
 800541e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005426:	b29a      	uxth	r2, r3
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e01b      	b.n	8005466 <USB_EPStartXfer+0x246>
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d116      	bne.n	8005466 <USB_EPStartXfer+0x246>
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	4413      	add	r3, r2
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	011a      	lsls	r2, r3, #4
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	4413      	add	r3, r2
 8005456:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800545a:	633b      	str	r3, [r7, #48]	; 0x30
 800545c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005460:	b29a      	uxth	r2, r3
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	895b      	ldrh	r3, [r3, #10]
 800546c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6959      	ldr	r1, [r3, #20]
 8005476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547a:	b29b      	uxth	r3, r3
 800547c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005480:	1d38      	adds	r0, r7, #4
 8005482:	6800      	ldr	r0, [r0, #0]
 8005484:	f001 f92a 	bl	80066dc <USB_WritePMA>
            ep->xfer_buff += len;
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005492:	441a      	add	r2, r3
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	463b      	mov	r3, r7
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d909      	bls.n	80054be <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	463b      	mov	r3, r7
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	621a      	str	r2, [r3, #32]
 80054bc:	e008      	b.n	80054d0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d164      	bne.n	80055a4 <USB_EPStartXfer+0x384>
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	011a      	lsls	r2, r3, #4
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d112      	bne.n	8005532 <USB_EPStartXfer+0x312>
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005516:	b29a      	uxth	r2, r3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552a:	b29a      	uxth	r2, r3
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	e057      	b.n	80055e2 <USB_EPStartXfer+0x3c2>
 8005532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005536:	2b3e      	cmp	r3, #62	; 0x3e
 8005538:	d817      	bhi.n	800556a <USB_EPStartXfer+0x34a>
 800553a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <USB_EPStartXfer+0x33a>
 8005550:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005554:	3301      	adds	r3, #1
 8005556:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800555a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800555e:	b29b      	uxth	r3, r3
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	b29a      	uxth	r2, r3
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	e03b      	b.n	80055e2 <USB_EPStartXfer+0x3c2>
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <USB_EPStartXfer+0x36a>
 8005580:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005584:	3b01      	subs	r3, #1
 8005586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800558a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800558e:	b29b      	uxth	r3, r3
 8005590:	029b      	lsls	r3, r3, #10
 8005592:	b29b      	uxth	r3, r3
 8005594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559c:	b29a      	uxth	r2, r3
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e01e      	b.n	80055e2 <USB_EPStartXfer+0x3c2>
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d119      	bne.n	80055e2 <USB_EPStartXfer+0x3c2>
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	4413      	add	r3, r2
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	011a      	lsls	r2, r3, #4
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055dc:	b29a      	uxth	r2, r3
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	891b      	ldrh	r3, [r3, #8]
 80055e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ec:	463b      	mov	r3, r7
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6959      	ldr	r1, [r3, #20]
 80055f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055fc:	1d38      	adds	r0, r7, #4
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	f001 f86c 	bl	80066dc <USB_WritePMA>
 8005604:	e33b      	b.n	8005c7e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d164      	bne.n	80056da <USB_EPStartXfer+0x4ba>
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	4413      	add	r3, r2
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005628:	463b      	mov	r3, r7
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005632:	4413      	add	r3, r2
 8005634:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d112      	bne.n	8005668 <USB_EPStartXfer+0x448>
 8005642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800564c:	b29a      	uxth	r2, r3
 800564e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e057      	b.n	8005718 <USB_EPStartXfer+0x4f8>
 8005668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566c:	2b3e      	cmp	r3, #62	; 0x3e
 800566e:	d817      	bhi.n	80056a0 <USB_EPStartXfer+0x480>
 8005670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <USB_EPStartXfer+0x470>
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800568a:	3301      	adds	r3, #1
 800568c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005694:	b29b      	uxth	r3, r3
 8005696:	029b      	lsls	r3, r3, #10
 8005698:	b29a      	uxth	r2, r3
 800569a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e03b      	b.n	8005718 <USB_EPStartXfer+0x4f8>
 80056a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <USB_EPStartXfer+0x4a0>
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	3b01      	subs	r3, #1
 80056bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e01e      	b.n	8005718 <USB_EPStartXfer+0x4f8>
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d119      	bne.n	8005718 <USB_EPStartXfer+0x4f8>
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	657b      	str	r3, [r7, #84]	; 0x54
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f8:	4413      	add	r3, r2
 80056fa:	657b      	str	r3, [r7, #84]	; 0x54
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	011a      	lsls	r2, r3, #4
 8005704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005706:	4413      	add	r3, r2
 8005708:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
 800570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005712:	b29a      	uxth	r2, r3
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	891b      	ldrh	r3, [r3, #8]
 800571e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6959      	ldr	r1, [r3, #20]
 8005728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572c:	b29b      	uxth	r3, r3
 800572e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005732:	1d38      	adds	r0, r7, #4
 8005734:	6800      	ldr	r0, [r0, #0]
 8005736:	f000 ffd1 	bl	80066dc <USB_WritePMA>
            ep->xfer_buff += len;
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005744:	441a      	add	r2, r3
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d909      	bls.n	8005770 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	621a      	str	r2, [r3, #32]
 800576e:	e008      	b.n	8005782 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	647b      	str	r3, [r7, #68]	; 0x44
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d164      	bne.n	800585c <USB_EPStartXfer+0x63c>
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a6:	4413      	add	r3, r2
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057aa:	463b      	mov	r3, r7
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	011a      	lsls	r2, r3, #4
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80057bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d112      	bne.n	80057ea <USB_EPStartXfer+0x5ca>
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e054      	b.n	8005894 <USB_EPStartXfer+0x674>
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ee:	2b3e      	cmp	r3, #62	; 0x3e
 80057f0:	d817      	bhi.n	8005822 <USB_EPStartXfer+0x602>
 80057f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d004      	beq.n	8005812 <USB_EPStartXfer+0x5f2>
 8005808:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800580c:	3301      	adds	r3, #1
 800580e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005816:	b29b      	uxth	r3, r3
 8005818:	029b      	lsls	r3, r3, #10
 800581a:	b29a      	uxth	r2, r3
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	e038      	b.n	8005894 <USB_EPStartXfer+0x674>
 8005822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <USB_EPStartXfer+0x622>
 8005838:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800583c:	3b01      	subs	r3, #1
 800583e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005846:	b29b      	uxth	r3, r3
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	b29b      	uxth	r3, r3
 800584c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005854:	b29a      	uxth	r2, r3
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e01b      	b.n	8005894 <USB_EPStartXfer+0x674>
 800585c:	463b      	mov	r3, r7
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d116      	bne.n	8005894 <USB_EPStartXfer+0x674>
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	4413      	add	r3, r2
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005882:	4413      	add	r3, r2
 8005884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005888:	643b      	str	r3, [r7, #64]	; 0x40
 800588a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588e:	b29a      	uxth	r2, r3
 8005890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005892:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	895b      	ldrh	r3, [r3, #10]
 800589a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6959      	ldr	r1, [r3, #20]
 80058a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058ae:	1d38      	adds	r0, r7, #4
 80058b0:	6800      	ldr	r0, [r0, #0]
 80058b2:	f000 ff13 	bl	80066dc <USB_WritePMA>
 80058b6:	e1e2      	b.n	8005c7e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	463b      	mov	r3, r7
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80058f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005906:	1d3b      	adds	r3, r7, #4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	663b      	str	r3, [r7, #96]	; 0x60
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800591a:	4413      	add	r3, r2
 800591c:	663b      	str	r3, [r7, #96]	; 0x60
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	011a      	lsls	r2, r3, #4
 8005926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005928:	4413      	add	r3, r2
 800592a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005934:	b29a      	uxth	r2, r3
 8005936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005938:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	891b      	ldrh	r3, [r3, #8]
 8005940:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005954:	1d38      	adds	r0, r7, #4
 8005956:	6800      	ldr	r0, [r0, #0]
 8005958:	f000 fec0 	bl	80066dc <USB_WritePMA>
 800595c:	e18f      	b.n	8005c7e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 808f 	beq.w	8005a98 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d164      	bne.n	8005a54 <USB_EPStartXfer+0x834>
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	673b      	str	r3, [r7, #112]	; 0x70
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005998:	b29b      	uxth	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800599e:	4413      	add	r3, r2
 80059a0:	673b      	str	r3, [r7, #112]	; 0x70
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	011a      	lsls	r2, r3, #4
 80059aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ac:	4413      	add	r3, r2
 80059ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d112      	bne.n	80059e2 <USB_EPStartXfer+0x7c2>
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e054      	b.n	8005a8c <USB_EPStartXfer+0x86c>
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e6:	2b3e      	cmp	r3, #62	; 0x3e
 80059e8:	d817      	bhi.n	8005a1a <USB_EPStartXfer+0x7fa>
 80059ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <USB_EPStartXfer+0x7ea>
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	3301      	adds	r3, #1
 8005a06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	029b      	lsls	r3, r3, #10
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	e038      	b.n	8005a8c <USB_EPStartXfer+0x86c>
 8005a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USB_EPStartXfer+0x81a>
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	3b01      	subs	r3, #1
 8005a36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	029b      	lsls	r3, r3, #10
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e01b      	b.n	8005a8c <USB_EPStartXfer+0x86c>
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d116      	bne.n	8005a8c <USB_EPStartXfer+0x86c>
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6c:	4413      	add	r3, r2
 8005a6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	011a      	lsls	r2, r3, #4
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a80:	677b      	str	r3, [r7, #116]	; 0x74
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	895b      	ldrh	r3, [r3, #10]
 8005a92:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005a96:	e097      	b.n	8005bc8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d168      	bne.n	8005b74 <USB_EPStartXfer+0x954>
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aba:	4413      	add	r3, r2
 8005abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	011a      	lsls	r2, r3, #4
 8005ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d112      	bne.n	8005b02 <USB_EPStartXfer+0x8e2>
 8005adc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e05d      	b.n	8005bbe <USB_EPStartXfer+0x99e>
 8005b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b06:	2b3e      	cmp	r3, #62	; 0x3e
 8005b08:	d817      	bhi.n	8005b3a <USB_EPStartXfer+0x91a>
 8005b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <USB_EPStartXfer+0x90a>
 8005b20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b24:	3301      	adds	r3, #1
 8005b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e041      	b.n	8005bbe <USB_EPStartXfer+0x99e>
 8005b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b48:	f003 031f 	and.w	r3, r3, #31
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <USB_EPStartXfer+0x93a>
 8005b50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b54:	3b01      	subs	r3, #1
 8005b56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e024      	b.n	8005bbe <USB_EPStartXfer+0x99e>
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d11f      	bne.n	8005bbe <USB_EPStartXfer+0x99e>
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b96:	4413      	add	r3, r2
 8005b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	011a      	lsls	r2, r3, #4
 8005ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	891b      	ldrh	r3, [r3, #8]
 8005bc4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bc8:	463b      	mov	r3, r7
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6959      	ldr	r1, [r3, #20]
 8005bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005bd8:	1d38      	adds	r0, r7, #4
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	f000 fd7e 	bl	80066dc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d122      	bne.n	8005c30 <USB_EPStartXfer+0xa10>
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c04:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005c08:	1d3b      	adds	r3, r7, #4
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
 8005c2e:	e026      	b.n	8005c7e <USB_EPStartXfer+0xa5e>
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d121      	bne.n	8005c7e <USB_EPStartXfer+0xa5e>
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f107 020e 	add.w	r2, r7, #14
 8005c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	8013      	strh	r3, [r2, #0]
 8005c9e:	f107 030e 	add.w	r3, r7, #14
 8005ca2:	f107 020e 	add.w	r2, r7, #14
 8005ca6:	8812      	ldrh	r2, [r2, #0]
 8005ca8:	f082 0210 	eor.w	r2, r2, #16
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f107 030e 	add.w	r3, r7, #14
 8005cb2:	f107 020e 	add.w	r2, r7, #14
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	f082 0220 	eor.w	r2, r2, #32
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	f107 030e 	add.w	r3, r7, #14
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e3b5      	b.n	8006454 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	7b1b      	ldrb	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 8090 	bne.w	8005e14 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d90e      	bls.n	8005d22 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	619a      	str	r2, [r3, #24]
 8005d20:	e008      	b.n	8005d34 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <USB_EPStartXfer+0xb7e>
 8005d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e32c      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
 8005d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da2:	2b3e      	cmp	r3, #62	; 0x3e
 8005da4:	d818      	bhi.n	8005dd8 <USB_EPStartXfer+0xbb8>
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <USB_EPStartXfer+0xba6>
 8005dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e30f      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
 8005dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_EPStartXfer+0xbd8>
 8005dee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005df8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e2f1      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	f040 818f 	bne.w	800613e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d175      	bne.n	8005f16 <USB_EPStartXfer+0xcf6>
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e42:	4413      	add	r3, r2
 8005e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d116      	bne.n	8005e96 <USB_EPStartXfer+0xc76>
 8005e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e065      	b.n	8005f62 <USB_EPStartXfer+0xd42>
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e9e:	d81a      	bhi.n	8005ed6 <USB_EPStartXfer+0xcb6>
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eac:	463b      	mov	r3, r7
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <USB_EPStartXfer+0xca4>
 8005eba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ec4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e045      	b.n	8005f62 <USB_EPStartXfer+0xd42>
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <USB_EPStartXfer+0xcda>
 8005ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005efa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	029b      	lsls	r3, r3, #10
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e025      	b.n	8005f62 <USB_EPStartXfer+0xd42>
 8005f16:	463b      	mov	r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d120      	bne.n	8005f62 <USB_EPStartXfer+0xd42>
 8005f20:	1d3b      	adds	r3, r7, #4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f38:	4413      	add	r3, r2
 8005f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d175      	bne.n	8006060 <USB_EPStartXfer+0xe40>
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f7c:	1d3b      	adds	r3, r7, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	461a      	mov	r2, r3
 8005f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d116      	bne.n	8005fe0 <USB_EPStartXfer+0xdc0>
 8005fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc4:	801a      	strh	r2, [r3, #0]
 8005fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e061      	b.n	80060a4 <USB_EPStartXfer+0xe84>
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe8:	d81a      	bhi.n	8006020 <USB_EPStartXfer+0xe00>
 8005fea:	463b      	mov	r3, r7
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <USB_EPStartXfer+0xdee>
 8006004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006008:	3301      	adds	r3, #1
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29a      	uxth	r2, r3
 8006018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e041      	b.n	80060a4 <USB_EPStartXfer+0xe84>
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602c:	463b      	mov	r3, r7
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <USB_EPStartXfer+0xe24>
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603e:	3b01      	subs	r3, #1
 8006040:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e021      	b.n	80060a4 <USB_EPStartXfer+0xe84>
 8006060:	463b      	mov	r3, r7
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d11c      	bne.n	80060a4 <USB_EPStartXfer+0xe84>
 800606a:	1d3b      	adds	r3, r7, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800607a:	4413      	add	r3, r2
 800607c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006080:	463b      	mov	r3, r7
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	011a      	lsls	r2, r3, #4
 8006088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800608c:	4413      	add	r3, r2
 800608e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 81a4 	beq.w	80063f8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060b0:	1d3b      	adds	r3, r7, #4
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <USB_EPStartXfer+0xebc>
 80060d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10d      	bne.n	80060f8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f040 8187 	bne.w	80063f8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8180 	bne.w	80063f8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	463b      	mov	r3, r7
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
 800613c:	e15c      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 8155 	bne.w	80063f4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800614a:	463b      	mov	r3, r7
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	429a      	cmp	r2, r3
 8006158:	d90e      	bls.n	8006178 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	619a      	str	r2, [r3, #24]
 8006176:	e008      	b.n	800618a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d16f      	bne.n	8006274 <USB_EPStartXfer+0x1054>
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061ac:	4413      	add	r3, r2
 80061ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b2:	463b      	mov	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061be:	4413      	add	r3, r2
 80061c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d116      	bne.n	80061fe <USB_EPStartXfer+0xfde>
 80061d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e05f      	b.n	80062be <USB_EPStartXfer+0x109e>
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006202:	2b3e      	cmp	r3, #62	; 0x3e
 8006204:	d818      	bhi.n	8006238 <USB_EPStartXfer+0x1018>
 8006206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <USB_EPStartXfer+0x1006>
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	3301      	adds	r3, #1
 8006222:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29a      	uxth	r2, r3
 8006230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	e042      	b.n	80062be <USB_EPStartXfer+0x109e>
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <USB_EPStartXfer+0x1038>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006252:	3b01      	subs	r3, #1
 8006254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	b29b      	uxth	r3, r3
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e024      	b.n	80062be <USB_EPStartXfer+0x109e>
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d11f      	bne.n	80062be <USB_EPStartXfer+0x109e>
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006286:	1d3b      	adds	r3, r7, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800628e:	b29b      	uxth	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006296:	4413      	add	r3, r2
 8006298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	011a      	lsls	r2, r3, #4
 80062a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a8:	4413      	add	r3, r2
 80062aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d16f      	bne.n	80063b0 <USB_EPStartXfer+0x1190>
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006300:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d116      	bne.n	800633a <USB_EPStartXfer+0x111a>
 800630c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006318:	b29a      	uxth	r2, r3
 800631a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e05e      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
 800633a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800633e:	2b3e      	cmp	r3, #62	; 0x3e
 8006340:	d818      	bhi.n	8006374 <USB_EPStartXfer+0x1154>
 8006342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800634c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <USB_EPStartXfer+0x1142>
 8006358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006366:	b29b      	uxth	r3, r3
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e041      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
 8006374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800637e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <USB_EPStartXfer+0x1174>
 800638a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638e:	3b01      	subs	r3, #1
 8006390:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e023      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d11e      	bne.n	80063f8 <USB_EPStartXfer+0x11d8>
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ca:	4413      	add	r3, r2
 80063cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	011a      	lsls	r2, r3, #4
 80063d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063dc:	4413      	add	r3, r2
 80063de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e001      	b.n	80063f8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e02e      	b.n	8006456 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006416:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800641a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800641e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006422:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006426:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800642a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	b29b      	uxth	r3, r3
 8006452:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d020      	beq.n	80064b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	81bb      	strh	r3, [r7, #12]
 800648a:	89bb      	ldrh	r3, [r7, #12]
 800648c:	f083 0310 	eor.w	r3, r3, #16
 8006490:	81bb      	strh	r3, [r7, #12]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	89bb      	ldrh	r3, [r7, #12]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]
 80064b2:	e01f      	b.n	80064f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	81fb      	strh	r3, [r7, #14]
 80064cc:	89fb      	ldrh	r3, [r7, #14]
 80064ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064d2:	81fb      	strh	r3, [r7, #14]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	89fb      	ldrh	r3, [r7, #14]
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	7b1b      	ldrb	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 809d 	bne.w	800664e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d04c      	beq.n	80065b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	823b      	strh	r3, [r7, #16]
 800652a:	8a3b      	ldrh	r3, [r7, #16]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <USB_EPClearStall+0x6c>
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	81fb      	strh	r3, [r7, #14]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	89fb      	ldrh	r3, [r7, #14]
 8006558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006568:	b29b      	uxth	r3, r3
 800656a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d06c      	beq.n	800664e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	81bb      	strh	r3, [r7, #12]
 800658c:	89bb      	ldrh	r3, [r7, #12]
 800658e:	f083 0320 	eor.w	r3, r3, #32
 8006592:	81bb      	strh	r3, [r7, #12]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	89bb      	ldrh	r3, [r7, #12]
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]
 80065b4:	e04b      	b.n	800664e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	82fb      	strh	r3, [r7, #22]
 80065c4:	8afb      	ldrh	r3, [r7, #22]
 80065c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01b      	beq.n	8006606 <USB_EPClearStall+0x106>
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	82bb      	strh	r3, [r7, #20]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8abb      	ldrh	r3, [r7, #20]
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	827b      	strh	r3, [r7, #18]
 800661e:	8a7b      	ldrh	r3, [r7, #18]
 8006620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006624:	827b      	strh	r3, [r7, #18]
 8006626:	8a7b      	ldrh	r3, [r7, #18]
 8006628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800662c:	827b      	strh	r3, [r7, #18]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	8a7b      	ldrh	r3, [r7, #18]
 800663a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664a:	b29b      	uxth	r3, r3
 800664c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	bc80      	pop	{r7}
 8006658:	4770      	bx	lr

0800665a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2280      	movs	r2, #128	; 0x80
 8006670:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr

08006694 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066ba:	68fb      	ldr	r3, [r7, #12]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066dc:	b480      	push	{r7}
 80066de:	b08d      	sub	sp, #52	; 0x34
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	460b      	mov	r3, r1
 80066ec:	80fb      	strh	r3, [r7, #6]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80066f2:	88bb      	ldrh	r3, [r7, #4]
 80066f4:	3301      	adds	r3, #1
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	005a      	lsls	r2, r3, #1
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006714:	e01e      	b.n	8006754 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	3301      	adds	r3, #1
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	b29a      	uxth	r2, r3
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	3302      	adds	r3, #2
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	3302      	adds	r3, #2
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	3301      	adds	r3, #1
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	3b01      	subs	r3, #1
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1dd      	bne.n	8006716 <USB_WritePMA+0x3a>
  }
}
 800675a:	bf00      	nop
 800675c:	3734      	adds	r7, #52	; 0x34
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006764:	b480      	push	{r7}
 8006766:	b08b      	sub	sp, #44	; 0x2c
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4611      	mov	r1, r2
 8006770:	461a      	mov	r2, r3
 8006772:	460b      	mov	r3, r1
 8006774:	80fb      	strh	r3, [r7, #6]
 8006776:	4613      	mov	r3, r2
 8006778:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800677a:	88bb      	ldrh	r3, [r7, #4]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	005a      	lsls	r2, r3, #1
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006796:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	e01b      	b.n	80067d6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	3302      	adds	r3, #2
 80067aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	3301      	adds	r3, #1
 80067b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	3301      	adds	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	3302      	adds	r3, #2
 80067ce:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	3b01      	subs	r3, #1
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e0      	bne.n	800679e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067dc:	88bb      	ldrh	r3, [r7, #4]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	701a      	strb	r2, [r3, #0]
  }
}
 80067f8:	bf00      	nop
 80067fa:	372c      	adds	r7, #44	; 0x2c
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	7c1b      	ldrb	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d115      	bne.n	8006842 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681a:	2202      	movs	r2, #2
 800681c:	2101      	movs	r1, #1
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fd75 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800682c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006830:	2202      	movs	r2, #2
 8006832:	2181      	movs	r1, #129	; 0x81
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 fd6a 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006840:	e012      	b.n	8006868 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	2202      	movs	r2, #2
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f002 fd60 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	2202      	movs	r2, #2
 800685a:	2181      	movs	r1, #129	; 0x81
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f002 fd56 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006868:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800686c:	f002 fe96 	bl	800959c <USBD_static_malloc>
 8006870:	4602      	mov	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006882:	2302      	movs	r3, #2
 8006884:	e003      	b.n	800688e <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f9da 	bl	8006c40 <MSC_BOT_Init>

  return USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80068a2:	2101      	movs	r1, #1
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 fd58 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80068b2:	2181      	movs	r1, #129	; 0x81
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 fd50 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa07 	bl	8006cd4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d009      	beq.n	80068e4 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 fe6c 	bl	80095b4 <USBD_static_free>
    pdev->pClassData  = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006912:	2b00      	cmp	r3, #0
 8006914:	d04d      	beq.n	80069b2 <USBD_MSC_Setup+0xc2>
 8006916:	2b20      	cmp	r3, #32
 8006918:	f040 8113 	bne.w	8006b42 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2bfe      	cmp	r3, #254	; 0xfe
 8006922:	d002      	beq.n	800692a <USBD_MSC_Setup+0x3a>
 8006924:	2bff      	cmp	r3, #255	; 0xff
 8006926:	d024      	beq.n	8006972 <USBD_MSC_Setup+0x82>
 8006928:	e03b      	b.n	80069a2 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d118      	bne.n	8006964 <USBD_MSC_Setup+0x74>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	88db      	ldrh	r3, [r3, #6]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d114      	bne.n	8006964 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006940:	2b00      	cmp	r3, #0
 8006942:	da0f      	bge.n	8006964 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	4798      	blx	r3
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2201      	movs	r2, #1
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 f983 	bl	8008c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e025      	b.n	80069b0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 f914 	bl	8008b94 <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e01e      	b.n	80069b0 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	885b      	ldrh	r3, [r3, #2]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10c      	bne.n	8006994 <USBD_MSC_Setup+0xa4>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	88db      	ldrh	r3, [r3, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d108      	bne.n	8006994 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	db03      	blt.n	8006994 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f987 	bl	8006ca0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006992:	e00d      	b.n	80069b0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f002 f8fc 	bl	8008b94 <USBD_CtlError>
            ret = USBD_FAIL;
 800699c:	2302      	movs	r3, #2
 800699e:	75fb      	strb	r3, [r7, #23]
          break;
 80069a0:	e006      	b.n	80069b0 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 f8f5 	bl	8008b94 <USBD_CtlError>
          ret = USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	bf00      	nop
      }
      break;
 80069b0:	e0ce      	b.n	8006b50 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	f200 80bb 	bhi.w	8006b32 <USBD_MSC_Setup+0x242>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_MSC_Setup+0xd4>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	08006a6b 	.word	0x08006a6b
 80069cc:	08006b33 	.word	0x08006b33
 80069d0:	08006b33 	.word	0x08006b33
 80069d4:	08006b33 	.word	0x08006b33
 80069d8:	08006b33 	.word	0x08006b33
 80069dc:	08006b33 	.word	0x08006b33
 80069e0:	08006b33 	.word	0x08006b33
 80069e4:	08006b33 	.word	0x08006b33
 80069e8:	08006b33 	.word	0x08006b33
 80069ec:	08006a1d 	.word	0x08006a1d
 80069f0:	08006a45 	.word	0x08006a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d107      	bne.n	8006a0e <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80069fe:	f107 030e 	add.w	r3, r7, #14
 8006a02:	2202      	movs	r2, #2
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f002 f92e 	bl	8008c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0c:	e098      	b.n	8006b40 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f002 f8bf 	bl	8008b94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a16:	2302      	movs	r3, #2
 8006a18:	75fb      	strb	r3, [r7, #23]
          break;
 8006a1a:	e091      	b.n	8006b40 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d107      	bne.n	8006a36 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 f91a 	bl	8008c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a34:	e084      	b.n	8006b40 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f002 f8ab 	bl	8008b94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e07d      	b.n	8006b40 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d106      	bne.n	8006a5c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a5a:	e071      	b.n	8006b40 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f002 f898 	bl	8008b94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a64:	2302      	movs	r3, #2
 8006a66:	75fb      	strb	r3, [r7, #23]
          break;
 8006a68:	e06a      	b.n	8006b40 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	889b      	ldrh	r3, [r3, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f002 fc90 	bl	8009398 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	889b      	ldrh	r3, [r3, #4]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 fc6a 	bl	800935a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	889b      	ldrh	r3, [r3, #4]
 8006a8a:	b25b      	sxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da23      	bge.n	8006ad8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	889b      	ldrh	r3, [r3, #4]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 020f 	and.w	r2, r3, #15
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7c1b      	ldrb	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab8:	2202      	movs	r2, #2
 8006aba:	2181      	movs	r1, #129	; 0x81
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 fc26 	bl	800930e <USBD_LL_OpenEP>
 8006ac2:	e005      	b.n	8006ad0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	2181      	movs	r1, #129	; 0x81
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f002 fc1f 	bl	800930e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ad6:	e024      	b.n	8006b22 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	889b      	ldrh	r3, [r3, #4]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 020f 	and.w	r2, r3, #15
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7c1b      	ldrb	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	2202      	movs	r2, #2
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f002 fc01 	bl	800930e <USBD_LL_OpenEP>
 8006b0c:	e005      	b.n	8006b1a <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006b0e:	2340      	movs	r3, #64	; 0x40
 8006b10:	2202      	movs	r2, #2
 8006b12:	2101      	movs	r1, #1
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 fbfa 	bl	800930e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	889b      	ldrh	r3, [r3, #4]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa50 	bl	8006fd0 <MSC_BOT_CplClrFeature>
          break;
 8006b30:	e006      	b.n	8006b40 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 f82d 	bl	8008b94 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3e:	bf00      	nop
      }
      break;
 8006b40:	e006      	b.n	8006b50 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f002 f825 	bl	8008b94 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4e:	bf00      	nop
  }

  return ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop

08006b5c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8c1 	bl	8006cf4 <MSC_BOT_DataIn>

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8e2 	bl	8006d56 <MSC_BOT_DataOut>

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000044 	.word	0x20000044

08006bbc <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20000064 	.word	0x20000064

08006bdc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000084 	.word	0x20000084

08006bfc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	220a      	movs	r2, #10
 8006c08:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200000a4 	.word	0x200000a4

08006c1c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2000      	movs	r0, #0
 8006c76:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f002 fb8c 	bl	8009398 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006c80:	2181      	movs	r1, #129	; 0x81
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f002 fb88 	bl	8009398 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006c8e:	231f      	movs	r3, #31
 8006c90:	2101      	movs	r1, #1
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 fc4b 	bl	800952e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cae:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006cc2:	231f      	movs	r3, #31
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 fc31 	bl	800952e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	721a      	strb	r2, [r3, #8]
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	7a1b      	ldrb	r3, [r3, #8]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d004      	beq.n	8006d1a <MSC_BOT_DataIn+0x26>
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	db19      	blt.n	8006d48 <MSC_BOT_DataIn+0x54>
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	dc17      	bgt.n	8006d48 <MSC_BOT_DataIn+0x54>
 8006d18:	e011      	b.n	8006d3e <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006d26:	461a      	mov	r2, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f979 	bl	8007020 <SCSI_ProcessCmd>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da0b      	bge.n	8006d4c <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d34:	2101      	movs	r1, #1
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8f0 	bl	8006f1c <MSC_BOT_SendCSW>
      }
      break;
 8006d3c:	e006      	b.n	8006d4c <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8eb 	bl	8006f1c <MSC_BOT_SendCSW>
      break;
 8006d46:	e002      	b.n	8006d4e <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <MSC_BOT_DataIn+0x5a>
      break;
 8006d4c:	bf00      	nop
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	7a1b      	ldrb	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <MSC_BOT_DataOut+0x22>
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d004      	beq.n	8006d80 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006d76:	e015      	b.n	8006da4 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f817 	bl	8006dac <MSC_BOT_CBW_Decode>
      break;
 8006d7e:	e011      	b.n	8006da4 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f946 	bl	8007020 <SCSI_ProcessCmd>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da03      	bge.n	8006da2 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8bd 	bl	8006f1c <MSC_BOT_SendCSW>
      break;
 8006da2:	bf00      	nop
  }
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f002 fbcc 	bl	8009574 <USBD_LL_GetRxDataSize>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b1f      	cmp	r3, #31
 8006de0:	d114      	bne.n	8006e0c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006de8:	4a32      	ldr	r2, [pc, #200]	; (8006eb4 <MSC_BOT_CBW_Decode+0x108>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10e      	bne.n	8006e0c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d809      	bhi.n	8006e0c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d90e      	bls.n	8006e2a <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006e12:	2320      	movs	r3, #32
 8006e14:	2205      	movs	r2, #5
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fc48 	bl	80076ac <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8a6 	bl	8006f74 <MSC_BOT_Abort>
 8006e28:	e041      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006e36:	461a      	mov	r2, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f8f1 	bl	8007020 <SCSI_ProcessCmd>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da0c      	bge.n	8006e5e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	7a1b      	ldrb	r3, [r3, #8]
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d104      	bne.n	8006e56 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f864 	bl	8006f1c <MSC_BOT_SendCSW>
 8006e54:	e02b      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f88c 	bl	8006f74 <MSC_BOT_Abort>
 8006e5c:	e027      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	7a1b      	ldrb	r3, [r3, #8]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d022      	beq.n	8006eac <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d01e      	beq.n	8006eac <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d01a      	beq.n	8006eac <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	895b      	ldrh	r3, [r3, #10]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f103 010c 	add.w	r1, r3, #12
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f814 	bl	8006eb8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006e90:	e00d      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f83d 	bl	8006f1c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006ea2:	e004      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f865 	bl	8006f74 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006eaa:	e000      	b.n	8006eae <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006eac:	bf00      	nop
    }
  }
}
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	43425355 	.word	0x43425355

08006eb8 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ecc:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d204      	bcs.n	8006ee4 <MSC_BOT_SendData+0x2c>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	e000      	b.n	8006ee6 <MSC_BOT_SendData+0x2e>
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	1ad2      	subs	r2, r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2204      	movs	r2, #4
 8006f04:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006f06:	8a7b      	ldrh	r3, [r7, #18]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	2181      	movs	r1, #129	; 0x81
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f002 faeb 	bl	80094e8 <USBD_LL_Transmit>
}
 8006f12:	bf00      	nop
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <MSC_BOT_SendCSW+0x54>)
 8006f34:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006f4c:	230d      	movs	r3, #13
 8006f4e:	2181      	movs	r1, #129	; 0x81
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f002 fac9 	bl	80094e8 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f5c:	231f      	movs	r3, #31
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f002 fae4 	bl	800952e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	53425355 	.word	0x53425355

08006f74 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f82:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10c      	bne.n	8006fa8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f002 fa17 	bl	80093d6 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006fa8:	2181      	movs	r1, #129	; 0x81
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 fa13 	bl	80093d6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	7a5b      	ldrb	r3, [r3, #9]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d107      	bne.n	8006fc8 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006fbe:	231f      	movs	r3, #31
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f002 fab3 	bl	800952e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	7a5b      	ldrb	r3, [r3, #9]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d107      	bne.n	8006ffc <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006fec:	2181      	movs	r1, #129	; 0x81
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f002 f9f1 	bl	80093d6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	725a      	strb	r2, [r3, #9]
 8006ffa:	e00d      	b.n	8007018 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	da08      	bge.n	8007016 <MSC_BOT_CplClrFeature+0x46>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	7a5b      	ldrb	r3, [r3, #9]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d004      	beq.n	8007016 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800700c:	2101      	movs	r1, #1
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ff84 	bl	8006f1c <MSC_BOT_SendCSW>
 8007014:	e000      	b.n	8007018 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007016:	bf00      	nop
  }
}
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	460b      	mov	r3, r1
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b5a      	cmp	r3, #90	; 0x5a
 8007034:	f200 810e 	bhi.w	8007254 <SCSI_ProcessCmd+0x234>
 8007038:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <SCSI_ProcessCmd+0x20>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	080071ad 	.word	0x080071ad
 8007044:	08007255 	.word	0x08007255
 8007048:	08007255 	.word	0x08007255
 800704c:	080071bb 	.word	0x080071bb
 8007050:	08007255 	.word	0x08007255
 8007054:	08007255 	.word	0x08007255
 8007058:	08007255 	.word	0x08007255
 800705c:	08007255 	.word	0x08007255
 8007060:	08007255 	.word	0x08007255
 8007064:	08007255 	.word	0x08007255
 8007068:	08007255 	.word	0x08007255
 800706c:	08007255 	.word	0x08007255
 8007070:	08007255 	.word	0x08007255
 8007074:	08007255 	.word	0x08007255
 8007078:	08007255 	.word	0x08007255
 800707c:	08007255 	.word	0x08007255
 8007080:	08007255 	.word	0x08007255
 8007084:	08007255 	.word	0x08007255
 8007088:	080071c9 	.word	0x080071c9
 800708c:	08007255 	.word	0x08007255
 8007090:	08007255 	.word	0x08007255
 8007094:	08007255 	.word	0x08007255
 8007098:	08007255 	.word	0x08007255
 800709c:	08007255 	.word	0x08007255
 80070a0:	08007255 	.word	0x08007255
 80070a4:	08007255 	.word	0x08007255
 80070a8:	080071f3 	.word	0x080071f3
 80070ac:	080071d7 	.word	0x080071d7
 80070b0:	08007255 	.word	0x08007255
 80070b4:	08007255 	.word	0x08007255
 80070b8:	080071e5 	.word	0x080071e5
 80070bc:	08007255 	.word	0x08007255
 80070c0:	08007255 	.word	0x08007255
 80070c4:	08007255 	.word	0x08007255
 80070c8:	08007255 	.word	0x08007255
 80070cc:	0800720f 	.word	0x0800720f
 80070d0:	08007255 	.word	0x08007255
 80070d4:	0800721d 	.word	0x0800721d
 80070d8:	08007255 	.word	0x08007255
 80070dc:	08007255 	.word	0x08007255
 80070e0:	0800722b 	.word	0x0800722b
 80070e4:	08007255 	.word	0x08007255
 80070e8:	08007239 	.word	0x08007239
 80070ec:	08007255 	.word	0x08007255
 80070f0:	08007255 	.word	0x08007255
 80070f4:	08007255 	.word	0x08007255
 80070f8:	08007255 	.word	0x08007255
 80070fc:	08007247 	.word	0x08007247
 8007100:	08007255 	.word	0x08007255
 8007104:	08007255 	.word	0x08007255
 8007108:	08007255 	.word	0x08007255
 800710c:	08007255 	.word	0x08007255
 8007110:	08007255 	.word	0x08007255
 8007114:	08007255 	.word	0x08007255
 8007118:	08007255 	.word	0x08007255
 800711c:	08007255 	.word	0x08007255
 8007120:	08007255 	.word	0x08007255
 8007124:	08007255 	.word	0x08007255
 8007128:	08007255 	.word	0x08007255
 800712c:	08007255 	.word	0x08007255
 8007130:	08007255 	.word	0x08007255
 8007134:	08007255 	.word	0x08007255
 8007138:	08007255 	.word	0x08007255
 800713c:	08007255 	.word	0x08007255
 8007140:	08007255 	.word	0x08007255
 8007144:	08007255 	.word	0x08007255
 8007148:	08007255 	.word	0x08007255
 800714c:	08007255 	.word	0x08007255
 8007150:	08007255 	.word	0x08007255
 8007154:	08007255 	.word	0x08007255
 8007158:	08007255 	.word	0x08007255
 800715c:	08007255 	.word	0x08007255
 8007160:	08007255 	.word	0x08007255
 8007164:	08007255 	.word	0x08007255
 8007168:	08007255 	.word	0x08007255
 800716c:	08007255 	.word	0x08007255
 8007170:	08007255 	.word	0x08007255
 8007174:	08007255 	.word	0x08007255
 8007178:	08007255 	.word	0x08007255
 800717c:	08007255 	.word	0x08007255
 8007180:	08007255 	.word	0x08007255
 8007184:	08007255 	.word	0x08007255
 8007188:	08007255 	.word	0x08007255
 800718c:	08007255 	.word	0x08007255
 8007190:	08007255 	.word	0x08007255
 8007194:	08007255 	.word	0x08007255
 8007198:	08007255 	.word	0x08007255
 800719c:	08007255 	.word	0x08007255
 80071a0:	08007255 	.word	0x08007255
 80071a4:	08007255 	.word	0x08007255
 80071a8:	08007201 	.word	0x08007201
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4619      	mov	r1, r3
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f85c 	bl	8007270 <SCSI_TestUnitReady>
      break;
 80071b8:	e055      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fa09 	bl	80075d8 <SCSI_RequestSense>
      break;
 80071c6:	e04e      	b.n	8007266 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f888 	bl	80072e4 <SCSI_Inquiry>
      break;
 80071d4:	e047      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fa9e 	bl	800771e <SCSI_StartStopUnit>
      break;
 80071e2:	e040      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fa97 	bl	800771e <SCSI_StartStopUnit>
      break;
 80071f0:	e039      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4619      	mov	r1, r3
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f99d 	bl	8007538 <SCSI_ModeSense6>
      break;
 80071fe:	e032      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f9be 	bl	8007588 <SCSI_ModeSense10>
      break;
 800720c:	e02b      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f92a 	bl	800746e <SCSI_ReadFormatCapacity>
      break;
 800721a:	e024      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f8bc 	bl	80073a0 <SCSI_ReadCapacity10>
      break;
 8007228:	e01d      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fa88 	bl	8007746 <SCSI_Read10>
      break;
 8007236:	e016      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4619      	mov	r1, r3
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 fb0d 	bl	800785e <SCSI_Write10>
      break;
 8007244:	e00f      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4619      	mov	r1, r3
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fbb6 	bl	80079be <SCSI_Verify10>
      break;
 8007252:	e008      	b.n	8007266 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007254:	7af9      	ldrb	r1, [r7, #11]
 8007256:	2320      	movs	r3, #32
 8007258:	2205      	movs	r2, #5
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fa26 	bl	80076ac <SCSI_SenseCode>
      return -1;
 8007260:	f04f 33ff 	mov.w	r3, #4294967295
 8007264:	e000      	b.n	8007268 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007284:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007296:	2320      	movs	r3, #32
 8007298:	2205      	movs	r2, #5
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fa06 	bl	80076ac <SCSI_SenseCode>

    return -1;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e019      	b.n	80072da <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	7afa      	ldrb	r2, [r7, #11]
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072ba:	7af9      	ldrb	r1, [r7, #11]
 80072bc:	233a      	movs	r3, #58	; 0x3a
 80072be:	2202      	movs	r2, #2
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f9f3 	bl	80076ac <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2205      	movs	r2, #5
 80072ca:	721a      	strb	r2, [r3, #8]

    return -1;
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
 80072d0:	e003      	b.n	80072da <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2200      	movs	r2, #0
 80072d6:	815a      	strh	r2, [r3, #10]

  return 0;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b089      	sub	sp, #36	; 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	460b      	mov	r3, r1
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3301      	adds	r3, #1
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d014      	beq.n	8007332 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007308:	2307      	movs	r3, #7
 800730a:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	8bfa      	ldrh	r2, [r7, #30]
 8007310:	815a      	strh	r2, [r3, #10]

    while (len)
 8007312:	e00a      	b.n	800732a <SCSI_Inquiry+0x46>
    {
      len--;
 8007314:	8bfb      	ldrh	r3, [r7, #30]
 8007316:	3b01      	subs	r3, #1
 8007318:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800731a:	8bfa      	ldrh	r2, [r7, #30]
 800731c:	8bfb      	ldrh	r3, [r7, #30]
 800731e:	491f      	ldr	r1, [pc, #124]	; (800739c <SCSI_Inquiry+0xb8>)
 8007320:	5c89      	ldrb	r1, [r1, r2]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4413      	add	r3, r2
 8007326:	460a      	mov	r2, r1
 8007328:	731a      	strb	r2, [r3, #12]
    while (len)
 800732a:	8bfb      	ldrh	r3, [r7, #30]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f1      	bne.n	8007314 <SCSI_Inquiry+0x30>
 8007330:	e02e      	b.n	8007390 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007338:	69d9      	ldr	r1, [r3, #28]
 800733a:	7afa      	ldrb	r2, [r7, #11]
 800733c:	4613      	mov	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3304      	adds	r3, #4
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	3305      	adds	r3, #5
 8007352:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	8bfa      	ldrh	r2, [r7, #30]
 800735e:	429a      	cmp	r2, r3
 8007360:	d303      	bcc.n	800736a <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3304      	adds	r3, #4
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	8bfa      	ldrh	r2, [r7, #30]
 800736e:	815a      	strh	r2, [r3, #10]

    while (len)
 8007370:	e00b      	b.n	800738a <SCSI_Inquiry+0xa6>
    {
      len--;
 8007372:	8bfb      	ldrh	r3, [r7, #30]
 8007374:	3b01      	subs	r3, #1
 8007376:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007378:	8bfb      	ldrh	r3, [r7, #30]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	441a      	add	r2, r3
 800737e:	8bfb      	ldrh	r3, [r7, #30]
 8007380:	7811      	ldrb	r1, [r2, #0]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4413      	add	r3, r2
 8007386:	460a      	mov	r2, r1
 8007388:	731a      	strb	r2, [r3, #12]
    while (len)
 800738a:	8bfb      	ldrh	r3, [r7, #30]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f0      	bne.n	8007372 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3724      	adds	r7, #36	; 0x24
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr
 800739c:	0800970c 	.word	0x0800970c

080073a0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	460b      	mov	r3, r1
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b4:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	f502 7118 	add.w	r1, r2, #608	; 0x260
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	f202 225e 	addw	r2, r2, #606	; 0x25e
 80073ca:	7af8      	ldrb	r0, [r7, #11]
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073d4:	7af9      	ldrb	r1, [r7, #11]
 80073d6:	233a      	movs	r3, #58	; 0x3a
 80073d8:	2202      	movs	r2, #2
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f966 	bl	80076ac <SCSI_SenseCode>
    return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	e03f      	b.n	8007466 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073ec:	3b01      	subs	r3, #1
 80073ee:	0e1b      	lsrs	r3, r3, #24
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073fc:	3b01      	subs	r3, #1
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	b2da      	uxtb	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800740c:	3b01      	subs	r3, #1
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	b2da      	uxtb	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b2da      	uxtb	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800742c:	161b      	asrs	r3, r3, #24
 800742e:	b2da      	uxtb	r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800743a:	141b      	asrs	r3, r3, #16
 800743c:	b2da      	uxtb	r2, r3
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	b29b      	uxth	r3, r3
 800744c:	b2da      	uxtb	r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007458:	b2da      	uxtb	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2208      	movs	r2, #8
 8007462:	815a      	strh	r2, [r3, #10]
    return 0;
 8007464:	2300      	movs	r3, #0
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	460b      	mov	r3, r1
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007484:	2300      	movs	r3, #0
 8007486:	83fb      	strh	r3, [r7, #30]
 8007488:	e007      	b.n	800749a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800748a:	8bfb      	ldrh	r3, [r7, #30]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4413      	add	r3, r2
 8007490:	2200      	movs	r2, #0
 8007492:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	3301      	adds	r3, #1
 8007498:	83fb      	strh	r3, [r7, #30]
 800749a:	8bfb      	ldrh	r3, [r7, #30]
 800749c:	2b0b      	cmp	r3, #11
 800749e:	d9f4      	bls.n	800748a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f107 0216 	add.w	r2, r7, #22
 80074ac:	f107 0110 	add.w	r1, r7, #16
 80074b0:	7af8      	ldrb	r0, [r7, #11]
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074ba:	7af9      	ldrb	r1, [r7, #11]
 80074bc:	233a      	movs	r3, #58	; 0x3a
 80074be:	2202      	movs	r2, #2
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f8f3 	bl	80076ac <SCSI_SenseCode>
    return -1;
 80074c6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ca:	e030      	b.n	800752e <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2208      	movs	r2, #8
 80074d0:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	0e1b      	lsrs	r3, r3, #24
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2202      	movs	r2, #2
 8007506:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007508:	8afb      	ldrh	r3, [r7, #22]
 800750a:	141b      	asrs	r3, r3, #16
 800750c:	b2da      	uxtb	r2, r3
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007512:	8afb      	ldrh	r3, [r7, #22]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	b29b      	uxth	r3, r3
 8007518:	b2da      	uxtb	r2, r3
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800751e:	8afb      	ldrh	r3, [r7, #22]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	220c      	movs	r2, #12
 800752a:	815a      	strh	r2, [r3, #10]
    return 0;
 800752c:	2300      	movs	r3, #0
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3720      	adds	r7, #32
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	460b      	mov	r3, r1
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800754e:	2308      	movs	r3, #8
 8007550:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	8afa      	ldrh	r2, [r7, #22]
 8007556:	815a      	strh	r2, [r3, #10]

  while (len)
 8007558:	e00a      	b.n	8007570 <SCSI_ModeSense6+0x38>
  {
    len--;
 800755a:	8afb      	ldrh	r3, [r7, #22]
 800755c:	3b01      	subs	r3, #1
 800755e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007560:	8afa      	ldrh	r2, [r7, #22]
 8007562:	8afb      	ldrh	r3, [r7, #22]
 8007564:	4907      	ldr	r1, [pc, #28]	; (8007584 <SCSI_ModeSense6+0x4c>)
 8007566:	5c89      	ldrb	r1, [r1, r2]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	460a      	mov	r2, r1
 800756e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f1      	bne.n	800755a <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	08009714 	.word	0x08009714

08007588 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	460b      	mov	r3, r1
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007596:	2308      	movs	r3, #8
 8007598:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a0:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	8afa      	ldrh	r2, [r7, #22]
 80075a6:	815a      	strh	r2, [r3, #10]

  while (len)
 80075a8:	e00a      	b.n	80075c0 <SCSI_ModeSense10+0x38>
  {
    len--;
 80075aa:	8afb      	ldrh	r3, [r7, #22]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80075b0:	8afa      	ldrh	r2, [r7, #22]
 80075b2:	8afb      	ldrh	r3, [r7, #22]
 80075b4:	4907      	ldr	r1, [pc, #28]	; (80075d4 <SCSI_ModeSense10+0x4c>)
 80075b6:	5c89      	ldrb	r1, [r1, r2]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4413      	add	r3, r2
 80075bc:	460a      	mov	r2, r1
 80075be:	731a      	strb	r2, [r3, #12]
  while (len)
 80075c0:	8afb      	ldrh	r3, [r7, #22]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f1      	bne.n	80075aa <SCSI_ModeSense10+0x22>
  }

  return 0;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	0800971c 	.word	0x0800971c

080075d8 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	460b      	mov	r3, r1
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
 80075f2:	e007      	b.n	8007604 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	3301      	adds	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	2b11      	cmp	r3, #17
 8007608:	d9f4      	bls.n	80075f4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2270      	movs	r2, #112	; 0x70
 800760e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	220c      	movs	r2, #12
 8007614:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007622:	429a      	cmp	r2, r3
 8007624:	d02e      	beq.n	8007684 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	3347      	adds	r3, #71	; 0x47
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4413      	add	r3, r2
 8007634:	791a      	ldrb	r2, [r3, #4]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	3347      	adds	r3, #71	; 0x47
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4413      	add	r3, r2
 8007648:	7a5a      	ldrb	r2, [r3, #9]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	3347      	adds	r3, #71	; 0x47
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	7a1a      	ldrb	r2, [r3, #8]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007668:	3301      	adds	r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007678:	2b04      	cmp	r3, #4
 800767a:	d103      	bne.n	8007684 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2212      	movs	r2, #18
 8007688:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b12      	cmp	r3, #18
 8007692:	d805      	bhi.n	80076a0 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	b29a      	uxth	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	4608      	mov	r0, r1
 80076b6:	4611      	mov	r1, r2
 80076b8:	461a      	mov	r2, r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	70fb      	strb	r3, [r7, #3]
 80076be:	460b      	mov	r3, r1
 80076c0:	70bb      	strb	r3, [r7, #2]
 80076c2:	4613      	mov	r3, r2
 80076c4:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076cc:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	3347      	adds	r3, #71	; 0x47
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	4413      	add	r3, r2
 80076dc:	78ba      	ldrb	r2, [r7, #2]
 80076de:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	3347      	adds	r3, #71	; 0x47
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076f8:	3301      	adds	r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007708:	2b04      	cmp	r3, #4
 800770a:	d103      	bne.n	8007714 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007714:	bf00      	nop
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr

0800771e <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	460b      	mov	r3, r1
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2200      	movs	r2, #0
 8007738:	815a      	strh	r2, [r3, #10]
  return 0;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	460b      	mov	r3, r1
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775a:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	7a1b      	ldrb	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d16e      	bne.n	8007842 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800776a:	b25b      	sxtb	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	db0a      	blt.n	8007786 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007776:	2320      	movs	r3, #32
 8007778:	2205      	movs	r2, #5
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff ff96 	bl	80076ac <SCSI_SenseCode>
      return -1;
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	e067      	b.n	8007856 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	7afa      	ldrb	r2, [r7, #11]
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800779a:	7af9      	ldrb	r1, [r7, #11]
 800779c:	233a      	movs	r3, #58	; 0x3a
 800779e:	2202      	movs	r2, #2
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff ff83 	bl	80076ac <SCSI_SenseCode>
      return -1;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
 80077aa:	e054      	b.n	8007856 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3302      	adds	r3, #2
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3303      	adds	r3, #3
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077bc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80077c6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	3205      	adds	r2, #5
 80077cc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80077ce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3307      	adds	r3, #7
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	3208      	adds	r2, #8
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077f8:	7af9      	ldrb	r1, [r7, #11]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f912 	bl	8007a24 <SCSI_CheckAddressRange>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	da02      	bge.n	800780c <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007806:	f04f 33ff 	mov.w	r3, #4294967295
 800780a:	e024      	b.n	8007856 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2202      	movs	r2, #2
 8007810:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800781e:	6979      	ldr	r1, [r7, #20]
 8007820:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	429a      	cmp	r2, r3
 800782a:	d00a      	beq.n	8007842 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007832:	2320      	movs	r3, #32
 8007834:	2205      	movs	r2, #5
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff ff38 	bl	80076ac <SCSI_SenseCode>
      return -1;
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	e009      	b.n	8007856 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007848:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 f90a 	bl	8007a68 <SCSI_ProcessRead>
 8007854:	4603      	mov	r3, r0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	460b      	mov	r3, r1
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007872:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	7a1b      	ldrb	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f040 8096 	bne.w	80079aa <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007884:	b25b      	sxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	da0a      	bge.n	80078a0 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007890:	2320      	movs	r3, #32
 8007892:	2205      	movs	r2, #5
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff09 	bl	80076ac <SCSI_SenseCode>
      return -1;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295
 800789e:	e08a      	b.n	80079b6 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	7afa      	ldrb	r2, [r7, #11]
 80078aa:	4610      	mov	r0, r2
 80078ac:	4798      	blx	r3
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80078b4:	7af9      	ldrb	r1, [r7, #11]
 80078b6:	233a      	movs	r3, #58	; 0x3a
 80078b8:	2202      	movs	r2, #2
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff fef6 	bl	80076ac <SCSI_SenseCode>
      return -1;
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	e077      	b.n	80079b6 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	7afa      	ldrb	r2, [r7, #11]
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80078da:	7af9      	ldrb	r1, [r7, #11]
 80078dc:	2327      	movs	r3, #39	; 0x27
 80078de:	2202      	movs	r2, #2
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff fee3 	bl	80076ac <SCSI_SenseCode>
      return -1;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	e064      	b.n	80079b6 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3302      	adds	r3, #2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3303      	adds	r3, #3
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078fc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3304      	adds	r3, #4
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007906:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	3205      	adds	r2, #5
 800790c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800790e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3307      	adds	r3, #7
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	3208      	adds	r2, #8
 8007922:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007924:	431a      	orrs	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007938:	7af9      	ldrb	r1, [r7, #11]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f872 	bl	8007a24 <SCSI_CheckAddressRange>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	da02      	bge.n	800794c <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	e034      	b.n	80079b6 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007958:	fb02 f303 	mul.w	r3, r2, r3
 800795c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d00a      	beq.n	8007980 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007970:	2320      	movs	r3, #32
 8007972:	2205      	movs	r2, #5
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7ff fe99 	bl	80076ac <SCSI_SenseCode>
      return -1;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	e01a      	b.n	80079b6 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007986:	bf28      	it	cs
 8007988:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800798c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2201      	movs	r2, #1
 8007992:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f103 020c 	add.w	r2, r3, #12
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	b29b      	uxth	r3, r3
 800799e:	2101      	movs	r1, #1
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f001 fdc4 	bl	800952e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e005      	b.n	80079b6 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	4619      	mov	r1, r3
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f8ce 	bl	8007b50 <SCSI_ProcessWrite>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b086      	sub	sp, #24
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	460b      	mov	r3, r1
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3301      	adds	r3, #1
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d008      	beq.n	80079f4 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80079e2:	7af9      	ldrb	r1, [r7, #11]
 80079e4:	2324      	movs	r3, #36	; 0x24
 80079e6:	2205      	movs	r2, #5
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff fe5f 	bl	80076ac <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295
 80079f2:	e013      	b.n	8007a1c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a00:	7af9      	ldrb	r1, [r7, #11]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f80e 	bl	8007a24 <SCSI_CheckAddressRange>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	da02      	bge.n	8007a14 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a12:	e003      	b.n	8007a1c <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2200      	movs	r2, #0
 8007a18:	815a      	strh	r2, [r3, #10]
  return 0;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	441a      	add	r2, r3
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d908      	bls.n	8007a5e <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007a4c:	7af9      	ldrb	r1, [r7, #11]
 8007a4e:	2321      	movs	r3, #33	; 0x21
 8007a50:	2205      	movs	r2, #5
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff fe2a 	bl	80076ac <SCSI_SenseCode>
    return -1;
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	e000      	b.n	8007a60 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
 8007a8c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	bf28      	it	cs
 8007a96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a9a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa2:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	78f8      	ldrb	r0, [r7, #3]
 8007ac2:	47a0      	blx	r4
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da08      	bge.n	8007adc <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007aca:	78f9      	ldrb	r1, [r7, #3]
 8007acc:	2311      	movs	r3, #17
 8007ace:	2204      	movs	r2, #4
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fdeb 	bl	80076ac <SCSI_SenseCode>
    return -1;
 8007ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ada:	e035      	b.n	8007b48 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f103 020c 	add.w	r2, r3, #12
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2181      	movs	r1, #129	; 0x81
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fcfd 	bl	80094e8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007afa:	4619      	mov	r1, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b02:	441a      	add	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b16:	4619      	mov	r1, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	1ad2      	subs	r2, r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2203      	movs	r2, #3
 8007b44:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd90      	pop	{r4, r7, pc}

08007b50 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007b70:	fb02 f303 	mul.w	r3, r2, r3
 8007b74:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b7c:	bf28      	it	cs
 8007b7e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b82:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8a:	695c      	ldr	r4, [r3, #20]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f103 010c 	add.w	r1, r3, #12
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	78f8      	ldrb	r0, [r7, #3]
 8007baa:	47a0      	blx	r4
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da08      	bge.n	8007bc4 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007bb2:	78f9      	ldrb	r1, [r7, #3]
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fd77 	bl	80076ac <SCSI_SenseCode>

    return -1;
 8007bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc2:	e045      	b.n	8007c50 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bd8:	441a      	add	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007bec:	4619      	mov	r1, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bf4:	1ad2      	subs	r2, r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	1ad2      	subs	r2, r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d104      	bne.n	8007c20 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff f97f 	bl	8006f1c <MSC_BOT_SendCSW>
 8007c1e:	e016      	b.n	8007c4e <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
 8007c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c34:	bf28      	it	cs
 8007c36:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c3a:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f103 020c 	add.w	r2, r3, #12
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2101      	movs	r1, #1
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fc70 	bl	800952e <USBD_LL_PrepareReceive>
  }

  return 0;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd90      	pop	{r4, r7, pc}

08007c58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e01a      	b.n	8007ca6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	79fa      	ldrb	r2, [r7, #7]
 8007c9c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 faca 	bl	8009238 <USBD_LL_Init>

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d006      	beq.n	8007cd0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
 8007cce:	e001      	b.n	8007cd4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 faf5 	bl	80092d8 <USBD_LL_Start>

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr

08007d0c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	78fa      	ldrb	r2, [r7, #3]
 8007d30:	4611      	mov	r1, r2
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	4611      	mov	r1, r2
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 feca 	bl	8008b1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d00c      	beq.n	8007dc6 <USBD_LL_SetupStage+0x56>
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d302      	bcc.n	8007db6 <USBD_LL_SetupStage+0x46>
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d010      	beq.n	8007dd6 <USBD_LL_SetupStage+0x66>
 8007db4:	e017      	b.n	8007de6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f9ca 	bl	8008158 <USBD_StdDevReq>
      break;
 8007dc4:	e01a      	b.n	8007dfc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa2c 	bl	800822c <USBD_StdItfReq>
      break;
 8007dd4:	e012      	b.n	8007dfc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa6a 	bl	80082b8 <USBD_StdEPReq>
      break;
 8007de4:	e00a      	b.n	8007dfc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 faee 	bl	80093d6 <USBD_LL_StallEP>
      break;
 8007dfa:	bf00      	nop
  }

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d14b      	bne.n	8007eb2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007e20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d134      	bne.n	8007e96 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d919      	bls.n	8007e6c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d203      	bcs.n	8007e5a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	e002      	b.n	8007e60 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 ff2d 	bl	8008cc4 <USBD_CtlContinueRx>
 8007e6a:	e038      	b.n	8007ede <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d105      	bne.n	8007e8e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 ff2a 	bl	8008ce8 <USBD_CtlSendStatus>
 8007e94:	e023      	b.n	8007ede <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9c:	2b05      	cmp	r3, #5
 8007e9e:	d11e      	bne.n	8007ede <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 fa93 	bl	80093d6 <USBD_LL_StallEP>
 8007eb0:	e015      	b.n	8007ede <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d108      	bne.n	8007eda <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	7afa      	ldrb	r2, [r7, #11]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	4798      	blx	r3
 8007ed8:	e001      	b.n	8007ede <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	e000      	b.n	8007ee0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d17f      	bne.n	8007ffc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3314      	adds	r3, #20
 8007f00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d15c      	bne.n	8007fc6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d915      	bls.n	8007f44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	1ad2      	subs	r2, r2, r3
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 feb5 	bl	8008ca0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f36:	2300      	movs	r3, #0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 faf6 	bl	800952e <USBD_LL_PrepareReceive>
 8007f42:	e04e      	b.n	8007fe2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	6912      	ldr	r2, [r2, #16]
 8007f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f50:	fb02 f201 	mul.w	r2, r2, r1
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d11c      	bne.n	8007f94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d316      	bcc.n	8007f94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d20f      	bcs.n	8007f94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fe91 	bl	8008ca0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f86:	2300      	movs	r3, #0
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f001 face 	bl	800952e <USBD_LL_PrepareReceive>
 8007f92:	e026      	b.n	8007fe2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d105      	bne.n	8007fb6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f001 fa0c 	bl	80093d6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fea5 	bl	8008d0e <USBD_CtlReceiveStatus>
 8007fc4:	e00d      	b.n	8007fe2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d004      	beq.n	8007fda <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d103      	bne.n	8007fe2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007fda:	2180      	movs	r1, #128	; 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 f9fa 	bl	80093d6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d11d      	bne.n	8008028 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fe83 	bl	8007cf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ffa:	e015      	b.n	8008028 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800800e:	2b03      	cmp	r3, #3
 8008010:	d108      	bne.n	8008024 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	7afa      	ldrb	r2, [r7, #11]
 800801c:	4611      	mov	r1, r2
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	4798      	blx	r3
 8008022:	e001      	b.n	8008028 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008024:	2302      	movs	r3, #2
 8008026:	e000      	b.n	800802a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f964 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2240      	movs	r2, #64	; 0x40
 8008052:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008056:	2340      	movs	r3, #64	; 0x40
 8008058:	2200      	movs	r2, #0
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f956 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2240      	movs	r2, #64	; 0x40
 800806c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	6852      	ldr	r2, [r2, #4]
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	4611      	mov	r1, r2
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008108:	2b04      	cmp	r3, #4
 800810a:	d105      	bne.n	8008118 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr

08008124 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008132:	2b03      	cmp	r3, #3
 8008134:	d10b      	bne.n	800814e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800816e:	2b20      	cmp	r3, #32
 8008170:	d004      	beq.n	800817c <USBD_StdDevReq+0x24>
 8008172:	2b40      	cmp	r3, #64	; 0x40
 8008174:	d002      	beq.n	800817c <USBD_StdDevReq+0x24>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <USBD_StdDevReq+0x34>
 800817a:	e04c      	b.n	8008216 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      break;
 800818a:	e049      	b.n	8008220 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b09      	cmp	r3, #9
 8008192:	d83a      	bhi.n	800820a <USBD_StdDevReq+0xb2>
 8008194:	a201      	add	r2, pc, #4	; (adr r2, 800819c <USBD_StdDevReq+0x44>)
 8008196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819a:	bf00      	nop
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	08008201 	.word	0x08008201
 80081a4:	0800820b 	.word	0x0800820b
 80081a8:	080081f7 	.word	0x080081f7
 80081ac:	0800820b 	.word	0x0800820b
 80081b0:	080081cf 	.word	0x080081cf
 80081b4:	080081c5 	.word	0x080081c5
 80081b8:	0800820b 	.word	0x0800820b
 80081bc:	080081e3 	.word	0x080081e3
 80081c0:	080081d9 	.word	0x080081d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9d4 	bl	8008574 <USBD_GetDescriptor>
          break;
 80081cc:	e022      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb37 	bl	8008844 <USBD_SetAddress>
          break;
 80081d6:	e01d      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb74 	bl	80088c8 <USBD_SetConfig>
          break;
 80081e0:	e018      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fbfd 	bl	80089e4 <USBD_GetConfig>
          break;
 80081ea:	e013      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fc2c 	bl	8008a4c <USBD_GetStatus>
          break;
 80081f4:	e00e      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc5a 	bl	8008ab2 <USBD_SetFeature>
          break;
 80081fe:	e009      	b.n	8008214 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fc69 	bl	8008ada <USBD_ClrFeature>
          break;
 8008208:	e004      	b.n	8008214 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fcc1 	bl	8008b94 <USBD_CtlError>
          break;
 8008212:	bf00      	nop
      }
      break;
 8008214:	e004      	b.n	8008220 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fcbb 	bl	8008b94 <USBD_CtlError>
      break;
 800821e:	bf00      	nop
  }

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop

0800822c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008242:	2b20      	cmp	r3, #32
 8008244:	d003      	beq.n	800824e <USBD_StdItfReq+0x22>
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d001      	beq.n	800824e <USBD_StdItfReq+0x22>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d12a      	bne.n	80082a4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008254:	3b01      	subs	r3, #1
 8008256:	2b02      	cmp	r3, #2
 8008258:	d81d      	bhi.n	8008296 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	889b      	ldrh	r3, [r3, #4]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d813      	bhi.n	800828c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	88db      	ldrh	r3, [r3, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d110      	bne.n	80082a0 <USBD_StdItfReq+0x74>
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10d      	bne.n	80082a0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fd2f 	bl	8008ce8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800828a:	e009      	b.n	80082a0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc80 	bl	8008b94 <USBD_CtlError>
          break;
 8008294:	e004      	b.n	80082a0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc7b 	bl	8008b94 <USBD_CtlError>
          break;
 800829e:	e000      	b.n	80082a2 <USBD_StdItfReq+0x76>
          break;
 80082a0:	bf00      	nop
      }
      break;
 80082a2:	e004      	b.n	80082ae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fc74 	bl	8008b94 <USBD_CtlError>
      break;
 80082ac:	bf00      	nop
  }

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	889b      	ldrh	r3, [r3, #4]
 80082ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d004      	beq.n	80082e2 <USBD_StdEPReq+0x2a>
 80082d8:	2b40      	cmp	r3, #64	; 0x40
 80082da:	d002      	beq.n	80082e2 <USBD_StdEPReq+0x2a>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <USBD_StdEPReq+0x3a>
 80082e0:	e13d      	b.n	800855e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
      break;
 80082f0:	e13a      	b.n	8008568 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d10a      	bne.n	8008314 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	e12a      	b.n	800856a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d03e      	beq.n	800839a <USBD_StdEPReq+0xe2>
 800831c:	2b03      	cmp	r3, #3
 800831e:	d002      	beq.n	8008326 <USBD_StdEPReq+0x6e>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d070      	beq.n	8008406 <USBD_StdEPReq+0x14e>
 8008324:	e115      	b.n	8008552 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832c:	2b02      	cmp	r3, #2
 800832e:	d002      	beq.n	8008336 <USBD_StdEPReq+0x7e>
 8008330:	2b03      	cmp	r3, #3
 8008332:	d015      	beq.n	8008360 <USBD_StdEPReq+0xa8>
 8008334:	e02b      	b.n	800838e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00c      	beq.n	8008356 <USBD_StdEPReq+0x9e>
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b80      	cmp	r3, #128	; 0x80
 8008340:	d009      	beq.n	8008356 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f845 	bl	80093d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800834c:	2180      	movs	r1, #128	; 0x80
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 f841 	bl	80093d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008354:	e020      	b.n	8008398 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fc1b 	bl	8008b94 <USBD_CtlError>
              break;
 800835e:	e01b      	b.n	8008398 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	885b      	ldrh	r3, [r3, #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10e      	bne.n	8008386 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00b      	beq.n	8008386 <USBD_StdEPReq+0xce>
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b80      	cmp	r3, #128	; 0x80
 8008372:	d008      	beq.n	8008386 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	88db      	ldrh	r3, [r3, #6]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 f828 	bl	80093d6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fcae 	bl	8008ce8 <USBD_CtlSendStatus>

              break;
 800838c:	e004      	b.n	8008398 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fbff 	bl	8008b94 <USBD_CtlError>
              break;
 8008396:	bf00      	nop
          }
          break;
 8008398:	e0e0      	b.n	800855c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d002      	beq.n	80083aa <USBD_StdEPReq+0xf2>
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d015      	beq.n	80083d4 <USBD_StdEPReq+0x11c>
 80083a8:	e026      	b.n	80083f8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <USBD_StdEPReq+0x112>
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b80      	cmp	r3, #128	; 0x80
 80083b4:	d009      	beq.n	80083ca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 f80b 	bl	80093d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083c0:	2180      	movs	r1, #128	; 0x80
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 f807 	bl	80093d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083c8:	e01c      	b.n	8008404 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fbe1 	bl	8008b94 <USBD_CtlError>
              break;
 80083d2:	e017      	b.n	8008404 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	885b      	ldrh	r3, [r3, #2]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d112      	bne.n	8008402 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 f812 	bl	8009414 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc79 	bl	8008ce8 <USBD_CtlSendStatus>
              }
              break;
 80083f6:	e004      	b.n	8008402 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fbca 	bl	8008b94 <USBD_CtlError>
              break;
 8008400:	e000      	b.n	8008404 <USBD_StdEPReq+0x14c>
              break;
 8008402:	bf00      	nop
          }
          break;
 8008404:	e0aa      	b.n	800855c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840c:	2b02      	cmp	r3, #2
 800840e:	d002      	beq.n	8008416 <USBD_StdEPReq+0x15e>
 8008410:	2b03      	cmp	r3, #3
 8008412:	d032      	beq.n	800847a <USBD_StdEPReq+0x1c2>
 8008414:	e097      	b.n	8008546 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <USBD_StdEPReq+0x174>
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b80      	cmp	r3, #128	; 0x80
 8008420:	d004      	beq.n	800842c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fbb5 	bl	8008b94 <USBD_CtlError>
                break;
 800842a:	e091      	b.n	8008550 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800842c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da0b      	bge.n	800844c <USBD_StdEPReq+0x194>
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	3310      	adds	r3, #16
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	3304      	adds	r3, #4
 800844a:	e00b      	b.n	8008464 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	4413      	add	r3, r2
 8008462:	3304      	adds	r3, #4
 8008464:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2202      	movs	r2, #2
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fbf8 	bl	8008c68 <USBD_CtlSendData>
              break;
 8008478:	e06a      	b.n	8008550 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800847a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	da11      	bge.n	80084a6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	f003 020f 	and.w	r2, r3, #15
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3318      	adds	r3, #24
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d117      	bne.n	80084cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fb78 	bl	8008b94 <USBD_CtlError>
                  break;
 80084a4:	e054      	b.n	8008550 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	f003 020f 	and.w	r2, r3, #15
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb65 	bl	8008b94 <USBD_CtlError>
                  break;
 80084ca:	e041      	b.n	8008550 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da0b      	bge.n	80084ec <USBD_StdEPReq+0x234>
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	3310      	adds	r3, #16
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	e00b      	b.n	8008504 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	3304      	adds	r3, #4
 8008504:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <USBD_StdEPReq+0x25a>
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b80      	cmp	r3, #128	; 0x80
 8008510:	d103      	bne.n	800851a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e00e      	b.n	8008538 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 ff97 	bl	8009452 <USBD_LL_IsStallEP>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2201      	movs	r2, #1
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	e002      	b.n	8008538 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2202      	movs	r2, #2
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb92 	bl	8008c68 <USBD_CtlSendData>
              break;
 8008544:	e004      	b.n	8008550 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb23 	bl	8008b94 <USBD_CtlError>
              break;
 800854e:	bf00      	nop
          }
          break;
 8008550:	e004      	b.n	800855c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fb1d 	bl	8008b94 <USBD_CtlError>
          break;
 800855a:	bf00      	nop
      }
      break;
 800855c:	e004      	b.n	8008568 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb17 	bl	8008b94 <USBD_CtlError>
      break;
 8008566:	bf00      	nop
  }

  return ret;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	885b      	ldrh	r3, [r3, #2]
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	2b06      	cmp	r3, #6
 8008596:	f200 8128 	bhi.w	80087ea <USBD_GetDescriptor+0x276>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBD_GetDescriptor+0x2c>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085bd 	.word	0x080085bd
 80085a4:	080085d5 	.word	0x080085d5
 80085a8:	08008615 	.word	0x08008615
 80085ac:	080087eb 	.word	0x080087eb
 80085b0:	080087eb 	.word	0x080087eb
 80085b4:	0800878b 	.word	0x0800878b
 80085b8:	080087b7 	.word	0x080087b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
      break;
 80085d2:	e112      	b.n	80087fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	7c1b      	ldrb	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f107 0208 	add.w	r2, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085f6:	e100      	b.n	80087fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	f107 0208 	add.w	r2, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	2202      	movs	r2, #2
 8008610:	701a      	strb	r2, [r3, #0]
      break;
 8008612:	e0f2      	b.n	80087fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	885b      	ldrh	r3, [r3, #2]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b05      	cmp	r3, #5
 800861c:	f200 80ac 	bhi.w	8008778 <USBD_GetDescriptor+0x204>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <USBD_GetDescriptor+0xb4>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	08008641 	.word	0x08008641
 800862c:	08008675 	.word	0x08008675
 8008630:	080086a9 	.word	0x080086a9
 8008634:	080086dd 	.word	0x080086dd
 8008638:	08008711 	.word	0x08008711
 800863c:	08008745 	.word	0x08008745
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e091      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa94 	bl	8008b94 <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e089      	b.n	8008788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e077      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa7a 	bl	8008b94 <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e06f      	b.n	8008788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7c12      	ldrb	r2, [r2, #16]
 80086c0:	f107 0108 	add.w	r1, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ca:	e05d      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa60 	bl	8008b94 <USBD_CtlError>
            err++;
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	3301      	adds	r3, #1
 80086d8:	72fb      	strb	r3, [r7, #11]
          break;
 80086da:	e055      	b.n	8008788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	7c12      	ldrb	r2, [r2, #16]
 80086f4:	f107 0108 	add.w	r1, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fe:	e043      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa46 	bl	8008b94 <USBD_CtlError>
            err++;
 8008708:	7afb      	ldrb	r3, [r7, #11]
 800870a:	3301      	adds	r3, #1
 800870c:	72fb      	strb	r3, [r7, #11]
          break;
 800870e:	e03b      	b.n	8008788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	f107 0108 	add.w	r1, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008732:	e029      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa2c 	bl	8008b94 <USBD_CtlError>
            err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
          break;
 8008742:	e021      	b.n	8008788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00b      	beq.n	8008768 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	7c12      	ldrb	r2, [r2, #16]
 800875c:	f107 0108 	add.w	r1, r7, #8
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
 8008764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008766:	e00f      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa12 	bl	8008b94 <USBD_CtlError>
            err++;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	3301      	adds	r3, #1
 8008774:	72fb      	strb	r3, [r7, #11]
          break;
 8008776:	e007      	b.n	8008788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa0a 	bl	8008b94 <USBD_CtlError>
          err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008786:	e038      	b.n	80087fa <USBD_GetDescriptor+0x286>
 8008788:	e037      	b.n	80087fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7c1b      	ldrb	r3, [r3, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d109      	bne.n	80087a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879a:	f107 0208 	add.w	r2, r7, #8
 800879e:	4610      	mov	r0, r2
 80087a0:	4798      	blx	r3
 80087a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087a4:	e029      	b.n	80087fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9f3 	bl	8008b94 <USBD_CtlError>
        err++;
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	3301      	adds	r3, #1
 80087b2:	72fb      	strb	r3, [r7, #11]
      break;
 80087b4:	e021      	b.n	80087fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	f107 0208 	add.w	r2, r7, #8
 80087ca:	4610      	mov	r0, r2
 80087cc:	4798      	blx	r3
 80087ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	2207      	movs	r2, #7
 80087d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087d8:	e00f      	b.n	80087fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f9d9 	bl	8008b94 <USBD_CtlError>
        err++;
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	3301      	adds	r3, #1
 80087e6:	72fb      	strb	r3, [r7, #11]
      break;
 80087e8:	e007      	b.n	80087fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f9d1 	bl	8008b94 <USBD_CtlError>
      err++;
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	3301      	adds	r3, #1
 80087f6:	72fb      	strb	r3, [r7, #11]
      break;
 80087f8:	bf00      	nop
  }

  if (err != 0U)
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d11c      	bne.n	800883a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008800:	893b      	ldrh	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d011      	beq.n	800882a <USBD_GetDescriptor+0x2b6>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	88da      	ldrh	r2, [r3, #6]
 8008812:	893b      	ldrh	r3, [r7, #8]
 8008814:	4293      	cmp	r3, r2
 8008816:	bf28      	it	cs
 8008818:	4613      	movcs	r3, r2
 800881a:	b29b      	uxth	r3, r3
 800881c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800881e:	893b      	ldrh	r3, [r7, #8]
 8008820:	461a      	mov	r2, r3
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa1f 	bl	8008c68 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	88db      	ldrh	r3, [r3, #6]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d104      	bne.n	800883c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa58 	bl	8008ce8 <USBD_CtlSendStatus>
 8008838:	e000      	b.n	800883c <USBD_GetDescriptor+0x2c8>
    return;
 800883a:	bf00      	nop
    }
  }
}
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop

08008844 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	889b      	ldrh	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d130      	bne.n	80088b8 <USBD_SetAddress+0x74>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d12c      	bne.n	80088b8 <USBD_SetAddress+0x74>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	885b      	ldrh	r3, [r3, #2]
 8008862:	2b7f      	cmp	r3, #127	; 0x7f
 8008864:	d828      	bhi.n	80088b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008878:	2b03      	cmp	r3, #3
 800887a:	d104      	bne.n	8008886 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f988 	bl	8008b94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008884:	e01c      	b.n	80088c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fe09 	bl	80094aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fa25 	bl	8008ce8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ac:	e008      	b.n	80088c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b6:	e003      	b.n	80088c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f96a 	bl	8008b94 <USBD_CtlError>
  }
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	885b      	ldrh	r3, [r3, #2]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	4b41      	ldr	r3, [pc, #260]	; (80089e0 <USBD_SetConfig+0x118>)
 80088da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088dc:	4b40      	ldr	r3, [pc, #256]	; (80089e0 <USBD_SetConfig+0x118>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d904      	bls.n	80088ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f954 	bl	8008b94 <USBD_CtlError>
 80088ec:	e075      	b.n	80089da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d002      	beq.n	80088fe <USBD_SetConfig+0x36>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d023      	beq.n	8008944 <USBD_SetConfig+0x7c>
 80088fc:	e062      	b.n	80089c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088fe:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <USBD_SetConfig+0x118>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d01a      	beq.n	800893c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008906:	4b36      	ldr	r3, [pc, #216]	; (80089e0 <USBD_SetConfig+0x118>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008918:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <USBD_SetConfig+0x118>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff f9f4 	bl	8007d0c <USBD_SetClassConfig>
 8008924:	4603      	mov	r3, r0
 8008926:	2b02      	cmp	r3, #2
 8008928:	d104      	bne.n	8008934 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f931 	bl	8008b94 <USBD_CtlError>
            return;
 8008932:	e052      	b.n	80089da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f9d7 	bl	8008ce8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800893a:	e04e      	b.n	80089da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f9d3 	bl	8008ce8 <USBD_CtlSendStatus>
        break;
 8008942:	e04a      	b.n	80089da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008944:	4b26      	ldr	r3, [pc, #152]	; (80089e0 <USBD_SetConfig+0x118>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d112      	bne.n	8008972 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008954:	4b22      	ldr	r3, [pc, #136]	; (80089e0 <USBD_SetConfig+0x118>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800895e:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <USBD_SetConfig+0x118>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff f9f0 	bl	8007d4a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9bc 	bl	8008ce8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008970:	e033      	b.n	80089da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008972:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <USBD_SetConfig+0x118>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d01d      	beq.n	80089bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff f9de 	bl	8007d4a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <USBD_SetConfig+0x118>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008998:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <USBD_SetConfig+0x118>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff f9b4 	bl	8007d0c <USBD_SetClassConfig>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d104      	bne.n	80089b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8f1 	bl	8008b94 <USBD_CtlError>
            return;
 80089b2:	e012      	b.n	80089da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f997 	bl	8008ce8 <USBD_CtlSendStatus>
        break;
 80089ba:	e00e      	b.n	80089da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f993 	bl	8008ce8 <USBD_CtlSendStatus>
        break;
 80089c2:	e00a      	b.n	80089da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8e4 	bl	8008b94 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80089cc:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <USBD_SetConfig+0x118>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff f9b9 	bl	8007d4a <USBD_ClrClassConfig>
        break;
 80089d8:	bf00      	nop
    }
  }
}
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	2000013c 	.word	0x2000013c

080089e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d004      	beq.n	8008a00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8cb 	bl	8008b94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089fe:	e021      	b.n	8008a44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	db17      	blt.n	8008a3a <USBD_GetConfig+0x56>
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	dd02      	ble.n	8008a14 <USBD_GetConfig+0x30>
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d00b      	beq.n	8008a2a <USBD_GetConfig+0x46>
 8008a12:	e012      	b.n	8008a3a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f920 	bl	8008c68 <USBD_CtlSendData>
        break;
 8008a28:	e00c      	b.n	8008a44 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f918 	bl	8008c68 <USBD_CtlSendData>
        break;
 8008a38:	e004      	b.n	8008a44 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8a9 	bl	8008b94 <USBD_CtlError>
        break;
 8008a42:	bf00      	nop
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d81e      	bhi.n	8008aa0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	88db      	ldrh	r3, [r3, #6]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d004      	beq.n	8008a74 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f891 	bl	8008b94 <USBD_CtlError>
        break;
 8008a72:	e01a      	b.n	8008aaa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f043 0202 	orr.w	r2, r3, #2
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	330c      	adds	r3, #12
 8008a94:	2202      	movs	r2, #2
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f8e5 	bl	8008c68 <USBD_CtlSendData>
      break;
 8008a9e:	e004      	b.n	8008aaa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f876 	bl	8008b94 <USBD_CtlError>
      break;
 8008aa8:	bf00      	nop
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	885b      	ldrh	r3, [r3, #2]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d106      	bne.n	8008ad2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f90b 	bl	8008ce8 <USBD_CtlSendStatus>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d80b      	bhi.n	8008b08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	885b      	ldrh	r3, [r3, #2]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d10c      	bne.n	8008b12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f8f1 	bl	8008ce8 <USBD_CtlSendStatus>
      }
      break;
 8008b06:	e004      	b.n	8008b12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f842 	bl	8008b94 <USBD_CtlError>
      break;
 8008b10:	e000      	b.n	8008b14 <USBD_ClrFeature+0x3a>
      break;
 8008b12:	bf00      	nop
  }
}
 8008b14:	bf00      	nop
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	785a      	ldrb	r2, [r3, #1]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	3302      	adds	r3, #2
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	3303      	adds	r3, #3
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	3304      	adds	r3, #4
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	3305      	adds	r3, #5
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	3306      	adds	r3, #6
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3307      	adds	r3, #7
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	4413      	add	r3, r2
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	80da      	strh	r2, [r3, #6]

}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b9e:	2180      	movs	r1, #128	; 0x80
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fc18 	bl	80093d6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc14 	bl	80093d6 <USBD_LL_StallEP>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b086      	sub	sp, #24
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d032      	beq.n	8008c32 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f834 	bl	8008c3a <USBD_GetLen>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	75fa      	strb	r2, [r7, #23]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	75fa      	strb	r2, [r7, #23]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	2203      	movs	r2, #3
 8008c00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008c02:	e012      	b.n	8008c2a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	60fa      	str	r2, [r7, #12]
 8008c0a:	7dfa      	ldrb	r2, [r7, #23]
 8008c0c:	1c51      	adds	r1, r2, #1
 8008c0e:	75f9      	strb	r1, [r7, #23]
 8008c10:	4611      	mov	r1, r2
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	440a      	add	r2, r1
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	75fa      	strb	r2, [r7, #23]
 8008c20:	461a      	mov	r2, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	4413      	add	r3, r2
 8008c26:	2200      	movs	r2, #0
 8008c28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e8      	bne.n	8008c04 <USBD_GetString+0x4e>
    }
  }
}
 8008c32:	bf00      	nop
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c46:	e005      	b.n	8008c54 <USBD_GetLen+0x1a>
  {
    len++;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3301      	adds	r3, #1
 8008c52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f5      	bne.n	8008c48 <USBD_GetLen+0xe>
  }

  return len;
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	2100      	movs	r1, #0
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fc29 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fc17 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 fc28 	bl	800952e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2204      	movs	r2, #4
 8008cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fbf2 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	2200      	movs	r2, #0
 8008d22:	2100      	movs	r1, #0
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fc02 	bl	800952e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4912      	ldr	r1, [pc, #72]	; (8008d84 <MX_USB_DEVICE_Init+0x50>)
 8008d3c:	4812      	ldr	r0, [pc, #72]	; (8008d88 <MX_USB_DEVICE_Init+0x54>)
 8008d3e:	f7fe ff8b 	bl	8007c58 <USBD_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d48:	f7f7 fb86 	bl	8000458 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008d4c:	490f      	ldr	r1, [pc, #60]	; (8008d8c <MX_USB_DEVICE_Init+0x58>)
 8008d4e:	480e      	ldr	r0, [pc, #56]	; (8008d88 <MX_USB_DEVICE_Init+0x54>)
 8008d50:	f7fe ffad 	bl	8007cae <USBD_RegisterClass>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d5a:	f7f7 fb7d 	bl	8000458 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008d5e:	490c      	ldr	r1, [pc, #48]	; (8008d90 <MX_USB_DEVICE_Init+0x5c>)
 8008d60:	4809      	ldr	r0, [pc, #36]	; (8008d88 <MX_USB_DEVICE_Init+0x54>)
 8008d62:	f7fd ff5b 	bl	8006c1c <USBD_MSC_RegisterStorage>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d6c:	f7f7 fb74 	bl	8000458 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d70:	4805      	ldr	r0, [pc, #20]	; (8008d88 <MX_USB_DEVICE_Init+0x54>)
 8008d72:	f7fe ffb5 	bl	8007ce0 <USBD_Start>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d7c:	f7f7 fb6c 	bl	8000458 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d80:	bf00      	nop
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	200000b0 	.word	0x200000b0
 8008d88:	20000438 	.word	0x20000438
 8008d8c:	2000000c 	.word	0x2000000c
 8008d90:	20000100 	.word	0x20000100

08008d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2212      	movs	r2, #18
 8008da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008da6:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	200000cc 	.word	0x200000cc

08008db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2204      	movs	r2, #4
 8008dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	200000e0 	.word	0x200000e0

08008ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df4:	f7ff fedf 	bl	8008bb6 <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	; (8008e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e00:	f7ff fed9 	bl	8008bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200006fc 	.word	0x200006fc
 8008e14:	080096b8 	.word	0x080096b8

08008e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4904      	ldr	r1, [pc, #16]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e28:	4804      	ldr	r0, [pc, #16]	; (8008e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e2a:	f7ff fec4 	bl	8008bb6 <USBD_GetString>
  return USBD_StrDesc;
 8008e2e:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	200006fc 	.word	0x200006fc
 8008e3c:	080096cc 	.word	0x080096cc

08008e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	221a      	movs	r2, #26
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e52:	f000 f843 	bl	8008edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e56:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200000e4 	.word	0x200000e4

08008e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e7c:	f7ff fe9b 	bl	8008bb6 <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e88:	f7ff fe95 	bl	8008bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200006fc 	.word	0x200006fc
 8008e9c:	080096e0 	.word	0x080096e0

08008ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4907      	ldr	r1, [pc, #28]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb6:	4808      	ldr	r0, [pc, #32]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb8:	f7ff fe7d 	bl	8008bb6 <USBD_GetString>
 8008ebc:	e004      	b.n	8008ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4904      	ldr	r1, [pc, #16]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ec4:	f7ff fe77 	bl	8008bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec8:	4b02      	ldr	r3, [pc, #8]	; (8008ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	200006fc 	.word	0x200006fc
 8008ed8:	080096ec 	.word	0x080096ec

08008edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <Get_SerialNum+0x44>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <Get_SerialNum+0x48>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <Get_SerialNum+0x4c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f02:	2208      	movs	r2, #8
 8008f04:	4909      	ldr	r1, [pc, #36]	; (8008f2c <Get_SerialNum+0x50>)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f814 	bl	8008f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	4908      	ldr	r1, [pc, #32]	; (8008f30 <Get_SerialNum+0x54>)
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f000 f80f 	bl	8008f34 <IntToUnicode>
  }
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	1ffff7e8 	.word	0x1ffff7e8
 8008f24:	1ffff7ec 	.word	0x1ffff7ec
 8008f28:	1ffff7f0 	.word	0x1ffff7f0
 8008f2c:	200000e6 	.word	0x200000e6
 8008f30:	200000f6 	.word	0x200000f6

08008f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
 8008f4a:	e027      	b.n	8008f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d80b      	bhi.n	8008f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	0f1b      	lsrs	r3, r3, #28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	440b      	add	r3, r1
 8008f64:	3230      	adds	r2, #48	; 0x30
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e00a      	b.n	8008f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0f1b      	lsrs	r3, r3, #28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3237      	adds	r2, #55	; 0x37
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	7dfa      	ldrb	r2, [r7, #23]
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3d3      	bcc.n	8008f4c <IntToUnicode+0x18>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	return (USBD_OK);
 8008fb8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_GetCardInfo(&hsd, &SDCardInfo);
 8008fd2:	4909      	ldr	r1, [pc, #36]	; (8008ff8 <STORAGE_GetCapacity_FS+0x34>)
 8008fd4:	4809      	ldr	r0, [pc, #36]	; (8008ffc <STORAGE_GetCapacity_FS+0x38>)
 8008fd6:	f7fa fc63 	bl	80038a0 <HAL_SD_GetCardInfo>
	*block_num  = SDCardInfo.BlockNbr;
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <STORAGE_GetCapacity_FS+0x34>)
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	601a      	str	r2, [r3, #0]
	*block_size = SDCardInfo.BlockSize;
 8008fe2:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <STORAGE_GetCapacity_FS+0x34>)
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	801a      	strh	r2, [r3, #0]
	return (USBD_OK);
 8008fec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200008fc 	.word	0x200008fc
 8008ffc:	200003b0 	.word	0x200003b0

08009000 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800900a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	4603      	mov	r3, r0
 800901e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
	return (USBD_OK);
 8009020:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr

0800902c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af02      	add	r7, sp, #8
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	461a      	mov	r2, r3
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
 800903c:	4613      	mov	r3, r2
 800903e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, 10);
 8009040:	89ba      	ldrh	r2, [r7, #12]
 8009042:	230a      	movs	r3, #10
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4613      	mov	r3, r2
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	4805      	ldr	r0, [pc, #20]	; (8009064 <STORAGE_Read_FS+0x38>)
 800904e:	f7f9 fee7 	bl	8002e20 <HAL_SD_ReadBlocks>
	HAL_SD_GetCardState(&hsd);
 8009052:	4804      	ldr	r0, [pc, #16]	; (8009064 <STORAGE_Read_FS+0x38>)
 8009054:	f7fa fc4f 	bl	80038f6 <HAL_SD_GetCardState>
	return (USBD_OK);
 8009058:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	200003b0 	.word	0x200003b0

08009068 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	461a      	mov	r2, r3
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	4613      	mov	r3, r2
 800907a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, 10);
 800907c:	89ba      	ldrh	r2, [r7, #12]
 800907e:	230a      	movs	r3, #10
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	4613      	mov	r3, r2
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	4805      	ldr	r0, [pc, #20]	; (80090a0 <STORAGE_Write_FS+0x38>)
 800908a:	f7fa f8c3 	bl	8003214 <HAL_SD_WriteBlocks>
	HAL_SD_GetCardState(&hsd);
 800908e:	4804      	ldr	r0, [pc, #16]	; (80090a0 <STORAGE_Write_FS+0x38>)
 8009090:	f7fa fc31 	bl	80038f6 <HAL_SD_GetCardState>
	return (USBD_OK);
 8009094:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200003b0 	.word	0x200003b0

080090a4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 80090a8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr
	...

080090b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a0d      	ldr	r2, [pc, #52]	; (80090f8 <HAL_PCD_MspInit+0x44>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d113      	bne.n	80090ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <HAL_PCD_MspInit+0x48>)
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	4a0c      	ldr	r2, [pc, #48]	; (80090fc <HAL_PCD_MspInit+0x48>)
 80090cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090d0:	61d3      	str	r3, [r2, #28]
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <HAL_PCD_MspInit+0x48>)
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80090de:	2200      	movs	r2, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	2014      	movs	r0, #20
 80090e4:	f7f7 fc01 	bl	80008ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80090e8:	2014      	movs	r0, #20
 80090ea:	f7f7 fc1a 	bl	8000922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40005c00 	.word	0x40005c00
 80090fc:	40021000 	.word	0x40021000

08009100 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe fe2a 	bl	8007d70 <USBD_LL_SetupStage>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	440b      	add	r3, r1
 8009144:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	4619      	mov	r1, r3
 800914e:	f7fe fe5a 	bl	8007e06 <USBD_LL_DataOutStage>
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	460b      	mov	r3, r1
 8009164:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800916c:	78fa      	ldrb	r2, [r7, #3]
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	440b      	add	r3, r1
 800917a:	333c      	adds	r3, #60	; 0x3c
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	4619      	mov	r1, r3
 8009182:	f7fe feb1 	bl	8007ee8 <USBD_LL_DataInStage>
}
 8009186:	bf00      	nop
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe ffc1 	bl	8008124 <USBD_LL_SOF>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091b2:	2301      	movs	r3, #1
 80091b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d001      	beq.n	80091c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091be:	f7f7 f94b 	bl	8000458 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fe ff71 	bl	80080b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe ff2a 	bl	8008032 <USBD_LL_Reset>
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe ff6b 	bl	80080d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009204:	4b04      	ldr	r3, [pc, #16]	; (8009218 <HAL_PCD_SuspendCallback+0x30>)
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	4a03      	ldr	r2, [pc, #12]	; (8009218 <HAL_PCD_SuspendCallback+0x30>)
 800920a:	f043 0306 	orr.w	r3, r3, #6
 800920e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	e000ed00 	.word	0xe000ed00

0800921c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe ff65 	bl	80080fa <USBD_LL_Resume>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009240:	4a23      	ldr	r2, [pc, #140]	; (80092d0 <USBD_LL_Init+0x98>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <USBD_LL_Init+0x98>)
 800924c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009250:	4b1f      	ldr	r3, [pc, #124]	; (80092d0 <USBD_LL_Init+0x98>)
 8009252:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <USBD_LL_Init+0x9c>)
 8009254:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009256:	4b1e      	ldr	r3, [pc, #120]	; (80092d0 <USBD_LL_Init+0x98>)
 8009258:	2208      	movs	r2, #8
 800925a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800925c:	4b1c      	ldr	r3, [pc, #112]	; (80092d0 <USBD_LL_Init+0x98>)
 800925e:	2202      	movs	r2, #2
 8009260:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009262:	4b1b      	ldr	r3, [pc, #108]	; (80092d0 <USBD_LL_Init+0x98>)
 8009264:	2200      	movs	r2, #0
 8009266:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <USBD_LL_Init+0x98>)
 800926a:	2200      	movs	r2, #0
 800926c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800926e:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <USBD_LL_Init+0x98>)
 8009270:	2200      	movs	r2, #0
 8009272:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009274:	4816      	ldr	r0, [pc, #88]	; (80092d0 <USBD_LL_Init+0x98>)
 8009276:	f7f7 fcf1 	bl	8000c5c <HAL_PCD_Init>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009280:	f7f7 f8ea 	bl	8000458 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800928a:	2318      	movs	r3, #24
 800928c:	2200      	movs	r2, #0
 800928e:	2100      	movs	r1, #0
 8009290:	f7f9 f852 	bl	8002338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800929a:	2358      	movs	r3, #88	; 0x58
 800929c:	2200      	movs	r2, #0
 800929e:	2180      	movs	r1, #128	; 0x80
 80092a0:	f7f9 f84a 	bl	8002338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092aa:	2398      	movs	r3, #152	; 0x98
 80092ac:	2200      	movs	r2, #0
 80092ae:	2181      	movs	r1, #129	; 0x81
 80092b0:	f7f9 f842 	bl	8002338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ba:	23d8      	movs	r3, #216	; 0xd8
 80092bc:	2200      	movs	r2, #0
 80092be:	2101      	movs	r1, #1
 80092c0:	f7f9 f83a 	bl	8002338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	2000091c 	.word	0x2000091c
 80092d4:	40005c00 	.word	0x40005c00

080092d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f7 fdbf 	bl	8000e72 <HAL_PCD_Start>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f96e 	bl	80095dc <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	461a      	mov	r2, r3
 800931c:	4603      	mov	r3, r0
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	460b      	mov	r3, r1
 8009322:	70bb      	strb	r3, [r7, #2]
 8009324:	4613      	mov	r3, r2
 8009326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009336:	78bb      	ldrb	r3, [r7, #2]
 8009338:	883a      	ldrh	r2, [r7, #0]
 800933a:	78f9      	ldrb	r1, [r7, #3]
 800933c:	f7f7 ff39 	bl	80011b2 <HAL_PCD_EP_Open>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f948 	bl	80095dc <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7f7 ff80 	bl	800127e <HAL_PCD_EP_Close>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f929 	bl	80095dc <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7f8 f8f4 	bl	80015a4 <HAL_PCD_EP_Flush>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f90a 	bl	80095dc <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7f8 f821 	bl	800143c <HAL_PCD_EP_SetStall>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f8eb 	bl	80095dc <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800942e:	78fa      	ldrb	r2, [r7, #3]
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7f8 f862 	bl	80014fc <HAL_PCD_EP_ClrStall>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f8cc 	bl	80095dc <USBD_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009448:	7bbb      	ldrb	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009464:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800946a:	2b00      	cmp	r3, #0
 800946c:	da0c      	bge.n	8009488 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	68f9      	ldr	r1, [r7, #12]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	440b      	add	r3, r1
 8009482:	3302      	adds	r3, #2
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	e00b      	b.n	80094a0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800948e:	68f9      	ldr	r1, [r7, #12]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	440b      	add	r3, r1
 800949a:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800949e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f7 fe4d 	bl	8001168 <HAL_PCD_SetAddress>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f881 	bl	80095dc <USBD_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	461a      	mov	r2, r3
 80094f4:	460b      	mov	r3, r1
 80094f6:	72fb      	strb	r3, [r7, #11]
 80094f8:	4613      	mov	r3, r2
 80094fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	7af9      	ldrb	r1, [r7, #11]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	f7f7 ff51 	bl	80013b6 <HAL_PCD_EP_Transmit>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 f85e 	bl	80095dc <USBD_Get_USB_Status>
 8009520:	4603      	mov	r3, r0
 8009522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009524:	7dbb      	ldrb	r3, [r7, #22]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b086      	sub	sp, #24
 8009532:	af00      	add	r7, sp, #0
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	461a      	mov	r2, r3
 800953a:	460b      	mov	r3, r1
 800953c:	72fb      	strb	r3, [r7, #11]
 800953e:	4613      	mov	r3, r2
 8009540:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009550:	893b      	ldrh	r3, [r7, #8]
 8009552:	7af9      	ldrb	r1, [r7, #11]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	f7f7 feda 	bl	800130e <HAL_PCD_EP_Receive>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f83b 	bl	80095dc <USBD_Get_USB_Status>
 8009566:	4603      	mov	r3, r0
 8009568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800956a:	7dbb      	ldrb	r3, [r7, #22]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7f7 fefc 	bl	8001388 <HAL_PCD_EP_GetRxCount>
 8009590:	4603      	mov	r3, r0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <USBD_static_malloc+0x14>)
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr
 80095b0:	20000140 	.word	0x20000140

080095b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bc80      	pop	{r7}
 80095da:	4770      	bx	lr

080095dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d817      	bhi.n	8009620 <USBD_Get_USB_Status+0x44>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_Get_USB_Status+0x1c>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800960f 	.word	0x0800960f
 8009600:	08009615 	.word	0x08009615
 8009604:	0800961b 	.word	0x0800961b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	e00b      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800960e:	2302      	movs	r3, #2
 8009610:	73fb      	strb	r3, [r7, #15]
    break;
 8009612:	e008      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
    break;
 8009618:	e005      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	73fb      	strb	r3, [r7, #15]
    break;
 800961e:	e002      	b.n	8009626 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009620:	2302      	movs	r3, #2
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	bf00      	nop
  }
  return usb_status;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop

08009634 <__libc_init_array>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	2500      	movs	r5, #0
 8009638:	4e0c      	ldr	r6, [pc, #48]	; (800966c <__libc_init_array+0x38>)
 800963a:	4c0d      	ldr	r4, [pc, #52]	; (8009670 <__libc_init_array+0x3c>)
 800963c:	1ba4      	subs	r4, r4, r6
 800963e:	10a4      	asrs	r4, r4, #2
 8009640:	42a5      	cmp	r5, r4
 8009642:	d109      	bne.n	8009658 <__libc_init_array+0x24>
 8009644:	f000 f822 	bl	800968c <_init>
 8009648:	2500      	movs	r5, #0
 800964a:	4e0a      	ldr	r6, [pc, #40]	; (8009674 <__libc_init_array+0x40>)
 800964c:	4c0a      	ldr	r4, [pc, #40]	; (8009678 <__libc_init_array+0x44>)
 800964e:	1ba4      	subs	r4, r4, r6
 8009650:	10a4      	asrs	r4, r4, #2
 8009652:	42a5      	cmp	r5, r4
 8009654:	d105      	bne.n	8009662 <__libc_init_array+0x2e>
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800965c:	4798      	blx	r3
 800965e:	3501      	adds	r5, #1
 8009660:	e7ee      	b.n	8009640 <__libc_init_array+0xc>
 8009662:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009666:	4798      	blx	r3
 8009668:	3501      	adds	r5, #1
 800966a:	e7f2      	b.n	8009652 <__libc_init_array+0x1e>
 800966c:	08009748 	.word	0x08009748
 8009670:	08009748 	.word	0x08009748
 8009674:	08009748 	.word	0x08009748
 8009678:	0800974c 	.word	0x0800974c

0800967c <memset>:
 800967c:	4603      	mov	r3, r0
 800967e:	4402      	add	r2, r0
 8009680:	4293      	cmp	r3, r2
 8009682:	d100      	bne.n	8009686 <memset+0xa>
 8009684:	4770      	bx	lr
 8009686:	f803 1b01 	strb.w	r1, [r3], #1
 800968a:	e7f9      	b.n	8009680 <memset+0x4>

0800968c <_init>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr

08009698 <_fini>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr
